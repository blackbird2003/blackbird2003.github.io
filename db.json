{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/test.md","hash":"516cfee8d18c2ed4868c6f52f70b195585f0437d","modified":1752476248683},{"_id":"source/2024-05-21-diary/index.md","hash":"ae41f3c3491e35d67b4acf72b85e5aeb1dd9993a","modified":1716254228265},{"_id":"source/_posts/GAMES101-作业7-路径追踪-踩坑指南.md","hash":"ca25f0dd837583d13a59e9fdad56679d14ef5780","modified":1716887326158},{"_id":"source/about/index.md","hash":"1a8d6eb573676d65e54de198f0329b2c4143a56c","modified":1717400503250},{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1713074338398},{"_id":"source/_posts/GAMES101-作业8-质点弹簧系统-踩坑指南.md","hash":"b86c9f453ff0c0c3247ccd9f0145909aefe86c02","modified":1716887211386},{"_id":"source/_posts/test/test.md","hash":"94ae0444c2ba4a8dd3122a004dd41a2d8c475906","modified":1752473858356},{"_id":"source/_posts/TinyRendererNotes.md","hash":"b5bd61813a43e62d6645cf02b2843c60983b42fd","modified":1715523497794},{"_id":"source/_posts/hello-world-nya.md","hash":"fce1a42917871f5f432fbf33cd735651a55615a5","modified":1713074958467},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713076121956},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713076121946},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713076121946},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713076121946},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713076121955},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713076121955},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713076121897},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713076121897},{"_id":"source/_posts/image-20240416132845514.png","hash":"5c616708addd3b0cf9774c9e4e591fa854a7f521","modified":1713241725541},{"_id":"source/_posts/GAMES101-作业7-路径追踪-踩坑指南/image-20240416133742442.png","hash":"5c616708addd3b0cf9774c9e4e591fa854a7f521","modified":1713242262458},{"_id":"source/_posts/image/GAMES101-作业7-踩坑指南/1713230279835.png","hash":"c780eda4b8804cafbc98301af60688a769b54801","modified":1713230280339},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1713076121877},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1713076121877},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1713076121879},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1713076121878},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1713076121880},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1713076121880},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1713076121879},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1713076121879},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1713076121880},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1713076121880},{"_id":"themes/next/_config.yml","hash":"14be8a25c5c13537fa74ae76eface90001ccb6e5","modified":1713083657736},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1713076121882},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1713076121914},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1713076121882},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1713076121878},{"_id":"themes/next/README.cn.md","hash":"b878b73f3fcdef47849453c94420871903d487b3","modified":1713076121881},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1713076121883},{"_id":"themes/next/README.md","hash":"efcdc4b0ca791c3fc64afa28c8721e137f2d11ea","modified":1713076121881},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1713076121882},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1713076121882},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1713076121883},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1713076121883},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1713076121884},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1713076121883},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1713076121884},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1713076121886},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1713076121884},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1713076121886},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1713076121886},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1713076121878},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1713076121878},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1713076121886},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1713076121916},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1713076121887},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1713076121917},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1713076121887},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1713076121887},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1713076122010},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1713076121913},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1713076121888},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1713076121912},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1713076121914},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1713076121914},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1713076121913},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1713076121914},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1713076121879},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1713076121917},{"_id":"themes/next/scripts/tags/exturl.js","hash":"0a9044c2e4b59168561ea6c3d17d1b3351711d3c","modified":1713076121918},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1713076121919},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1713076121918},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1713076121918},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1713076121919},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1713076121920},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1713076121920},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1713076121914},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1713076121920},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1713076122010},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1713076121956},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1713076121956},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1713076122010},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1713076121957},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1713076121955},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1713076121957},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1713076121957},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1713076121957},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1713076121959},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1713076121959},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1713076121959},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1713076121959},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1713076121959},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1713076121959},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1713076121960},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1713076121960},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1713076121960},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1713076121888},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1713076121887},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1713076121890},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1713076121891},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1713076121890},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1713076121892},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1713076121961},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1713076121961},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1713076121892},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1713076121960},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1713076121893},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1713076121896},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1713076121892},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1713076121897},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1713076121896},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1713076121888},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1713076121889},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1713077292469},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1713076121890},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1713076121888},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1713076121907},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1713076121889},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1713076121907},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1713076121908},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1713076121906},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1713076121908},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1713076121909},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1713076121909},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1713076121946},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1713076121946},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1713076121945},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1713076121954},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1713076121954},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1713076121955},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1713076121961},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1713076121946},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1713076121955},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1713076121962},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1713076121961},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1713076121962},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1713076121962},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1713076121963},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1713076121964},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1713076121962},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1713076121963},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1713076121964},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1713076121969},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1713076121964},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1713076121973},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1713076121972},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1713076121980},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1713076121982},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1713076121982},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1713076121980},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1713076121973},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1713076121972},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1713076121982},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1713076121982},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1713076121980},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1713076121994},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1713076121980},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1713076121982},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1713076121995},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1713076121995},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1713076121997},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1713076121997},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1713076121996},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1713076121995},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1713076121996},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1713076121996},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1713076122001},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1713076121998},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1713076121998},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1713076121998},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1713076121998},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1713076122002},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1713076121998},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1713076122002},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1713076122000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1713076121999},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1713076121999},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1713076122001},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1713076122000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1713076121999},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1713076122000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1713076122000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1713076122000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1713076122006},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1713076122006},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1713076122001},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1713076122009},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1713076122008},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1713076121891},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1713076121891},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1713076121893},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1713076121894},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1713076121894},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1713076121893},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1713076121895},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1713076121897},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1713076121895},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1713076121896},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1713076121895},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1713076121897},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1713076121904},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1713076121905},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1713076121903},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1713076121904},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1713076121904},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1713076121905},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1713076122009},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1713076121906},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1713076121906},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1713076121903},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1713076121911},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1713076121899},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1713076121899},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1713076121911},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1713076121911},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1713076121900},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1713076121900},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1713076121899},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1713076121901},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1713076121901},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1713076121901},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1713076121902},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1713076121902},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1713076121902},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1713076121912},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1713076121902},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1713076121901},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1713076121923},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1713076121921},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1713076121943},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1713076121922},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1713076121937},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1713076121943},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1713076121929},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1713076121922},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1713076121922},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1713076121944},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1713076121945},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1713076121944},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1713076121947},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1713076121944},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1713076121948},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1713076121947},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1713076121945},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1713076121948},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1713076121948},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1713076121948},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1713076121953},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1713076121950},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1713076121953},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1713076121953},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1713076121950},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1713076121953},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1713076121954},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1713076121952},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1713076121949},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1713076121949},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1713076121954},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1713076121952},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1713076121952},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1713076121963},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1713076121973},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1713076121967},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1713076121969},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1713076121968},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1713076121973},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1713076121975},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1713076121975},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1713076121976},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1713076121975},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1713076121979},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1713076121979},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1713076121979},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1713076121983},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1713076121983},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1713076121984},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1713076121981},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1713076121981},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1713076121910},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1713076121910},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1713076121924},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1713076121924},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1713076121924},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1713076121928},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1713076122005},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1713076121927},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1713076121926},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1713076121928},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1713076122005},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1713076121928},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1713076121924},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1713076121928},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1713076121929},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1713076121930},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1713076121929},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1713076121929},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1713076121930},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1713076121931},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1713076121933},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1713076121930},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1713076121931},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1713076121931},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1713076121933},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1713076121934},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1713076121933},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1713076121930},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1713076121934},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1713076121934},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1713076121934},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1713076121935},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1713076121935},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1713076121936},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1713076121936},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1713076121935},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1713076121936},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1713076121936},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1713076121937},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1713076121937},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1713076121926},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1713076121938},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1713076121938},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1713076121927},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1713076121938},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1713076121926},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1713076121937},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1713076121939},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1713076121938},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1713076121939},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1713076121938},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1713076121939},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1713076121939},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1713076121940},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1713076121940},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1713076121940},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1713076121940},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1713076121949},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1713076121942},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1713076121943},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1713076121952},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1713076121942},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1713076121923},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1713076121950},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1713076121965},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1713076121942},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1713076121966},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1713076121977},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1713076121966},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1713076121966},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1713076121977},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1713076121977},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1713076121978},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1713076121967},{"_id":"source/_posts/image-20240416132834246.png","hash":"4b92de650a815550855ca9c48fedc988e1510f9f","modified":1713241714280},{"_id":"source/_posts/GAMES101-作业7-路径追踪-踩坑指南/image-20240416133728725.png","hash":"4b92de650a815550855ca9c48fedc988e1510f9f","modified":1713242248759},{"_id":"source/_posts/image/GAMES101-作业7-踩坑指南/1713229011326.png","hash":"83ac1ddecce632c7735b5fc154d191a0b6d90e26","modified":1713229011992},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1713076121978},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1713076121978},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1713076121995},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1713076121968},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1713076121993},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1713076121994},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1713076121985},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1713076121993},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1713076121987},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1713076122008},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1713076121972},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1713076121990},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1713076122004},{"_id":"public/2024-05-21-diary/index.html","hash":"002136844f28bbca115522aed51d3ad517a04745","modified":1752476015886},{"_id":"public/about/index.html","hash":"efabe23b6af31d405ed1e53c68ccba988825b251","modified":1752476015886},{"_id":"public/2025/07/14/test/test/index.html","hash":"d78f34e4307472998b276204a672a5edb41b6824","modified":1752475721434},{"_id":"public/2025/07/14/test/index.html","hash":"99d9a55db724a4dd4cb76b8f4eaf7f8da285ee0c","modified":1752476265379},{"_id":"public/2024/05/28/GAMES101-作业8-质点弹簧系统-踩坑指南/index.html","hash":"f1fcef923c1b0fab01f2cb1b7a8e777deb16bbb3","modified":1752476015886},{"_id":"public/2024/05/06/TinyRendererNotes/index.html","hash":"c1847b658705494cdf700354634a94d248f75e85","modified":1752476015886},{"_id":"public/2024/04/16/GAMES101-作业7-路径追踪-踩坑指南/index.html","hash":"7c692c2b18db76ddb8f8c446a0823f2d24d59a6f","modified":1752476015886},{"_id":"public/2024/04/14/hello-world-nya/index.html","hash":"57b4696d1e29a49b57554a831576b558988926cb","modified":1752476015886},{"_id":"public/2024/04/14/hello-world/index.html","hash":"0202835f7831c887c15250ae82e5ef86bd6a9e9b","modified":1752476015886},{"_id":"public/archives/index.html","hash":"1425fb4bf8755048f6d31ea62b54984c48747920","modified":1752476015886},{"_id":"public/archives/2024/index.html","hash":"bc7bad3191db565683a4d7ffa9478381320d426d","modified":1752476015886},{"_id":"public/archives/2024/04/index.html","hash":"1ec8301f705e89d6888c39c4f7e0176724a65cd4","modified":1752476015886},{"_id":"public/archives/2024/05/index.html","hash":"208b3e8aaa9a0065a3fe709b417ea865d7fb8f36","modified":1752476015886},{"_id":"public/index.html","hash":"fe2e81d16e4ba42e2b1f9a6616129e2b38d8ad08","modified":1752476265379},{"_id":"public/archives/2025/index.html","hash":"1bd638ad63ba3fdffdd42ed8668325d4fe8241f8","modified":1752476015886},{"_id":"public/archives/2025/07/index.html","hash":"fd3c6d878c4451eeeb4769bd778c64a8541225ed","modified":1752476015886},{"_id":"public/tags/图形学/index.html","hash":"a9106f92108f98a1826ba4102da27d121299639d","modified":1752476015886},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1752475721434},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1752475721434},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1752475721434},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1752475721434},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1752475721434},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1752475721434},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1752475721434},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1752475721434},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1752475721434},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1752475721434},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1752475721434},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1752475721434},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1752475721434},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1752475721434},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1752475721434},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1752475721434},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1752475721434},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1752475721434},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1752475721434},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1752475721434},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1752475721434},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1752475721434},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1752475721434},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1752475721434},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1752475721434},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1752475721434},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1752475721434},{"_id":"public/css/main.css","hash":"2468d2eb038358f93021674b8cf58c45df50b9c9","modified":1752475721434},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1752475721434},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1752475721434},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1752475721434},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1752475721434},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1752475721434},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1752475721434},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1752475721434},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1752475721434},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1752475721434},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1752475721434},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1752475721434},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1752475721434},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1752475721434},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1752475721434},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1752475721434},{"_id":"public/lib/fastclick/README.html","hash":"1c2cb1168e9df516e311177476e499990453965d","modified":1752475721434},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1752475721434},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1752475721434},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1752475721434},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1752475721434},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1752475721434},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1752475721434},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1752475721434},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1752475721434},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1752475721434},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1752475721434},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1752475721434},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1752475721434},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1752475721434},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1752475721434},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"bc6cf8951a99074bdc6ec9172f03fb7c0e412729","modified":1752475721434},{"_id":"public/lib/jquery_lazyload/README.html","hash":"96a5c2cc00de5b338ae972c1e8de879d2d919608","modified":1752475721434},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1752475721434},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1752475721434},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1752475721434},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1752475721434},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1752475721434},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1752475721434},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1752475721434},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1752475721434},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1752475721434},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1752475721434},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1752475721434},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1752475721434},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1752475721434},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1752475721434},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1752475721434},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1752475721434},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1752475721434},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1752475721434},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1752475721434},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1752475721434},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1752475721434},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1752475721434},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1752475721434},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1752475721434},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1752475721434},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1752475721434},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1752475721434},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1752475721434},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1752475721434},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1752475721434},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1752475721434},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1752475721434},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1752475721434},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1752475721434},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1752475721434},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1752475721434},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1752475721434},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1752475721434},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1752475721434},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1752475721434},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1752475721434},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1752475721434},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1752475721434},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1752475721434},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1752475721434},{"_id":"public/2025/07/14/test/test.html","hash":"8ec793f321e4a21e2d39d49ed51149150df1249d","modified":1752475721434},{"_id":"public/2024/04/16/GAMES101-作业7-路径追踪-踩坑指南/image-20240416133742442.png","hash":"5c616708addd3b0cf9774c9e4e591fa854a7f521","modified":1752475721434},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1752475721434},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1752475721434},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1752475721434},{"_id":"public/2024/04/16/GAMES101-作业7-路径追踪-踩坑指南/image-20240416133728725.png","hash":"4b92de650a815550855ca9c48fedc988e1510f9f","modified":1752475721434},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1752475721434}],"Category":[],"Data":[],"Page":[{"title":"2024/05/21 diary","date":"2024-05-21T02:16:30.000Z","type":"diary","_content":"","source":"2024-05-21-diary/index.md","raw":"---\ntitle: 2024/05/21 diary\ndate: 2024-05-21 10:16:30\ntype: diary\n---\n","updated":"2024-05-21T01:17:08.265Z","path":"2024-05-21-diary/index.html","comments":1,"layout":"page","_id":"cmd2qsp5v0000dgyiei7w9w5d","content":"","excerpt":"","more":""},{"title":"about","date":"2024-04-14T07:58:57.000Z","_content":"Wei Xianghan です。UESTC Computer Science 三年生です。電気通信大学(UEC)に交換留学中です。\n\n之前是ACMer，最好的成绩2023区域赛（杭州）银牌。现在在学图形学。\n\ncodeforces：_vv123 atcoder:AceBlackbird\n\n之前的博客 cnblogs.com/vv123\n\n喜欢的游戏：Finding Paradise, OMORI, Terraria, etc\n\n网抑云音乐：__blackbird\n\n友链：atri2333.github.io\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2024-04-14 15:58:57\n---\nWei Xianghan です。UESTC Computer Science 三年生です。電気通信大学(UEC)に交換留学中です。\n\n之前是ACMer，最好的成绩2023区域赛（杭州）银牌。现在在学图形学。\n\ncodeforces：_vv123 atcoder:AceBlackbird\n\n之前的博客 cnblogs.com/vv123\n\n喜欢的游戏：Finding Paradise, OMORI, Terraria, etc\n\n网抑云音乐：__blackbird\n\n友链：atri2333.github.io\n","updated":"2024-06-03T07:41:43.250Z","path":"about/index.html","comments":1,"layout":"page","_id":"cmd2qsp600002dgyi7i8leadc","content":"<p>Wei Xianghan です。UESTC Computer Science 三年生です。電気通信大学(UEC)に交換留学中です。</p>\n<p>之前是ACMer，最好的成绩2023区域赛（杭州）银牌。现在在学图形学。</p>\n<p>codeforces：_vv123 atcoder:AceBlackbird</p>\n<p>之前的博客 cnblogs.com&#x2F;vv123</p>\n<p>喜欢的游戏：Finding Paradise, OMORI, Terraria, etc</p>\n<p>网抑云音乐：__blackbird</p>\n<p>友链：atri2333.github.io</p>\n","excerpt":"","more":"<p>Wei Xianghan です。UESTC Computer Science 三年生です。電気通信大学(UEC)に交換留学中です。</p>\n<p>之前是ACMer，最好的成绩2023区域赛（杭州）银牌。现在在学图形学。</p>\n<p>codeforces：_vv123 atcoder:AceBlackbird</p>\n<p>之前的博客 cnblogs.com&#x2F;vv123</p>\n<p>喜欢的游戏：Finding Paradise, OMORI, Terraria, etc</p>\n<p>网抑云音乐：__blackbird</p>\n<p>友链：atri2333.github.io</p>\n"}],"Post":[{"title":"GAMES101 作业7 路径追踪 踩坑指南","date":"2024-04-16T05:35:32.000Z","_content":"\n\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n\n首先回顾路径追踪的原理，如下图\n\n<img src=\"https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240416121322581-1913642501.png\" alt=\"1713229011326\" style=\"zoom:50%;\" />\n\n\n## 基本思想\n\nwo是射向眼镜（相机）的光线，包含来自光源的直接光照ws，来自其他物体的间接光照wi两部分。\n\n在实现path tracing时，我们考虑的是黄色线的方向，即光线从相机射向p点（实际上是从p点射向相机），然后通过多次随机采样从p点射出（实际上是射向p点）的光线得到该像素点的真实颜色。\n\n为了提高效率，将射向p的光线分为ws(光源)和wi（其他物体）计算。由于wi、ws分开计算，因此如果ws被物体挡住,或者wi打到光源均不计算。\n\nwi需要递归计算，通过神奇的Russian Roulette在减少递归层数的同时保持光照的期望不变。\n\n然后按照作业指南上的伪代码写就可以了\n\n<img src=\"https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240416121328730-1409855486.png\" alt=\"1713230279835\" style=\"zoom:80%;\" />\n\n\n\n## 注意事项\n\n- 右墙壁发黑：检查Bound3::IntersectP, `return t_enter <= t_exit && t_exit >= 0;` 就可以\n- 小正方体右上角有三角形黑块:检查Triangle::getIntersectionin Triangle.hpp，当时间小于0时不能判定为相交\n- 多线程：注意framebuffer的下标应该由m改为直接用i和j计算。CMakeLists.txt加一行 `TARGET_LINK_LIBRARIES(RayTracing pthread)`就好。\n\n## 代码\n\n### 多线程优化\n\n```cpp\n    // change the spp value to change sample ammount\n    int spp = 32; // default:16\n    std::cout << \"SPP: \" << spp << \"\\n\";\n\n    // for (uint32_t j = 0; j < scene.height; ++j) {\n    //     for (uint32_t i = 0; i < scene.width; ++i) {\n    //         // generate primary ray direction\n    //         float x = (2 * (i + 0.5) / (float)scene.width - 1) *\n    //                   imageAspectRatio * scale;\n    //         float y = (1 - 2 * (j + 0.5) / (float)scene.height) * scale;\n\n    //         Vector3f dir = normalize(Vector3f(-x, y, 1));\n    //         for (int k = 0; k < spp; k++){\n    //             framebuffer[m] += scene.castRay(Ray(eye_pos, dir), 0) / spp;  \n    //         }\n    //         m++;\n    //     }\n    //     UpdateProgress(j / (float)scene.height);\n    // }\n    // UpdateProgress(1.f);\n\n    const int thread_cnt = 12;\n    int finished_thread = 0;\n    int finished_width = 0;\n    std::mutex mtx;\n  \n    printf(\"%d %d\\n\", scene.height, scene.width);\n    auto multiThreadCastRay = [&](uint32_t y_min, uint32_t y_max) \n    {\n        printf(\"start %d %d\\n\", y_min, y_max);\n        for (uint32_t j = y_min; j <= y_max; ++j) {\n            for (uint32_t i = 0; i < scene.width; ++i) {\n                // generate primary ray direction\n                float x = (2 * (i + 0.5) / (float)scene.width - 1) *\n                        imageAspectRatio * scale;\n                float y = (1 - 2 * (j + 0.5) / (float)scene.height) * scale;\n\n                Vector3f dir = normalize(Vector3f(-x, y, 1));\n                for (int k = 0; k < spp; k++) {\n                    framebuffer[scene.width * j + i] += scene.castRay(Ray(eye_pos, dir), 0) / spp; \n                }\n            }\n            //printf(\"%d\\n\", j);\n            //UpdateProgress(j / (float)scene.height);\n            mtx.lock();\n            UpdateProgress(++finished_width * 1.0 / scene.width);\n            mtx.unlock();\n        }\n        printf(\"ok %d %d\\n\", y_min, y_max);\n    };\n    int block = scene.height / thread_cnt + (scene.height % thread_cnt != 0);\n    std::thread th[thread_cnt];\n    for (int i = 0; i < thread_cnt; i++) {\n        th[i] = std::thread(multiThreadCastRay, i * block, std::min((i + 1) * block - 1, scene.height));\n    }\n    for (int i = 0; i < thread_cnt; i++) th[i].join();\n    UpdateProgress(1.0);\n\n```\n\n### 路径追踪\n\n```cpp\n// Implementation of Path Tracing\nVector3f Scene::castRay(const Ray &ray, int depth) const\n{\n    // TO DO Implement Path Tracing Algorithm here\n    /*\n    shade(p, wo)\n        sampleLight(inter , pdf_light)\n        Get x, ws, NN, emit from inter\n        Shoot a ray from p to x\n        If the ray is not blocked in the middle\n            L_dir = emit * eval(wo, ws, N) * dot(ws, N) * dot(ws,\n            NN) / |x-p|^2 / pdf_light\n  \n  \n        L_indir = 0.0\n        //Test Russian Roulette with probability RussianRoulette\n        wi = sample(wo, N)\n        Trace a ray r(p, wi)\n        If ray r hit a non-emitting object at q\n            L_indir = shade(q, wi) * eval(wo, wi, N) * dot(wi, N)\n            / pdf(wo, wi, N) / RussianRoulette\n  \n        Return L_dir + L_indir\n    */\n\n    Vector3f L_dir(0, 0, 0), L_indir(0, 0, 0);\n    //ray wo is screen to p, now find p and see if already hit light\n    Ray wo = ray;\n    Intersection p_inter = this->intersect(wo);\n    //if hit nothing\n    if (!p_inter.happened) return L_dir;\n    //if hit light source\n    if (p_inter.m->hasEmission()) return p_inter.m->getEmission();\n\n    //otherwise, it hit a object\n\n    //sampleLight(inter , pdf_light)\n    //uniformly sample x from all LIGHTS and get its pdf\n    Intersection x_inter; float x_pdf;\n    sampleLight(x_inter, x_pdf);\n\n    //Get x, ws, Nx, emit from inter \n    //ws is from p to x(light), Np is at p, Nx is at x(light)\n    Vector3f p = p_inter.coords;\n    Vector3f x = x_inter.coords;\n    Vector3f Np = p_inter.normal;\n    Vector3f Nx = x_inter.normal;\n    Vector3f emit = x_inter.emit;  \n\n    //Shoot a ray (ws) from p to x(light) \n    Vector3f ws_dir = (x - p).normalized();\n    Ray ws(p, ws_dir);\n    Intersection ws_inter = this->intersect(ws);\n\n    // If the ray is NOT blocked in the middle\n    //         L_dir = emit * eval(wo, ws, N) * dot(ws, N) * dot(ws,\n    //         NN) / |x-p|^2 / pdf_light\n    // Else L_dir = 0.0\n\n    //calc length of p - x and ws_inter to see if it is blocked\n    float px_dis = (x - p).norm(), ws_dis = ws_inter.distance;\n    if (px_dis - ws_dis < 0.001) {\n        L_dir = emit \n        * p_inter.m->eval(wo.direction, ws.direction, Np)\n        * dotProduct(ws.direction, Np)      //all vectors were nomorlized\n        * dotProduct(-ws.direction, Nx)     //so dot product is cosine\n        / pow(px_dis, 2)\n        / x_pdf;\n    } // else L_dir = 0; no need\n  \n    // Now calculate L_indir\n    // Test Russian Roulette with probability RussianRoulette\n    float P_rand = get_random_float();\n    if (P_rand < RussianRoulette) {\n        //wi = sample(wo, N)\n        //wi is from p to q\n        Vector3f wi_dir = p_inter.m->sample(wo.direction, Np).normalized();\n        Ray wi(p_inter.coords, wi_dir);\n        // Trace a ray r(p, wi)\n        // If ray r hit a non-emitting object at q\n        //     L_indir = shade(q, wi) * eval(wo, wi, N) * dot(wi, N)\n        //     / pdf(wo, wi, N) / RussianRoulette\n        Intersection wi_inter = this->intersect(wi);\n        if (wi_inter.happened && !(wi_inter.m->hasEmission())) {\n            L_indir = castRay(wi, depth + 1)\n            * p_inter.m->eval(wo.direction, wi.direction, Np)\n            * dotProduct(wi.direction, Np)\n            / p_inter.m->pdf(wo.direction, wi.direction, Np)\n            / RussianRoulette;\n        }\n    }\n    return L_dir + L_indir;\n}\n```\n","source":"_posts/GAMES101-作业7-路径追踪-踩坑指南.md","raw":"---\ntitle: GAMES101 作业7 路径追踪 踩坑指南\ndate: 2024-04-16 13:35:32\ntags: 图形学\n---\n\n\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n\n首先回顾路径追踪的原理，如下图\n\n<img src=\"https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240416121322581-1913642501.png\" alt=\"1713229011326\" style=\"zoom:50%;\" />\n\n\n## 基本思想\n\nwo是射向眼镜（相机）的光线，包含来自光源的直接光照ws，来自其他物体的间接光照wi两部分。\n\n在实现path tracing时，我们考虑的是黄色线的方向，即光线从相机射向p点（实际上是从p点射向相机），然后通过多次随机采样从p点射出（实际上是射向p点）的光线得到该像素点的真实颜色。\n\n为了提高效率，将射向p的光线分为ws(光源)和wi（其他物体）计算。由于wi、ws分开计算，因此如果ws被物体挡住,或者wi打到光源均不计算。\n\nwi需要递归计算，通过神奇的Russian Roulette在减少递归层数的同时保持光照的期望不变。\n\n然后按照作业指南上的伪代码写就可以了\n\n<img src=\"https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240416121328730-1409855486.png\" alt=\"1713230279835\" style=\"zoom:80%;\" />\n\n\n\n## 注意事项\n\n- 右墙壁发黑：检查Bound3::IntersectP, `return t_enter <= t_exit && t_exit >= 0;` 就可以\n- 小正方体右上角有三角形黑块:检查Triangle::getIntersectionin Triangle.hpp，当时间小于0时不能判定为相交\n- 多线程：注意framebuffer的下标应该由m改为直接用i和j计算。CMakeLists.txt加一行 `TARGET_LINK_LIBRARIES(RayTracing pthread)`就好。\n\n## 代码\n\n### 多线程优化\n\n```cpp\n    // change the spp value to change sample ammount\n    int spp = 32; // default:16\n    std::cout << \"SPP: \" << spp << \"\\n\";\n\n    // for (uint32_t j = 0; j < scene.height; ++j) {\n    //     for (uint32_t i = 0; i < scene.width; ++i) {\n    //         // generate primary ray direction\n    //         float x = (2 * (i + 0.5) / (float)scene.width - 1) *\n    //                   imageAspectRatio * scale;\n    //         float y = (1 - 2 * (j + 0.5) / (float)scene.height) * scale;\n\n    //         Vector3f dir = normalize(Vector3f(-x, y, 1));\n    //         for (int k = 0; k < spp; k++){\n    //             framebuffer[m] += scene.castRay(Ray(eye_pos, dir), 0) / spp;  \n    //         }\n    //         m++;\n    //     }\n    //     UpdateProgress(j / (float)scene.height);\n    // }\n    // UpdateProgress(1.f);\n\n    const int thread_cnt = 12;\n    int finished_thread = 0;\n    int finished_width = 0;\n    std::mutex mtx;\n  \n    printf(\"%d %d\\n\", scene.height, scene.width);\n    auto multiThreadCastRay = [&](uint32_t y_min, uint32_t y_max) \n    {\n        printf(\"start %d %d\\n\", y_min, y_max);\n        for (uint32_t j = y_min; j <= y_max; ++j) {\n            for (uint32_t i = 0; i < scene.width; ++i) {\n                // generate primary ray direction\n                float x = (2 * (i + 0.5) / (float)scene.width - 1) *\n                        imageAspectRatio * scale;\n                float y = (1 - 2 * (j + 0.5) / (float)scene.height) * scale;\n\n                Vector3f dir = normalize(Vector3f(-x, y, 1));\n                for (int k = 0; k < spp; k++) {\n                    framebuffer[scene.width * j + i] += scene.castRay(Ray(eye_pos, dir), 0) / spp; \n                }\n            }\n            //printf(\"%d\\n\", j);\n            //UpdateProgress(j / (float)scene.height);\n            mtx.lock();\n            UpdateProgress(++finished_width * 1.0 / scene.width);\n            mtx.unlock();\n        }\n        printf(\"ok %d %d\\n\", y_min, y_max);\n    };\n    int block = scene.height / thread_cnt + (scene.height % thread_cnt != 0);\n    std::thread th[thread_cnt];\n    for (int i = 0; i < thread_cnt; i++) {\n        th[i] = std::thread(multiThreadCastRay, i * block, std::min((i + 1) * block - 1, scene.height));\n    }\n    for (int i = 0; i < thread_cnt; i++) th[i].join();\n    UpdateProgress(1.0);\n\n```\n\n### 路径追踪\n\n```cpp\n// Implementation of Path Tracing\nVector3f Scene::castRay(const Ray &ray, int depth) const\n{\n    // TO DO Implement Path Tracing Algorithm here\n    /*\n    shade(p, wo)\n        sampleLight(inter , pdf_light)\n        Get x, ws, NN, emit from inter\n        Shoot a ray from p to x\n        If the ray is not blocked in the middle\n            L_dir = emit * eval(wo, ws, N) * dot(ws, N) * dot(ws,\n            NN) / |x-p|^2 / pdf_light\n  \n  \n        L_indir = 0.0\n        //Test Russian Roulette with probability RussianRoulette\n        wi = sample(wo, N)\n        Trace a ray r(p, wi)\n        If ray r hit a non-emitting object at q\n            L_indir = shade(q, wi) * eval(wo, wi, N) * dot(wi, N)\n            / pdf(wo, wi, N) / RussianRoulette\n  \n        Return L_dir + L_indir\n    */\n\n    Vector3f L_dir(0, 0, 0), L_indir(0, 0, 0);\n    //ray wo is screen to p, now find p and see if already hit light\n    Ray wo = ray;\n    Intersection p_inter = this->intersect(wo);\n    //if hit nothing\n    if (!p_inter.happened) return L_dir;\n    //if hit light source\n    if (p_inter.m->hasEmission()) return p_inter.m->getEmission();\n\n    //otherwise, it hit a object\n\n    //sampleLight(inter , pdf_light)\n    //uniformly sample x from all LIGHTS and get its pdf\n    Intersection x_inter; float x_pdf;\n    sampleLight(x_inter, x_pdf);\n\n    //Get x, ws, Nx, emit from inter \n    //ws is from p to x(light), Np is at p, Nx is at x(light)\n    Vector3f p = p_inter.coords;\n    Vector3f x = x_inter.coords;\n    Vector3f Np = p_inter.normal;\n    Vector3f Nx = x_inter.normal;\n    Vector3f emit = x_inter.emit;  \n\n    //Shoot a ray (ws) from p to x(light) \n    Vector3f ws_dir = (x - p).normalized();\n    Ray ws(p, ws_dir);\n    Intersection ws_inter = this->intersect(ws);\n\n    // If the ray is NOT blocked in the middle\n    //         L_dir = emit * eval(wo, ws, N) * dot(ws, N) * dot(ws,\n    //         NN) / |x-p|^2 / pdf_light\n    // Else L_dir = 0.0\n\n    //calc length of p - x and ws_inter to see if it is blocked\n    float px_dis = (x - p).norm(), ws_dis = ws_inter.distance;\n    if (px_dis - ws_dis < 0.001) {\n        L_dir = emit \n        * p_inter.m->eval(wo.direction, ws.direction, Np)\n        * dotProduct(ws.direction, Np)      //all vectors were nomorlized\n        * dotProduct(-ws.direction, Nx)     //so dot product is cosine\n        / pow(px_dis, 2)\n        / x_pdf;\n    } // else L_dir = 0; no need\n  \n    // Now calculate L_indir\n    // Test Russian Roulette with probability RussianRoulette\n    float P_rand = get_random_float();\n    if (P_rand < RussianRoulette) {\n        //wi = sample(wo, N)\n        //wi is from p to q\n        Vector3f wi_dir = p_inter.m->sample(wo.direction, Np).normalized();\n        Ray wi(p_inter.coords, wi_dir);\n        // Trace a ray r(p, wi)\n        // If ray r hit a non-emitting object at q\n        //     L_indir = shade(q, wi) * eval(wo, wi, N) * dot(wi, N)\n        //     / pdf(wo, wi, N) / RussianRoulette\n        Intersection wi_inter = this->intersect(wi);\n        if (wi_inter.happened && !(wi_inter.m->hasEmission())) {\n            L_indir = castRay(wi, depth + 1)\n            * p_inter.m->eval(wo.direction, wi.direction, Np)\n            * dotProduct(wi.direction, Np)\n            / p_inter.m->pdf(wo.direction, wi.direction, Np)\n            / RussianRoulette;\n        }\n    }\n    return L_dir + L_indir;\n}\n```\n","slug":"GAMES101-作业7-路径追踪-踩坑指南","published":1,"updated":"2024-05-28T09:08:46.158Z","comments":1,"layout":"post","photos":[],"_id":"cmd2qsp5y0001dgyifhhjhyiv","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n<p>首先回顾路径追踪的原理，如下图</p>\n<img src=\"https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240416121322581-1913642501.png\" alt=\"1713229011326\" style=\"zoom:50%;\">\n\n\n<h2 id=\"基本思想\"><a href=\"#基本思想\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h2><p>wo是射向眼镜（相机）的光线，包含来自光源的直接光照ws，来自其他物体的间接光照wi两部分。</p>\n<p>在实现path tracing时，我们考虑的是黄色线的方向，即光线从相机射向p点（实际上是从p点射向相机），然后通过多次随机采样从p点射出（实际上是射向p点）的光线得到该像素点的真实颜色。</p>\n<p>为了提高效率，将射向p的光线分为ws(光源)和wi（其他物体）计算。由于wi、ws分开计算，因此如果ws被物体挡住,或者wi打到光源均不计算。</p>\n<p>wi需要递归计算，通过神奇的Russian Roulette在减少递归层数的同时保持光照的期望不变。</p>\n<p>然后按照作业指南上的伪代码写就可以了</p>\n<img src=\"https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240416121328730-1409855486.png\" alt=\"1713230279835\" style=\"zoom:80%;\">\n\n\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>右墙壁发黑：检查Bound3::IntersectP, <code>return t_enter &lt;= t_exit &amp;&amp; t_exit &gt;= 0;</code> 就可以</li>\n<li>小正方体右上角有三角形黑块:检查Triangle::getIntersectionin Triangle.hpp，当时间小于0时不能判定为相交</li>\n<li>多线程：注意framebuffer的下标应该由m改为直接用i和j计算。CMakeLists.txt加一行 <code>TARGET_LINK_LIBRARIES(RayTracing pthread)</code>就好。</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><h3 id=\"多线程优化\"><a href=\"#多线程优化\" class=\"headerlink\" title=\"多线程优化\"></a>多线程优化</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// change the spp value to change sample ammount</span></span><br><span class=\"line\"><span class=\"type\">int</span> spp = <span class=\"number\">32</span>; <span class=\"comment\">// default:16</span></span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"string\">&quot;SPP: &quot;</span> &lt;&lt; spp &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// for (uint32_t j = 0; j &lt; scene.height; ++j) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     for (uint32_t i = 0; i &lt; scene.width; ++i) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         // generate primary ray direction</span></span><br><span class=\"line\"><span class=\"comment\">//         float x = (2 * (i + 0.5) / (float)scene.width - 1) *</span></span><br><span class=\"line\"><span class=\"comment\">//                   imageAspectRatio * scale;</span></span><br><span class=\"line\"><span class=\"comment\">//         float y = (1 - 2 * (j + 0.5) / (float)scene.height) * scale;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//         Vector3f dir = normalize(Vector3f(-x, y, 1));</span></span><br><span class=\"line\"><span class=\"comment\">//         for (int k = 0; k &lt; spp; k++)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             framebuffer[m] += scene.castRay(Ray(eye_pos, dir), 0) / spp;  </span></span><br><span class=\"line\"><span class=\"comment\">//         &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//         m++;</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//     UpdateProgress(j / (float)scene.height);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// UpdateProgress(1.f);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> thread_cnt = <span class=\"number\">12</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> finished_thread = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> finished_width = <span class=\"number\">0</span>;</span><br><span class=\"line\">std::mutex mtx;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d\\n&quot;</span>, scene.height, scene.width);</span><br><span class=\"line\"><span class=\"keyword\">auto</span> multiThreadCastRay = [&amp;](<span class=\"type\">uint32_t</span> y_min, <span class=\"type\">uint32_t</span> y_max) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;start %d %d\\n&quot;</span>, y_min, y_max);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">uint32_t</span> j = y_min; j &lt;= y_max; ++j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; scene.width; ++i) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// generate primary ray direction</span></span><br><span class=\"line\">            <span class=\"type\">float</span> x = (<span class=\"number\">2</span> * (i + <span class=\"number\">0.5</span>) / (<span class=\"type\">float</span>)scene.width - <span class=\"number\">1</span>) *</span><br><span class=\"line\">                    imageAspectRatio * scale;</span><br><span class=\"line\">            <span class=\"type\">float</span> y = (<span class=\"number\">1</span> - <span class=\"number\">2</span> * (j + <span class=\"number\">0.5</span>) / (<span class=\"type\">float</span>)scene.height) * scale;</span><br><span class=\"line\"></span><br><span class=\"line\">            Vector3f dir = <span class=\"built_in\">normalize</span>(<span class=\"built_in\">Vector3f</span>(-x, y, <span class=\"number\">1</span>));</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; spp; k++) &#123;</span><br><span class=\"line\">                framebuffer[scene.width * j + i] += scene.<span class=\"built_in\">castRay</span>(<span class=\"built_in\">Ray</span>(eye_pos, dir), <span class=\"number\">0</span>) / spp; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;%d\\n&quot;, j);</span></span><br><span class=\"line\">        <span class=\"comment\">//UpdateProgress(j / (float)scene.height);</span></span><br><span class=\"line\">        mtx.<span class=\"built_in\">lock</span>();</span><br><span class=\"line\">        <span class=\"built_in\">UpdateProgress</span>(++finished_width * <span class=\"number\">1.0</span> / scene.width);</span><br><span class=\"line\">        mtx.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ok %d %d\\n&quot;</span>, y_min, y_max);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> block = scene.height / thread_cnt + (scene.height % thread_cnt != <span class=\"number\">0</span>);</span><br><span class=\"line\">std::thread th[thread_cnt];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; thread_cnt; i++) &#123;</span><br><span class=\"line\">    th[i] = std::<span class=\"built_in\">thread</span>(multiThreadCastRay, i * block, std::<span class=\"built_in\">min</span>((i + <span class=\"number\">1</span>) * block - <span class=\"number\">1</span>, scene.height));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; thread_cnt; i++) th[i].<span class=\"built_in\">join</span>();</span><br><span class=\"line\"><span class=\"built_in\">UpdateProgress</span>(<span class=\"number\">1.0</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"路径追踪\"><a href=\"#路径追踪\" class=\"headerlink\" title=\"路径追踪\"></a>路径追踪</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Implementation of Path Tracing</span></span><br><span class=\"line\"><span class=\"function\">Vector3f <span class=\"title\">Scene::castRay</span><span class=\"params\">(<span class=\"type\">const</span> Ray &amp;ray, <span class=\"type\">int</span> depth)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// TO DO Implement Path Tracing Algorithm here</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    shade(p, wo)</span></span><br><span class=\"line\"><span class=\"comment\">        sampleLight(inter , pdf_light)</span></span><br><span class=\"line\"><span class=\"comment\">        Get x, ws, NN, emit from inter</span></span><br><span class=\"line\"><span class=\"comment\">        Shoot a ray from p to x</span></span><br><span class=\"line\"><span class=\"comment\">        If the ray is not blocked in the middle</span></span><br><span class=\"line\"><span class=\"comment\">            L_dir = emit * eval(wo, ws, N) * dot(ws, N) * dot(ws,</span></span><br><span class=\"line\"><span class=\"comment\">            NN) / |x-p|^2 / pdf_light</span></span><br><span class=\"line\"><span class=\"comment\">  </span></span><br><span class=\"line\"><span class=\"comment\">  </span></span><br><span class=\"line\"><span class=\"comment\">        L_indir = 0.0</span></span><br><span class=\"line\"><span class=\"comment\">        //Test Russian Roulette with probability RussianRoulette</span></span><br><span class=\"line\"><span class=\"comment\">        wi = sample(wo, N)</span></span><br><span class=\"line\"><span class=\"comment\">        Trace a ray r(p, wi)</span></span><br><span class=\"line\"><span class=\"comment\">        If ray r hit a non-emitting object at q</span></span><br><span class=\"line\"><span class=\"comment\">            L_indir = shade(q, wi) * eval(wo, wi, N) * dot(wi, N)</span></span><br><span class=\"line\"><span class=\"comment\">            / pdf(wo, wi, N) / RussianRoulette</span></span><br><span class=\"line\"><span class=\"comment\">  </span></span><br><span class=\"line\"><span class=\"comment\">        Return L_dir + L_indir</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Vector3f <span class=\"title\">L_dir</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span>, <span class=\"title\">L_indir</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//ray wo is screen to p, now find p and see if already hit light</span></span><br><span class=\"line\">    Ray wo = ray;</span><br><span class=\"line\">    Intersection p_inter = <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">intersect</span>(wo);</span><br><span class=\"line\">    <span class=\"comment\">//if hit nothing</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!p_inter.happened) <span class=\"keyword\">return</span> L_dir;</span><br><span class=\"line\">    <span class=\"comment\">//if hit light source</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p_inter.m-&gt;<span class=\"built_in\">hasEmission</span>()) <span class=\"keyword\">return</span> p_inter.m-&gt;<span class=\"built_in\">getEmission</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//otherwise, it hit a object</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//sampleLight(inter , pdf_light)</span></span><br><span class=\"line\">    <span class=\"comment\">//uniformly sample x from all LIGHTS and get its pdf</span></span><br><span class=\"line\">    Intersection x_inter; <span class=\"type\">float</span> x_pdf;</span><br><span class=\"line\">    <span class=\"built_in\">sampleLight</span>(x_inter, x_pdf);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Get x, ws, Nx, emit from inter </span></span><br><span class=\"line\">    <span class=\"comment\">//ws is from p to x(light), Np is at p, Nx is at x(light)</span></span><br><span class=\"line\">    Vector3f p = p_inter.coords;</span><br><span class=\"line\">    Vector3f x = x_inter.coords;</span><br><span class=\"line\">    Vector3f Np = p_inter.normal;</span><br><span class=\"line\">    Vector3f Nx = x_inter.normal;</span><br><span class=\"line\">    Vector3f emit = x_inter.emit;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Shoot a ray (ws) from p to x(light) </span></span><br><span class=\"line\">    Vector3f ws_dir = (x - p).<span class=\"built_in\">normalized</span>();</span><br><span class=\"line\">    <span class=\"function\">Ray <span class=\"title\">ws</span><span class=\"params\">(p, ws_dir)</span></span>;</span><br><span class=\"line\">    Intersection ws_inter = <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">intersect</span>(ws);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If the ray is NOT blocked in the middle</span></span><br><span class=\"line\">    <span class=\"comment\">//         L_dir = emit * eval(wo, ws, N) * dot(ws, N) * dot(ws,</span></span><br><span class=\"line\">    <span class=\"comment\">//         NN) / |x-p|^2 / pdf_light</span></span><br><span class=\"line\">    <span class=\"comment\">// Else L_dir = 0.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//calc length of p - x and ws_inter to see if it is blocked</span></span><br><span class=\"line\">    <span class=\"type\">float</span> px_dis = (x - p).<span class=\"built_in\">norm</span>(), ws_dis = ws_inter.distance;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (px_dis - ws_dis &lt; <span class=\"number\">0.001</span>) &#123;</span><br><span class=\"line\">        L_dir = emit </span><br><span class=\"line\">        * p_inter.m-&gt;<span class=\"built_in\">eval</span>(wo.direction, ws.direction, Np)</span><br><span class=\"line\">        * <span class=\"built_in\">dotProduct</span>(ws.direction, Np)      <span class=\"comment\">//all vectors were nomorlized</span></span><br><span class=\"line\">        * <span class=\"built_in\">dotProduct</span>(-ws.direction, Nx)     <span class=\"comment\">//so dot product is cosine</span></span><br><span class=\"line\">        / <span class=\"built_in\">pow</span>(px_dis, <span class=\"number\">2</span>)</span><br><span class=\"line\">        / x_pdf;</span><br><span class=\"line\">    &#125; <span class=\"comment\">// else L_dir = 0; no need</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// Now calculate L_indir</span></span><br><span class=\"line\">    <span class=\"comment\">// Test Russian Roulette with probability RussianRoulette</span></span><br><span class=\"line\">    <span class=\"type\">float</span> P_rand = <span class=\"built_in\">get_random_float</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (P_rand &lt; RussianRoulette) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//wi = sample(wo, N)</span></span><br><span class=\"line\">        <span class=\"comment\">//wi is from p to q</span></span><br><span class=\"line\">        Vector3f wi_dir = p_inter.m-&gt;<span class=\"built_in\">sample</span>(wo.direction, Np).<span class=\"built_in\">normalized</span>();</span><br><span class=\"line\">        <span class=\"function\">Ray <span class=\"title\">wi</span><span class=\"params\">(p_inter.coords, wi_dir)</span></span>;</span><br><span class=\"line\">        <span class=\"comment\">// Trace a ray r(p, wi)</span></span><br><span class=\"line\">        <span class=\"comment\">// If ray r hit a non-emitting object at q</span></span><br><span class=\"line\">        <span class=\"comment\">//     L_indir = shade(q, wi) * eval(wo, wi, N) * dot(wi, N)</span></span><br><span class=\"line\">        <span class=\"comment\">//     / pdf(wo, wi, N) / RussianRoulette</span></span><br><span class=\"line\">        Intersection wi_inter = <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">intersect</span>(wi);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (wi_inter.happened &amp;&amp; !(wi_inter.m-&gt;<span class=\"built_in\">hasEmission</span>())) &#123;</span><br><span class=\"line\">            L_indir = <span class=\"built_in\">castRay</span>(wi, depth + <span class=\"number\">1</span>)</span><br><span class=\"line\">            * p_inter.m-&gt;<span class=\"built_in\">eval</span>(wo.direction, wi.direction, Np)</span><br><span class=\"line\">            * <span class=\"built_in\">dotProduct</span>(wi.direction, Np)</span><br><span class=\"line\">            / p_inter.m-&gt;<span class=\"built_in\">pdf</span>(wo.direction, wi.direction, Np)</span><br><span class=\"line\">            / RussianRoulette;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L_dir + L_indir;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n<p>首先回顾路径追踪的原理，如下图</p>\n<img src=\"https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240416121322581-1913642501.png\" alt=\"1713229011326\" style=\"zoom:50%;\">\n\n\n<h2 id=\"基本思想\"><a href=\"#基本思想\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h2><p>wo是射向眼镜（相机）的光线，包含来自光源的直接光照ws，来自其他物体的间接光照wi两部分。</p>\n<p>在实现path tracing时，我们考虑的是黄色线的方向，即光线从相机射向p点（实际上是从p点射向相机），然后通过多次随机采样从p点射出（实际上是射向p点）的光线得到该像素点的真实颜色。</p>\n<p>为了提高效率，将射向p的光线分为ws(光源)和wi（其他物体）计算。由于wi、ws分开计算，因此如果ws被物体挡住,或者wi打到光源均不计算。</p>\n<p>wi需要递归计算，通过神奇的Russian Roulette在减少递归层数的同时保持光照的期望不变。</p>\n<p>然后按照作业指南上的伪代码写就可以了</p>\n<img src=\"https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240416121328730-1409855486.png\" alt=\"1713230279835\" style=\"zoom:80%;\">\n\n\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>右墙壁发黑：检查Bound3::IntersectP, <code>return t_enter &lt;= t_exit &amp;&amp; t_exit &gt;= 0;</code> 就可以</li>\n<li>小正方体右上角有三角形黑块:检查Triangle::getIntersectionin Triangle.hpp，当时间小于0时不能判定为相交</li>\n<li>多线程：注意framebuffer的下标应该由m改为直接用i和j计算。CMakeLists.txt加一行 <code>TARGET_LINK_LIBRARIES(RayTracing pthread)</code>就好。</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><h3 id=\"多线程优化\"><a href=\"#多线程优化\" class=\"headerlink\" title=\"多线程优化\"></a>多线程优化</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// change the spp value to change sample ammount</span></span><br><span class=\"line\"><span class=\"type\">int</span> spp = <span class=\"number\">32</span>; <span class=\"comment\">// default:16</span></span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"string\">&quot;SPP: &quot;</span> &lt;&lt; spp &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// for (uint32_t j = 0; j &lt; scene.height; ++j) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     for (uint32_t i = 0; i &lt; scene.width; ++i) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         // generate primary ray direction</span></span><br><span class=\"line\"><span class=\"comment\">//         float x = (2 * (i + 0.5) / (float)scene.width - 1) *</span></span><br><span class=\"line\"><span class=\"comment\">//                   imageAspectRatio * scale;</span></span><br><span class=\"line\"><span class=\"comment\">//         float y = (1 - 2 * (j + 0.5) / (float)scene.height) * scale;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//         Vector3f dir = normalize(Vector3f(-x, y, 1));</span></span><br><span class=\"line\"><span class=\"comment\">//         for (int k = 0; k &lt; spp; k++)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             framebuffer[m] += scene.castRay(Ray(eye_pos, dir), 0) / spp;  </span></span><br><span class=\"line\"><span class=\"comment\">//         &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//         m++;</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//     UpdateProgress(j / (float)scene.height);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// UpdateProgress(1.f);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> thread_cnt = <span class=\"number\">12</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> finished_thread = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> finished_width = <span class=\"number\">0</span>;</span><br><span class=\"line\">std::mutex mtx;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d\\n&quot;</span>, scene.height, scene.width);</span><br><span class=\"line\"><span class=\"keyword\">auto</span> multiThreadCastRay = [&amp;](<span class=\"type\">uint32_t</span> y_min, <span class=\"type\">uint32_t</span> y_max) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;start %d %d\\n&quot;</span>, y_min, y_max);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">uint32_t</span> j = y_min; j &lt;= y_max; ++j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; scene.width; ++i) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// generate primary ray direction</span></span><br><span class=\"line\">            <span class=\"type\">float</span> x = (<span class=\"number\">2</span> * (i + <span class=\"number\">0.5</span>) / (<span class=\"type\">float</span>)scene.width - <span class=\"number\">1</span>) *</span><br><span class=\"line\">                    imageAspectRatio * scale;</span><br><span class=\"line\">            <span class=\"type\">float</span> y = (<span class=\"number\">1</span> - <span class=\"number\">2</span> * (j + <span class=\"number\">0.5</span>) / (<span class=\"type\">float</span>)scene.height) * scale;</span><br><span class=\"line\"></span><br><span class=\"line\">            Vector3f dir = <span class=\"built_in\">normalize</span>(<span class=\"built_in\">Vector3f</span>(-x, y, <span class=\"number\">1</span>));</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; spp; k++) &#123;</span><br><span class=\"line\">                framebuffer[scene.width * j + i] += scene.<span class=\"built_in\">castRay</span>(<span class=\"built_in\">Ray</span>(eye_pos, dir), <span class=\"number\">0</span>) / spp; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;%d\\n&quot;, j);</span></span><br><span class=\"line\">        <span class=\"comment\">//UpdateProgress(j / (float)scene.height);</span></span><br><span class=\"line\">        mtx.<span class=\"built_in\">lock</span>();</span><br><span class=\"line\">        <span class=\"built_in\">UpdateProgress</span>(++finished_width * <span class=\"number\">1.0</span> / scene.width);</span><br><span class=\"line\">        mtx.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ok %d %d\\n&quot;</span>, y_min, y_max);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> block = scene.height / thread_cnt + (scene.height % thread_cnt != <span class=\"number\">0</span>);</span><br><span class=\"line\">std::thread th[thread_cnt];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; thread_cnt; i++) &#123;</span><br><span class=\"line\">    th[i] = std::<span class=\"built_in\">thread</span>(multiThreadCastRay, i * block, std::<span class=\"built_in\">min</span>((i + <span class=\"number\">1</span>) * block - <span class=\"number\">1</span>, scene.height));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; thread_cnt; i++) th[i].<span class=\"built_in\">join</span>();</span><br><span class=\"line\"><span class=\"built_in\">UpdateProgress</span>(<span class=\"number\">1.0</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"路径追踪\"><a href=\"#路径追踪\" class=\"headerlink\" title=\"路径追踪\"></a>路径追踪</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Implementation of Path Tracing</span></span><br><span class=\"line\"><span class=\"function\">Vector3f <span class=\"title\">Scene::castRay</span><span class=\"params\">(<span class=\"type\">const</span> Ray &amp;ray, <span class=\"type\">int</span> depth)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// TO DO Implement Path Tracing Algorithm here</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    shade(p, wo)</span></span><br><span class=\"line\"><span class=\"comment\">        sampleLight(inter , pdf_light)</span></span><br><span class=\"line\"><span class=\"comment\">        Get x, ws, NN, emit from inter</span></span><br><span class=\"line\"><span class=\"comment\">        Shoot a ray from p to x</span></span><br><span class=\"line\"><span class=\"comment\">        If the ray is not blocked in the middle</span></span><br><span class=\"line\"><span class=\"comment\">            L_dir = emit * eval(wo, ws, N) * dot(ws, N) * dot(ws,</span></span><br><span class=\"line\"><span class=\"comment\">            NN) / |x-p|^2 / pdf_light</span></span><br><span class=\"line\"><span class=\"comment\">  </span></span><br><span class=\"line\"><span class=\"comment\">  </span></span><br><span class=\"line\"><span class=\"comment\">        L_indir = 0.0</span></span><br><span class=\"line\"><span class=\"comment\">        //Test Russian Roulette with probability RussianRoulette</span></span><br><span class=\"line\"><span class=\"comment\">        wi = sample(wo, N)</span></span><br><span class=\"line\"><span class=\"comment\">        Trace a ray r(p, wi)</span></span><br><span class=\"line\"><span class=\"comment\">        If ray r hit a non-emitting object at q</span></span><br><span class=\"line\"><span class=\"comment\">            L_indir = shade(q, wi) * eval(wo, wi, N) * dot(wi, N)</span></span><br><span class=\"line\"><span class=\"comment\">            / pdf(wo, wi, N) / RussianRoulette</span></span><br><span class=\"line\"><span class=\"comment\">  </span></span><br><span class=\"line\"><span class=\"comment\">        Return L_dir + L_indir</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Vector3f <span class=\"title\">L_dir</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span>, <span class=\"title\">L_indir</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//ray wo is screen to p, now find p and see if already hit light</span></span><br><span class=\"line\">    Ray wo = ray;</span><br><span class=\"line\">    Intersection p_inter = <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">intersect</span>(wo);</span><br><span class=\"line\">    <span class=\"comment\">//if hit nothing</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!p_inter.happened) <span class=\"keyword\">return</span> L_dir;</span><br><span class=\"line\">    <span class=\"comment\">//if hit light source</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p_inter.m-&gt;<span class=\"built_in\">hasEmission</span>()) <span class=\"keyword\">return</span> p_inter.m-&gt;<span class=\"built_in\">getEmission</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//otherwise, it hit a object</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//sampleLight(inter , pdf_light)</span></span><br><span class=\"line\">    <span class=\"comment\">//uniformly sample x from all LIGHTS and get its pdf</span></span><br><span class=\"line\">    Intersection x_inter; <span class=\"type\">float</span> x_pdf;</span><br><span class=\"line\">    <span class=\"built_in\">sampleLight</span>(x_inter, x_pdf);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Get x, ws, Nx, emit from inter </span></span><br><span class=\"line\">    <span class=\"comment\">//ws is from p to x(light), Np is at p, Nx is at x(light)</span></span><br><span class=\"line\">    Vector3f p = p_inter.coords;</span><br><span class=\"line\">    Vector3f x = x_inter.coords;</span><br><span class=\"line\">    Vector3f Np = p_inter.normal;</span><br><span class=\"line\">    Vector3f Nx = x_inter.normal;</span><br><span class=\"line\">    Vector3f emit = x_inter.emit;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Shoot a ray (ws) from p to x(light) </span></span><br><span class=\"line\">    Vector3f ws_dir = (x - p).<span class=\"built_in\">normalized</span>();</span><br><span class=\"line\">    <span class=\"function\">Ray <span class=\"title\">ws</span><span class=\"params\">(p, ws_dir)</span></span>;</span><br><span class=\"line\">    Intersection ws_inter = <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">intersect</span>(ws);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If the ray is NOT blocked in the middle</span></span><br><span class=\"line\">    <span class=\"comment\">//         L_dir = emit * eval(wo, ws, N) * dot(ws, N) * dot(ws,</span></span><br><span class=\"line\">    <span class=\"comment\">//         NN) / |x-p|^2 / pdf_light</span></span><br><span class=\"line\">    <span class=\"comment\">// Else L_dir = 0.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//calc length of p - x and ws_inter to see if it is blocked</span></span><br><span class=\"line\">    <span class=\"type\">float</span> px_dis = (x - p).<span class=\"built_in\">norm</span>(), ws_dis = ws_inter.distance;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (px_dis - ws_dis &lt; <span class=\"number\">0.001</span>) &#123;</span><br><span class=\"line\">        L_dir = emit </span><br><span class=\"line\">        * p_inter.m-&gt;<span class=\"built_in\">eval</span>(wo.direction, ws.direction, Np)</span><br><span class=\"line\">        * <span class=\"built_in\">dotProduct</span>(ws.direction, Np)      <span class=\"comment\">//all vectors were nomorlized</span></span><br><span class=\"line\">        * <span class=\"built_in\">dotProduct</span>(-ws.direction, Nx)     <span class=\"comment\">//so dot product is cosine</span></span><br><span class=\"line\">        / <span class=\"built_in\">pow</span>(px_dis, <span class=\"number\">2</span>)</span><br><span class=\"line\">        / x_pdf;</span><br><span class=\"line\">    &#125; <span class=\"comment\">// else L_dir = 0; no need</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// Now calculate L_indir</span></span><br><span class=\"line\">    <span class=\"comment\">// Test Russian Roulette with probability RussianRoulette</span></span><br><span class=\"line\">    <span class=\"type\">float</span> P_rand = <span class=\"built_in\">get_random_float</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (P_rand &lt; RussianRoulette) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//wi = sample(wo, N)</span></span><br><span class=\"line\">        <span class=\"comment\">//wi is from p to q</span></span><br><span class=\"line\">        Vector3f wi_dir = p_inter.m-&gt;<span class=\"built_in\">sample</span>(wo.direction, Np).<span class=\"built_in\">normalized</span>();</span><br><span class=\"line\">        <span class=\"function\">Ray <span class=\"title\">wi</span><span class=\"params\">(p_inter.coords, wi_dir)</span></span>;</span><br><span class=\"line\">        <span class=\"comment\">// Trace a ray r(p, wi)</span></span><br><span class=\"line\">        <span class=\"comment\">// If ray r hit a non-emitting object at q</span></span><br><span class=\"line\">        <span class=\"comment\">//     L_indir = shade(q, wi) * eval(wo, wi, N) * dot(wi, N)</span></span><br><span class=\"line\">        <span class=\"comment\">//     / pdf(wo, wi, N) / RussianRoulette</span></span><br><span class=\"line\">        Intersection wi_inter = <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">intersect</span>(wi);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (wi_inter.happened &amp;&amp; !(wi_inter.m-&gt;<span class=\"built_in\">hasEmission</span>())) &#123;</span><br><span class=\"line\">            L_indir = <span class=\"built_in\">castRay</span>(wi, depth + <span class=\"number\">1</span>)</span><br><span class=\"line\">            * p_inter.m-&gt;<span class=\"built_in\">eval</span>(wo.direction, wi.direction, Np)</span><br><span class=\"line\">            * <span class=\"built_in\">dotProduct</span>(wi.direction, Np)</span><br><span class=\"line\">            / p_inter.m-&gt;<span class=\"built_in\">pdf</span>(wo.direction, wi.direction, Np)</span><br><span class=\"line\">            / RussianRoulette;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L_dir + L_indir;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2024-04-14T05:58:58.398Z","updated":"2024-04-14T05:58:58.398Z","comments":1,"layout":"post","photos":[],"_id":"cmd2qsp600003dgyi9qlw7nys","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"TinyRendererNotes","date":"2024-05-05T16:41:25.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n\n## TinyRender学习笔记\n\n通过手写软光栅渲染器加深对计算机图形学基本原理的理解，并练习C++面向对象程序设计。\n\n该项目主要参考[Home · ssloy/tinyrenderer Wiki (github.com)](https://github.com/ssloy/tinyrenderer/wiki)编写，使用CMake构建\n\n可以浏览我的历史commit，找到不同进度时提交的代码。\n\n本项目涉及的几乎所有的图形学知识都在GAMES101课程中出现过，推荐将GAMES101作为前置课程，或配合GAMES101的进度一起学习。\n\n## Lesson 0 Getting Started\n\n### Using TGA image format\n\n使用这个基本框架来生成TGA格式图像：\n[ssloy/tinyrenderer at 909fe20934ba5334144d2c748805690a1fa4c89f (github.com)](https://github.com/ssloy/tinyrenderer/tree/909fe20934ba5334144d2c748805690a1fa4c89f)\n\n只需 `#include \"tgaimage.h\"` ，并在编译时链接tgaimage.cpp即可。\n\n例：在屏幕上将像素(52,41)设置为红色\n\n```cpp\n#include \"tgaimage.h\"\n//Set color with RGB\nconst TGAColor white = TGAColor(255, 255, 255, 255);\nconst TGAColor red   = TGAColor(255, 0,   0,   255);\nint main(int argc, char** argv) {\n    \t//Set image size\n        TGAImage image(100, 100, TGAImage::RGB);\n    \t//Set pixel color\n        image.set(52, 41, red);\n        //To have the origin at the left bottom corner of the image\n        image.flip_vertically(); \n        image.write_tga_file(\"output.tga\");\n        return 0;\n}\n```\n\n个人推荐的环境：Clion + CMake。（因为VsCode CMake调试功能实在搞不懂=.=)\n\n涉及导入模型，需要将工作目录设置为工程文件夹\n\n![image-20240505230016266](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505220018544-333214793.png)\n\n![image-20240505230043985](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505220047826-450326712.png)\n\n但我的Clion存在tga图像无法加载的bug。在设置->编辑器->文件类型中去掉.tga，然后选择用本地程序打开即可。\n\n## Lesson 1 Bresenham’s Line Drawing Algorithm\n\n使用Bresenham算法绘制线段。\n\n原理：https://en.wikipedia.org/wiki/Bresenham's_line_algorithm\n\n实现参考：https://rosettacode.org/wiki/Bitmap/Bresenham%27s_line_algorithm#C++\n\n建议绘制斜率小于-1，-1到0,0到1,大于1，以及水平和垂直的直线来检验算法正确性。\n\n```cpp\n#include <cmath>\n\n#include \"tgaimage.h\"\n\nconst TGAColor white = TGAColor(255, 255, 255, 255);\nconst TGAColor red = TGAColor(255, 0, 0, 255);\nconst TGAColor blue = TGAColor(0, 0, 255, 255);\n\nvoid line(int x1, int y1, int x2, int y2, TGAImage& image, TGAColor color)\n{\n    //Ensure that slope in (0, 1)\n    const bool steep = (std::abs(y2 - y1) > std::abs(x2 - x1));\n    if (steep) {\n        std::swap(x1, y1);\n        std::swap(x2, y2);\n    }\n    if (x1 > x2) {\n        std::swap(x1, x2);\n        std::swap(y1, y2);\n    }\n\n    const float dx = x2 - x1;\n    const float dy = fabs(y2 - y1);\n\n    float error = dx / 2.0f;\n    const int ystep = (y1 < y2) ? 1 : -1;\n    int y = (int)y1;\n\n    const int maxX = (int)x2;\n\n    for (int x = (int)x1; x <= maxX; x++) {\n        if (steep) {\n            image.set(y, x, color);\n        } else {\n            image.set(x, y, color);\n        }\n\n        error -= dy;\n        if (error < 0) {\n            y += ystep;\n            error += dx;\n        }\n    }\n}\n\nint main(int argc, char** argv)\n{\n    TGAImage image(100, 100, TGAImage::RGB);\n    line(13, 20, 80, 40, image, red);\n    line(55, 33, 22, 66, image, blue);\n    line(33, 33, 66, 66, image, white);\n    line(44, 20, 44, 80, image, white);\n    line(20, 44, 80, 44, image, white);\n    image.flip_vertically();\n    image.write_tga_file(\"output.tga\");\n    return 0;\n}\n\n```\n\n效果\n\n![image-20240419183705501](https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240419173705372-1981687689.png)\n\n## Lesson 2: Triangle rasterization and back face culling\n\n三维物体模型通常以三角形为基础。为了方便表示点、向量、多边形，写geometry.h。\n\n```cpp\n#pragma once\n\ntemplate <class t> struct Vec2 {\n    union {\n        struct {t u, v;};\n        struct {t x, y;};\n        t raw[2];\n    };\n    Vec2() : u(0), v(0) {}\n    Vec2(t _u, t _v) : u(_u),v(_v) {}\n    inline Vec2<t> operator +(const Vec2<t> &V) const { return Vec2<t>(u+V.u, v+V.v); }\n    inline Vec2<t> operator -(const Vec2<t> &V) const { return Vec2<t>(u-V.u, v-V.v); }\n    inline Vec2<t> operator *(float f)          const { return Vec2<t>(u*f, v*f); }\n    template <class > friend std::ostream& operator<<(std::ostream& s, Vec2<t>& v);\n};\n\ntemplate <class t> struct Vec3 {\n    union {\n        struct {t x, y, z;};\n        struct { t ivert, iuv, inorm; };\n        t raw[3];\n    };\n    Vec3() : x(0), y(0), z(0) {}\n    Vec3(t _x, t _y, t _z) : x(_x),y(_y),z(_z) {}\n    inline Vec3<t> operator ^(const Vec3<t> &v) const { return Vec3<t>(y*v.z-z*v.y, z*v.x-x*v.z, x*v.y-y*v.x); }\n    inline Vec3<t> operator +(const Vec3<t> &v) const { return Vec3<t>(x+v.x, y+v.y, z+v.z); }\n    inline Vec3<t> operator -(const Vec3<t> &v) const { return Vec3<t>(x-v.x, y-v.y, z-v.z); }\n    inline Vec3<t> operator *(float f)          const { return Vec3<t>(x*f, y*f, z*f); }\n    inline t       operator *(const Vec3<t> &v) const { return x*v.x + y*v.y + z*v.z; }\n    float norm () const { return std::sqrt(x*x+y*y+z*z); }\n    Vec3<t> & normalize(t l=1) { *this = (*this)*(l/norm()); return *this; }\n    template <class > friend std::ostream& operator<<(std::ostream& s, Vec3<t>& v);\n};\n\ntypedef Vec2<float> Vec2f;\ntypedef Vec2<int>   Vec2i;\ntypedef Vec3<float> Vec3f;\ntypedef Vec3<int>   Vec3i;\n\ntemplate <class t> std::ostream& operator<<(std::ostream& s, Vec2<t>& v) {\n    s << \"(\" << v.x << \", \" << v.y << \")\\n\";\n    return s;\n}\n\ntemplate <class t> std::ostream& operator<<(std::ostream& s, Vec3<t>& v) {\n    s << \"(\" << v.x << \", \" << v.y << \", \" << v.z << \")\\n\";\n    return s;\n}\n```\n\n\n\n如何画出实心的三角形？一般来说，有扫描线和边界函数两种算法。\n\n对于多线程的CPU,采用边界函数法更为高效：先找到三角形的矩形包围盒，再逐点判断是否在三角形中\n\n```cpp\ntriangle(vec2 points[3]) { \n    vec2 bbox[2] = find_bounding_box(points); \n    for (each pixel in the bounding box) { \n        if (inside(points, pixel)) { \n            put_pixel(pixel); \n        } \n    } \n}\n```\n\n因此，问题变成了给定三角形的三个点，如何判断点是否在三角形内部\n\n一种最好的办法是，计算给定点关于给定三角形的重心坐标（或者叫面积坐标）。\n\n维基百科：https://zh.wikipedia.org/wiki/%E9%87%8D%E5%BF%83%E5%9D%90%E6%A0%87\n\n简单来说，它表示一个点所对的三条边形成的三角形面积比。如果点在三角形外部，则有一个维度是负的。\n\n![image-20240419185822971](https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240419175823218-1822502417.png)\n\n由于tinyrenderer的作者写得有些丑陋，我在geometry.h里直接加入了polygon和triangle类，来实现重心坐标计算和点在三角形内的检测\n\n```cpp\ntemplate <class T>\nclass Polygon2D {\npublic:\n    int n;\n    std::vector<Vec2<T>> pt;\n    Polygon2D(int _n, std::vector<Vec2<T>> _pt): n(_n), pt(_pt) {}\n};\n\ntemplate <class T>\nclass Triangle2D: public Polygon2D<T> {\npublic:\n    using Polygon2D<T>::pt;\n    Triangle2D(std::vector<Vec2<T>> _pt): Polygon2D<T>(3, _pt) {}\n    Vec3f baryCentric(Vec2i P) {\n        Vec3f u = Vec3f(pt[2][0]-pt[0][0], pt[1][0]-pt[0][0], pt[0][0]-P[0])^Vec3f(pt[2][1]-pt[0][1], pt[1][1]-pt[0][1], pt[0][1]-P[1]);\n        /* `pts` and `P` has integer value as coordinates\n           so `abs(u[2])` < 1 means `u[2]` is 0, that means\n           triangle is degenerate, in this case return something with negative coordinates */\n        if (std::abs(u.z)<1) return Vec3f(-1,1,1);\n        return Vec3f(1.f-(u.x+u.y)/u.z, u.y/u.z, u.x/u.z);\n    }\n\n    bool inInside(Vec2i P) {\n        auto bc = baryCentric(P);\n        if (bc.x<0 || bc.y<0 || bc.z<0) return false;\n        return true;\n    }\n};\n```\n\n在main.cpp里绘制实心三角形\n\n```cpp\n//Iterate all points in the rectangular bounding box of triangle, draw if the point is inside\nvoid drawSolidTriangle(Triangle2D<int> tri, TGAImage &image, TGAColor color) {\n    Vec2i bboxmin(image.get_width()-1,  image.get_height()-1);\n    Vec2i bboxmax(0, 0);\n    Vec2i clamp(image.get_width()-1, image.get_height()-1);\n    for (int i=0; i<3; i++) {\n        bboxmin.x = std::max(0, std::min(bboxmin.x, tri.pt[i].x));\n        bboxmin.y = std::max(0, std::min(bboxmin.y, tri.pt[i].y));\n\n        bboxmax.x = std::min(clamp.x, std::max(bboxmax.x, tri.pt[i].x));\n        bboxmax.y = std::min(clamp.y, std::max(bboxmax.y, tri.pt[i].y));\n    }\n    Vec2i P;\n    for (P.x=bboxmin.x; P.x<=bboxmax.x; P.x++) {\n        for (P.y=bboxmin.y; P.y<=bboxmax.y; P.y++) {\n            Vec3f bc_screen  = tri.baryCentric(P);\n            if (bc_screen.x<0 || bc_screen.y<0 || bc_screen.z<0) continue;\n            image.set(P.x, P.y, color);\n        }\n    }\n};\n```\n\n得到如图效果：\n\n<img src=\"https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240419185714797-2050127591.png\" alt=\"image-20240419195714296\" style=\"zoom:50%;\" />\n\n三角形绘制完成后，可以尝试导入作者提供的由三角形构成的人脸模型。\n\n.obj模型文件的格式如下\n\n```\n# List of geometric vertices, with (x, y, z, [w]) coordinates, w is optional and defaults to 1.0.\nv 0.123 0.234 0.345 1.0\nv ...\n...\n# List of texture coordinates, in (u, [v, w]) coordinates, these will vary between 0 and 1. v, w are optional and default to 0.\nvt 0.500 1 [0]\nvt ...\n...\n# List of vertex normals in (x,y,z) form; normals might not be unit vectors.\nvn 0.707 0.000 0.707\nvn ...\n...\n# Parameter space vertices in (u, [v, w]) form; free form geometry statement (see below)\nvp 0.310000 3.210000 2.100000\nvp ...\n...\n# Polygonal face element (see below)\nf 1 2 3\nf 3/1 4/2 5/3\nf 6/4/1 3/5/3 7/6/5\nf 7//1 8//2 9//3\nf ...\n...\n# Line element (see below)\nl 5 8 1 2 4 9\n```\n\n目前，我们暂时不关心模型的深度（z坐标），只是将模型正投影到XY平面上，则模型上的点对应的屏幕坐标可以这样简单的计算\n\n```cpp\nscreen_coords[j] = Vec2i((v.x+1.)*width/2., (v.y+1.)*height/2.);\n```\n\n假设光从正前方射向正后方，即光线方向(0,0,-1)。\n\n在这里，我们使用一种简化的亮度计算方法：我们忽略面与光源之间的距离差异，认为正对着光源的面（法线与光线方向相同）最亮，这样就可以计算每个三角形面的单位法向量与光线方向的叉积来代表亮度。\n\n```cpp\nint main(int argc, char** argv) {\n    if (2==argc) {\n        model = new Model(argv[1]);\n    } else {\n        model = new Model(\"obj/african_head.obj\");\n    }\n\n    TGAImage image(width, height, TGAImage::RGB);\n    Vec3f light_dir(0,0,-1);\n    int cnt = 0;\n    for (int i=0; i<model->nfaces(); i++) {\n        std::vector<int> face = model->face(i);\n        Vec2i screen_coords[3];\n        Vec3f world_coords[3];\n        for (int j=0; j<3; j++) {\n            Vec3f v = model->vert(face[j]);\n            screen_coords[j] = Vec2i((v.x+1.)*width/2., (v.y+1.)*height/2.);\n            world_coords[j]  = v;\n        }\n        Vec3f n = (world_coords[2]-world_coords[0])^(world_coords[1]-world_coords[0]);\n        n.normalize();\n        float intensity = n*light_dir;\n        if (intensity>0) {\n            printf(\"ok %d\\n\", ++cnt);\n            drawSolidTriangle(Triangle2D<int>({screen_coords[0], screen_coords[1], screen_coords[2]}), image, TGAColor(intensity*255, intensity*255, intensity*255, 255));\n        }\n    }\n\n    image.flip_vertically();\n    image.write_tga_file(\"output.tga\");\n    delete model;\n    return 0;\n}\n```\n\n在这种简化下，得到的渲染结果如下：\n![image-20240419205641217](https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240419195642124-634629665.png)\n\n可以发现，位于口腔中的三角形遮住了嘴唇。下一节课中，我们将考虑深度测试，正确处理多边形的遮挡关系。\n\n\n\n## Lesson 3: Z Buffer\n\n深度检测算法的基本原理是，引入一个大小为像素数量的Z-Buffer数组，初始化所有像素点深度为负无穷。\n\n在遍历像素点时，比较当前三角形上点的深度是否小于Z-Buffer的数值，如果小于，则更新该像素并更新Z-Buffer。\n\n为此，我们需要为屏幕坐标增加一维深度（对于上面的人脸设置为模型的z即可）。在drawSolidTriangle()中增加对深度缓冲区的判断。\n\n```cpp\n//Iterate all points in the rectangular bounding box of triangle, draw if the point is inside\n// 2024 04 26 2d->3d\nvoid drawSolidTriangle(Triangle2D<float> tri, TGAImage &image, TGAColor color, float *zbuffer) {\n    Vec2f bboxmin(image.get_width()-1,  image.get_height()-1);\n    Vec2f bboxmax(0, 0);\n    Vec2f clamp(image.get_width()-1, image.get_height()-1);\n    for (int i=0; i<3; i++) {\n        bboxmin.x = std::max((float)0, std::min(bboxmin.x, tri.pt[i].x));\n        bboxmin.y = std::max((float)0, std::min(bboxmin.y, tri.pt[i].y));\n\n        bboxmax.x = std::min(clamp.x, std::max(bboxmax.x, tri.pt[i].x));\n        bboxmax.y = std::min(clamp.y, std::max(bboxmax.y, tri.pt[i].y));\n    }\n    Vec3i P;\n    for (P.x=bboxmin.x; P.x<=bboxmax.x; P.x++) {\n        for (P.y=bboxmin.y; P.y<=bboxmax.y; P.y++) {\n            Vec3f bc_screen  = tri.baryCentric(P.toVec2());//toTriangle2D().baryCentric(P);\n            if (bc_screen.x<0 || bc_screen.y<0 || bc_screen.z<0) continue;\n            \n            //bugfix\n            P.z = tri.depth[0] * bc.x + tri.depth[1] * bc.y + tri.depth[2] * bc.z;\n\n            int idx = P.x+P.y*width;\n            if (zbuffer[idx]<P.z) {\n                zbuffer[idx] = P.z;\n                image.set(P.x, P.y, color);\n            }\n        }\n    }\n};\n\n\n\n\nVec3f worldToScreen(Vec3f v) {\n    return Vec3f(int((v.x+1.)*width/2.+.5), int((v.y+1.)*height/2.+.5), v.z);\n}\n\nint main(int argc, char** argv) {\n    if (2==argc) {\n        model = new Model(argv[1]);\n    } else {\n        model = new Model(\"obj/african_head.obj\");\n    }\n\n    float *zbuffer = new float[width * height];\n    for (int i=width*height; i--; zbuffer[i] = -std::numeric_limits<float>::max());\n\n\n    TGAImage image(width, height, TGAImage::RGB);\n    Vec3f light_dir(0,0,-1);\n    int cnt = 0;\n    for (int i=0; i<model->nfaces(); i++) {\n        std::vector<int> face = model->face(i);\n        Vec3f screen_coords[3];\n        Vec3f world_coords[3];\n        for (int j=0; j<3; j++) {\n            Vec3f v = model->vert(face[j]);\n            //screen_coords[j] = Vec2i((v.x+1.)*width/2., (v.y+1.)*height/2.);\n            world_coords[j]  = v;\n            screen_coords[j] = worldToScreen(v);\n        }\n\n        Vec3f n = (world_coords[2]-world_coords[0])^(world_coords[1]-world_coords[0]);\n        n.normalize();\n        float intensity = n*light_dir;\n\n        if (intensity>0) {\n            printf(\"ok %d\\n\", ++cnt);\n            drawSolidTriangle(Triangle2D<float>({screen_coords[0], screen_coords[1], screen_coords[2]}), image, TGAColor(intensity*255, intensity*255, intensity*255, 255), zbuffer);\n        }\n    }\n\n    image.flip_vertically();\n    image.write_tga_file(\"output.tga\");\n    delete model;\n    return 0;\n}\n```\n\n同时，在Triangle2D类中加入depth数组即可\n\n```cpp\ntemplate <class T>\nclass Triangle2D: public Polygon2D<T> {\npublic:\n    using Polygon2D<T>::pt;\n    std::vector<T> depth;\n    \n    Triangle2D(std::vector<Vec2<T>> _pt, std::vector<Vec2<T>> _depth = {0, 0, 0}): \n        Polygon2D<T>(3, _pt), \n        depth(_depth) {}\n        \n    Triangle2D(std::vector<Vec3<float>> _pt):\n        Polygon2D<T>(3, {_pt[0].toVec2(), _pt[1].toVec2(), _pt[2].toVec2()}),\n        depth({_pt[0].z, _pt[1].z, _pt[2].z}) {}\n        \n    Vec3f baryCentric(Vec2f P) {\n        Vec3f u = Vec3f(pt[2][0]-pt[0][0], pt[1][0]-pt[0][0], pt[0][0]-P[0])^Vec3f(pt[2][1]-pt[0][1], pt[1][1]-pt[0][1], pt[0][1]-P[1]);\n        /* `pts` and `P` has integer value as coordinates\n           so `abs(u[2])` < 1 means `u[2]` is 0, that means\n           triangle is degenerate, in this case return something with negative coordinates */\n        if (std::abs(u.z)<1) return Vec3f(-1,1,1);\n        return Vec3f(1.f-(u.x+u.y)/u.z, u.y/u.z, u.x/u.z);\n    }\n\n    bool inInside(Vec2i P) {\n        auto bc = baryCentric(P);\n        if (bc.x<0 || bc.y<0 || bc.z<0) return false;\n        return true;\n    }\n};\n\n\n\n```\n\n效果如图所示：\n![image-20240426175739547](https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240426165741120-55012551.png)\n\n### Bouns: Texture Mapping\n\n在.obj文件中，有以“vt u v”开头的行，它们给出了一个纹理坐标数组。 \n\n> The number in the middle (between the slashes) in the facet lines \"f x/x/x x/x/x x/x/x\" are the texture coordinates of this vertex of this triangle. Interpolate it inside the triangle, multiply by the width-height of the texture image and you will get the color to put in your render.\n\ntinyrender作者提供了漫反射纹理： [african_head_diffuse.tga](..\\Downloads\\african_head_diffuse.tga) \n\n据此，我们可以给上述人脸模型添加纹理。此时，main函数中drawSolidTriangle函数里不需要再传入颜色，只需要传入intensity即可，另外需要传入当前三角形三个点的纹理坐标uv。\n\n```cpp\n//Iterate all points in the rectangular bounding box of triangle, draw if the point is inside\n// 2024 04 26 2d->3d, texture mapping\nvoid drawSolidTriangle(Triangle2D<float> tri, Vec2i* uv, TGAImage &image, float intensity, float *zbuffer) {\n    Vec2f bboxmin(image.get_width()-1,  image.get_height()-1);\n    Vec2f bboxmax(0, 0);\n    Vec2f clamp(image.get_width()-1, image.get_height()-1);\n    for (int i=0; i<3; i++) {\n        bboxmin.x = std::max((float)0, std::min(bboxmin.x, tri.pt[i].x));\n        bboxmin.y = std::max((float)0, std::min(bboxmin.y, tri.pt[i].y));\n\n        bboxmax.x = std::min(clamp.x, std::max(bboxmax.x, tri.pt[i].x));\n        bboxmax.y = std::min(clamp.y, std::max(bboxmax.y, tri.pt[i].y));\n    }\n    Vec3i P;\n    for (P.x=bboxmin.x; P.x<=bboxmax.x; P.x++) {\n        for (P.y=bboxmin.y; P.y<=bboxmax.y; P.y++) {\n            Vec3f bc  = tri.baryCentric(P.toVec2());//toTriangle2D().baryCentric(P);\n            if (bc.x<0 || bc.y<0 || bc.z<0) continue;\n            \n            P.z = tri.depth[0] * bc.x + tri.depth[1] * bc.y + tri.depth[2] * bc.z;\n\n            int idx = P.x+P.y*width;\n            if (zbuffer[idx]<P.z) {\n                zbuffer[idx] = P.z;\n\n                Vec2i P_uv = uv[0] * bc.x + uv[1] * bc.y + uv[2] * bc.z;\n                TGAColor color = model->diffuse(P_uv);\n                image.set(P.x, P.y, color);\n            }\n        }\n    }\n};\n\n\n\n\nVec3f worldToScreen(Vec3f v) {\n    return Vec3f(int((v.x+1.)*width/2.+.5), int((v.y+1.)*height/2.+.5), v.z);\n}\n\nint main(int argc, char** argv) {\n    if (2==argc) {\n        model = new Model(argv[1]);\n    } else {\n        model = new Model(\"obj/african_head.obj\");\n    }\n\n    float *zbuffer = new float[width * height];\n    for (int i=width*height; i--; zbuffer[i] = -std::numeric_limits<float>::max());\n\n\n    TGAImage image(width, height, TGAImage::RGB);\n    Vec3f light_dir(0,0,-1);\n    int cnt = 0;\n    for (int i=0; i<model->nfaces(); i++) {\n        std::vector<int> face = model->face(i);\n        Vec3f screen_coords[3];\n        Vec3f world_coords[3];\n        for (int j=0; j<3; j++) {\n            Vec3f v = model->vert(face[j]);\n            //screen_coords[j] = Vec2i((v.x+1.)*width/2., (v.y+1.)*height/2.);\n            world_coords[j]  = v;\n            screen_coords[j] = worldToScreen(v);\n        }\n\n        Vec3f n = (world_coords[2]-world_coords[0])^(world_coords[1]-world_coords[0]);\n        n.normalize();\n        float intensity = n*light_dir;\n\n        if (intensity>0) {\n            printf(\"ok %d\\n\", ++cnt);\n            Vec2i uv[3];\n            for (int j = 0; j < 3; j++) uv[j] = model->uv(i, j);\n            drawSolidTriangle(Triangle2D<float>({screen_coords[0], screen_coords[1], screen_coords[2]}), uv, image, intensity, zbuffer);\n        }\n    }\n\n    image.flip_vertically();\n    image.write_tga_file(\"output.tga\");\n    delete model;\n    return 0;\n}\n```\n\nmodel.h和model.cpp需要修改以支持纹理。作者在lesson4的结尾放出了代码。\n\n效果：\n\n\n\n![image-20240426190246539](https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240426180250012-1899969424.png)\n\n这是一个平行投影的结果，损失了一部分真实感，例如，虽然耳朵旁边的头发在xoy平面上不与脸部重叠，但实际上应该被前边的皮肤遮挡，因为人眼/相机本身是“点光源”，而不是“平行光源”，物体发出的光线最终汇聚于一点，也就是所谓的“透视”。下面将引入透视投影：\n\n\n\n## Lesson 4: Perspective projection\n\n\n\n\n\n\n\n\n\n齐次坐标\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/f10.png)\n\n\n\n\n\n简单变换（图来自GAMES101）\n\n![image-20240505174927834](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505164930200-682100308.png)\n\n逆变换\n\n![image-20240505175454080](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505165458526-1584226714.png)\n\n复合变换\n\n![image-20240505175019922](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505165021790-531013206.png)\n\n\n\n\n\n\n\n实现矩阵类：\n\n```cpp\nconst int DEFAULT_D = 4;\nclass Matrix {\n    std::vector<std::vector<float>> m;\n    int nrow, ncol;\npublic:\n    Matrix(int r=DEFAULT_D, int c=DEFAULT_D) :\n        m(std::vector<std::vector<float>> (r, std::vector<float>(c, 0.f))),\n        nrow(r), ncol(c) {}\n\n    int get_nrow() { return nrow; }\n    int get_ncol() { return ncol; }\n\n    static Matrix identity(int dimensions) {\n        Matrix E(dimensions, dimensions);\n        for (int i = 0; i < dimensions; i++)\n            E[i][i] = 1;\n        return E;\n    }\n\n    std::vector<float>& operator[](const int i) {\n        assert(i >= 0 && i < nrow);\n        return m[i];\n    }\n\n    const std::vector<float>& operator[](const int i) const {\n        assert(i >= 0 && i < nrow);\n        return m[i];\n    }\n\n    Matrix operator*(const Matrix& a) {\n        assert(this->ncol == a.nrow);\n        Matrix res(this->nrow, a.ncol);\n        for (int i = 0; i < this->nrow; i++) {\n            for (int j = 0; j < a.ncol; j++) {\n                res.m[i][j] = 0;\n                for (int k = 0; k < this->ncol; k++)\n                    res.m[i][j] += this->m[i][k]*a.m[k][j];\n            }\n        }\n        return res;\n    }\n\n    Matrix transpose() {\n        Matrix res(ncol, nrow);\n        for (int i = 0; i < ncol; i++)\n            for (int j = 0; j < nrow; j++)\n                res.m[i][j] = m[j][i];\n        return res;\n    }\n    Matrix inverse() {\n        assert(nrow==ncol);\n        // augmenting the square matrix with the identity matrix of the same dimensions a => [ai]\n        Matrix result(nrow, ncol*2);\n        for(int i=0; i<nrow; i++)\n            for(int j=0; j<ncol; j++)\n                result[i][j] = m[i][j];\n        for(int i=0; i<nrow; i++)\n            result[i][i+ncol] = 1;\n        // first pass\n        for (int i=0; i<nrow-1; i++) {\n            // normalize the first row\n            for(int j=result.ncol-1; j>=0; j--)\n                result[i][j] /= result[i][i];\n            for (int k=i+1; k<nrow; k++) {\n                float coeff = result[k][i];\n                for (int j=0; j<result.ncol; j++) {\n                    result[k][j] -= result[i][j]*coeff;\n                }\n            }\n        }\n        // normalize the last row\n        for(int j=result.ncol-1; j>=nrow-1; j--)\n            result[nrow-1][j] /= result[nrow-1][nrow-1];\n        // second pass\n        for (int i=nrow-1; i>0; i--) {\n            for (int k=i-1; k>=0; k--) {\n                float coeff = result[k][i];\n                for (int j=0; j<result.ncol; j++) {\n                    result[k][j] -= result[i][j]*coeff;\n                }\n            }\n        }\n        // cut the identity matrix back\n        Matrix truncate(nrow, ncol);\n        for(int i=0; i<nrow; i++)\n            for(int j=0; j<ncol; j++)\n                truncate[i][j] = result[i][j+ncol];\n        return truncate;\n    }\n\n    friend std::ostream& operator<<(std::ostream& s, Matrix& m);\n};\n\ninline std::ostream& operator<<(std::ostream& s, Matrix& m) {\n    for (int i = 0; i < m.nrow; i++)  {\n        for (int j = 0; j < m.ncol; j++) {\n            s << m[i][j];\n            if (j<m.ncol-1) s << \"\\t\";\n        }\n        s << \"\\n\";\n    }\n    return s;\n}\n```\n\n\n\n一个简单投影矩阵的推导：\n\n假设相机位置为（0,0,c）成像平面为z=0，如图\n\n<img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/525d3930435c3be900e4c7956edb5a1c.png\" alt=\"img\" style=\"zoom: 67%;\" />\n\n\n\n根据三角形相似，x'/c = x/(c-z)，即有\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/f15.png)\n\n同理\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/f16.png)\n\n为了实现z轴方向上靠近相机的线段被拉伸，远离相机的线段被压缩，投影矩阵具有这样的形式\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/f13.png)\n\n根据齐次坐标的结果，得到对应的投影点坐标\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/f14.png)\n\n根据上面的结果，可知r=-1/c。\n\n我们可以得到一个简单情况下的投影矩阵，变换过程如图\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/f17.png)\n\n\n\n\n\n在程序中，这个过程用如下方式实现：\n\n```cpp\nscreen_coords[j] = hc2v(viewportMatrix * projectionMatrix * v2hc(v));\n```\n\n(普通坐标 → 齐次坐标)\n\n世界坐标 → (经投影变换)投影坐标 → （经视口变换)屏幕坐标 \n\n(齐次坐标 → 普通坐标)\n\n这里的坐标包含位置(x,y)和深度z,深度交给z-buffer来处理\n\n视口变化的目的是将投影区域映射到[-1,1]^3的立方体中，便于绘制\n\n相关变化的实现：\n\n```cpp\n//Transition between coordinates (vector type) and homogeneous coordinates (matrix type)\nMatrix v2hc(const Vec3f &v) {\n    Matrix hc(4, 1);\n    hc[0][0] = v.x;\n    hc[1][0] = v.y;\n    hc[2][0] = v.z;\n    hc[3][0] = 1;\n    return hc;\n}\nVec3f hc2v(const Matrix &hc) {\n    return Vec3f(hc[0][0], hc[1][0], hc[2][0]) * (1.f / hc[3][0]);\n}\n\nVec3f light_dir(0,0,-1);\nVec3f camera(0, 0, 3);\n//project to z = 0\nMatrix projection(const Vec3f &camera) {\n    Matrix m = Matrix::identity(4);\n    m[3][2] = -1.f/camera.z;\n    return m;\n}\n\n//viewport(width / 8, height / 8, width * 0.75, height * 0.75);\n//窗口边缘留出1/8空隙\nMatrix viewport(int x, int y, int w, int h) {\n    Matrix m = Matrix::identity(4);\n    //Translation\n    m[0][3] = x + w / 2.f;\n    m[1][3] = y + h / 2.f;\n    m[2][3] = depth / 2.f;\n    //scale to [0, 1]\n    m[0][0] = w / 2.f;\n    m[1][1] = h / 2.f;\n    m[2][2] = depth / 2.f;\n    return m;\n}\n\nint main() {\n\t...\n\n    Matrix projectionMatrix = projection(camera);\n    Matrix viewportMatrix = viewport(width / 8, height / 8, width * 0.75, height * 0.75);\n\n    ...\n        \n    for (int i=0; i<model->nfaces(); i++) {\n        std::vector<int> face = model->face(i);\n        Vec3f screen_coords[3];\n        Vec3f world_coords[3];\n        for (int j=0; j<3; j++) {\n            Vec3f v = model->vert(face[j]);\n            //world -> screen:\n            //3d coordinate -> homogeneous coordinates\n            //-> projection trans(camera at (0,0,c), project to plane z = 0)\n            //-> viewport trans(to make central at (w/2,h/2,d/2))\n\n            world_coords[j]  = v;\n            screen_coords[j] = hc2v(viewportMatrix * projectionMatrix * v2hc(v));\n        }\n\n        //Still simplified light intensity\n        Vec3f n = (world_coords[2]-world_coords[0])^(world_coords[1]-world_coords[0]);\n        n.normalize();\n        float intensity = n*light_dir;\n\n        if (intensity>0) {\n            printf(\"ok %d\\n\", ++cnt);\n            Vec2i uv[3];\n            for (int j = 0; j < 3; j++) uv[j] = model->uv(i, j);\n            drawSolidTriangle(Triangle2D<float>({screen_coords[0], screen_coords[1], screen_coords[2]}), uv, image, intensity, zbuffer);\n        }\n    }\n    ...\n}\n```\n\n\n\n\n\n效果\n\n![image-20240504170937200](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240504160940105-1636523864.png)\n\n\n\n\n\n注：TinyRenderer的透视投影与GAMES101处理方式不同，GAMES101是把M\\[3\\]\\[2\\]固定为1，求解M的第三行，而此处是固定第三行为（0 0 1 0），求解M\\[3\\]\\[2\\]。\n\n此处并没有“近平面”的概念，认为n=0,f=c。\n\n下面是GAMES101给出的结果（第三行为0 0 A B）：\n\n<img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505182227248-1392365094.png\" alt=\"image-20240505192224927\" style=\"zoom:50%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505182300021-22198105.png\" alt=\"image-20240505192257807\" style=\"zoom:50%;\" />\n\n\n\n## Lesson 5: Moving the camera\n\n之前，我们考虑了相机在(0,0,c)，朝着-z方向看的情况。\n\n对于任意的相机位置，需要三个向量来确定：相机坐标e，相机指向的点c，向上方向向量u,如图所示：\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/b94dd4a591514fd66a91a6e4cc065644.png)\n\n我们假定相机总是朝着-z方向看，而u朝向正y方向，据此就得到了一个新的坐标系x'y'z'，\n\n下面考虑如何将物体坐标[x,y,z]转化为新坐标系下的[x',y',z']。\n\n\n\n\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f66a0139058ab1d1025dbfd8cd401389.png)\n\n首先回顾坐标[x,y,z]的定义，它是三个正交的单位向量i,j,k前面的系数\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f00.png)\n\n现在，我们有了新的单位向量i',j',k',那么一定存在矩阵M，使得\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f01.png)\n\n我们将OP写成OO'+O'P,与新的单位坐标建立联系：\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f02.png)\n\n将[i',j',k']用上面的式子表示，提出[i,j,k]:\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f03.png)\n\n左边用[x,y,z]的定义式替换，就得到了[x',y',z']与[x,y,z]的关系\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f04.png)\n\n\n\n\n\n\n\n关于look at的推导，此处写的有些混乱\n建议参阅https://www.zhihu.com/question/447781866 \n\n下面是个人理解：\n\n简单来说，设M是(0, 0, 0),[i,j,k]到eyepos, [i',j',k']的变换矩阵\n则M=TR,先旋转后平移\n\n其中旋转矩阵R根据单位向量**左乘**该矩阵得到新单位向量，很容易得到(此处r,u,v是i',j',k'在原坐标系下的坐标)\n\n![image-20240505220527743](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505210530096-395261047.png)\n\n而T则为原点平移到eye pos的平移矩阵 （C是eyepos)\n\n![image-20240505221319762](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505211321938-1985120681.png)\n\n此为对坐标轴的变换矩阵，即，我们用M计算了**新的单位向量在原坐标系下的坐标**，而要得到原来单位向量在新坐标系下的坐标，显然应该左乘M的逆矩阵。这样，我们就求得了ModelView矩阵。\n\n\n\n据此，编写lookup实现modelview的计算\n\n```cpp\nVec3f light_dir = Vec3f(0, 0, -1).normalize();\nVec3f eye(1, 1, 3);\nVec3f center(0, 0, 0);\nVec3f up(0, 1, 0);\n//Vec3f camera(0, 0, 3);\n\n//screen_coordinate = viewport * projection * modelview * world_coordinate\nMatrix lookat(Vec3f eye, Vec3f center, Vec3f up) {\n    Vec3f z = (eye - center).normalize();\n    Vec3f x = (up ^ z).normalize();\n    Vec3f y = (z ^ x).normalize();\n    Matrix M_inv = Matrix::identity(4);\n    Matrix T = Matrix::identity(4);\n    //thanks https://www.zhihu.com/question/447781866\n    for (int i = 0; i < 3; i++) {\n        M_inv[0][i] = x[i];\n        M_inv[1][i] = y[i];\n        M_inv[2][i] = z[i];\n        T[i][3] = -eye[i];\n    }\n    return M_inv * T;\n}\n\n\nMatrix projection(Vec3f eye, Vec3f center) {\n    Matrix m = Matrix::identity(4);\n    m[3][2] = -1.f / (eye - center).norm();\n    //m[3][2] = -1.f / camera.z;\n    return m;\n}\n\n\nint main() {\n    ...\n        \n    Matrix modelviewMatrix = lookat(eye, center, up);\n    Matrix projectionMatrix = projection(eye, center);\n    Matrix viewportMatrix = viewport(width / 8, height / 8, width * 0.75, height * 0.75);\n\n    ...\n    screen_coords[j] = hc2v(viewportMatrix * projectionMatrix * modelviewMatrix * v2hc(v));\n    ...\n    \n}\n```\n\n效果 目前有点bug\n\n![image-20240505225818988](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505215822020-1676545529.png)\n\n\n\n\n\n\n### Bouns：Transformation of normal vectors\n\n为了处理光照，我们将模型进行坐标变换后，如果模型提供了每个面的法向量，还需要将法向量也进行变换。\n\n此处有一个结论：模型上的坐标通过矩阵M进行仿射变换，那么模型的法向量的变换矩阵是M的逆矩阵的转置。\n\n证明：考虑平面方程 Ax+By+Cz=0，它的法向量是（A,B,C) ,写成矩阵形式为：\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f05.png)\n\n在两者之间插入M的逆和M：\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f06.png)\n\n 由于坐标均为列向量，把左边写成转置形式：\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f07.png)\n\n因此，如果对坐标(x,y,z)做变换M，要满足原来的直线方程，对法向量的变换矩阵为M的逆矩阵的转置（或者转置再求逆，转置和求逆是**可交换的**，证明略）\n\n## Lesson 6: Shaders \n\n本节主要分为两大部分：重构代码，实现不同的shaders。\n\n再尝试用自己之前的屎山适配Shader部分后，我放弃了，直接使用作者写的geometry。内容大部分都很直观，值得注意的是\n\n```cpp\ntemplate<size_t LEN,size_t DIM,typename T> vec<LEN,T> embed(const vec<DIM,T> &v, T fill=1) {\n    vec<LEN,T> ret;\n    for (size_t i=LEN; i--; ret[i]=(i<DIM?v[i]:fill));\n    return ret;\n}\n\ntemplate<size_t LEN,size_t DIM, typename T> vec<LEN,T> proj(const vec<DIM,T> &v) {\n    vec<LEN,T> ret;\n    for (size_t i=LEN; i--; ret[i]=v[i]);\n    return ret;\n}\n```\n\n这两个模板的作用，分别是将低维向量拓展到高维（不足补1）、高维向量投影到低维（截取前LEN个坐标），在涉及其次坐标和普通坐标的转换时多次用到。\n\n\n\n\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/06-shaders/OpenGL-2.0-Programmable-Shader-Pipeline.png)\n\n\n\nShader包含顶点着色和片元着色两个部件，将其抽离出来，可以使得我们通过修改Shader即可实现各种不同的渲染效果，而无需改动其他代码。\n\n在`gl.h`中，定义Shader的基本结构。不同Shader的通过继承基类重写两个虚函数来实现\n\n```cpp\nstruct IShader {\n    virtual ~IShader() {}\n    virtual Vec4f  vertex(int iface, int nthvert) = 0;\n    virtual bool fragment(Vec3f bar, TGAColor &color) = 0;\n};\n```\n\n其中，iface是面的编号，而nthvert是顶点编号（对于三角形为0,1,2）。\n\n例如，一个简单的GouraudShader，vertex通过顶点法向量与光照的点乘计算三角形每个顶点的光照，而fragment通过重心坐标插值计算三角形区域中所有像素的颜色。\n\n```cpp\nstruct GouraudShader : public IShader {\n    Vec3f varying_intensity;\n    //顶点着色\n    virtual Vec4f vertex(int iface, int nthvert) {\n        Vec4f glVertex = embed<4>(model->vert(iface, nthvert));\n        glVertex = Viewport * Projection * ModelView * glVertex;\n        //\n        varying_intensity[nthvert] = std::max(0.f, model->normal(iface, nthvert) * light_dir);\n        return glVertex;\n    }\n    //片段着色 用于drawTriangle \n    //这里的bar即baryCentric\n    virtual bool fragment(Vec3f bar, TGAColor &color) {\n        float intensity = varying_intensity * bar;\n        color = TGAColor(255, 255, 255) * intensity;\n        return false;\t//返回值表示是否丢弃\n    }\n};\n\n//in main for every vertex\nGouraudShader shader;\nfor (int i=0; i<model->nfaces(); i++) {\n    std::vector<int> face = model->face(i);\n    Vec3f world_coords[3];\n    Vec4f screen_coords[3];\n    for (int j = 0; j < 3; j++) {\n        Vec3f v = model->vert(face[j]);\n        world_coords[j] = v;\n        screen_coords[j] = shader.vertex(i, j);\n    }\n    drawTriangle(screen_coords, shader, image, zbuffer);\n}\n// in drawTriangle, for every pixel\n...\nTGAColor color;\nbool discard = shader.fragment(bc, color);\nif (!discard) {\n    zbuffer.set(P.x, P.y, TGAColor(frag_depth));\n    image.set(P.x, P.y, color);\n}    \n...\n```\n\n所得的效果如图\n\n![image-20240512211917138](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512201920094-1588430460.png)\n\n我们可以轻松地修改着色器，实现不同的渲染效果，如将颜色设置为6个梯度的橙色：\n\n```cpp\n    virtual bool fragment(Vec3f bar, TGAColor &color) {\n        float intensity = varying_intensity*bar;\n        if (intensity>.85) intensity = 1;\n        else if (intensity>.60) intensity = .80;\n        else if (intensity>.45) intensity = .60;\n        else if (intensity>.30) intensity = .45;\n        else if (intensity>.15) intensity = .30;\n        else intensity = 0;\n        color = TGAColor(255, 155, 0)*intensity;\n        return false;\n    }\n```\n\n效果：\n\n![image-20240512212544885](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512202546531-812190877.png)\n\n**纹理着色器**\n\n接下来，我们可以实现漫反射纹理。只需要修改Shader添加纹理映射项即可。\n\n```cpp\nstruct TextureShader : public IShader {\n    Vec3f          varying_intensity; // written by vertex shader, read by fragment shader\n    mat<2,3,float> varying_uv;        // same as above\n\n    virtual Vec4f vertex(int iface, int nthvert) {\n        varying_uv.set_col(nthvert, model->uv(iface, nthvert));\n        varying_intensity[nthvert] = std::max(0.f, model->normal(iface, nthvert)*light_dir); // get diffuse lighting intensity\n        Vec4f gl_Vertex = embed<4>(model->vert(iface, nthvert)); // read the vertex from .obj file\n        return Viewport*Projection*ModelView*gl_Vertex; // transform it to screen coordinates\n    }\n\n    virtual bool fragment(Vec3f bar, TGAColor &color) {\n        float intensity = varying_intensity*bar;   // interpolate intensity for the current pixel\n        Vec2f uv = varying_uv*bar;                 // interpolate uv for the current pixel\n        color = model->diffuse(uv)*intensity;      // well duh\n        return false;                              // no, we do not discard this pixel\n    }\n};\n```\n\n效果\n\n![image-20240512212807641](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512202811146-1791754725.png)\n\n**法线着色器**\n\n事实上，纹理图像中不止可以储存颜色，还可以储存法线方向、温度等等信息。通过纹理给出每个点的法线方向，就能实现表明的凹凸起伏效果。此时，纹理图像的RGB值不再储存颜色，而是用于储存法线，如下图。\n\n<img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/06-shaders/african_head_nm.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n上节课的结尾，我们提到了“模型上的坐标通过矩阵M进行仿射变换，那么模型的法向量的变换矩阵是M的逆矩阵的转置”这一结论，根据这个结论，就可以直接在顶点着色器中分别计算顶点和法向量经过投影后的结构\n\n```cpp\nstruct NormalShader : public IShader {\n    mat<2,3,float> varying_uv;  // same as above\n    mat<4,4,float> uniform_M;   //  Projection*ModelView\n    mat<4,4,float> uniform_MIT; // (Projection*ModelView).invert_transpose()\n\n    virtual Vec4f vertex(int iface, int nthvert) {\n        varying_uv.set_col(nthvert, model->uv(iface, nthvert));\n        Vec4f gl_Vertex = embed<4>(model->vert(iface, nthvert)); // read the vertex from .obj file\n        return Viewport*Projection*ModelView*gl_Vertex; // transform it to screen coordinates\n   }\n\n    virtual bool fragment(Vec3f bar, TGAColor &color) {\n        Vec2f uv = varying_uv*bar;                 // interpolate uv for the current pixel\n        Vec3f n = proj<3>(uniform_MIT*embed<4>(model->normal(uv))).normalize();\n        Vec3f l = proj<3>(uniform_M  *embed<4>(light_dir        )).normalize();\n        float intensity = std::max(0.f, n*l);\n        color = model->diffuse(uv)*intensity;      // well duh\n        return false;                              // no, we do not discard this pixel\n    }\n};\n```\n\n效果：\n\n![image-20240512214259167](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512204303617-1448246807.png)\n\n\n\n**Phone模型着色器**\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/06-shaders/e3720a5dfedc49edb0bf70f8bc64204a.png)\n\n根据Phone光照模型，物体的真实光照可以近似为环境光+漫反射+高光。据此，我们可以进一步得出更加真实的着色器。\n\n高光的计算如图所示：\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/06-shaders/d58cd3bbab46463e87b782a12a147fbb.png)\n\n已知物体表明法向量为n，入射光为l，两者夹角为a，假设所有向量都被归一化，设反射光为r，则有l+r=2n cosa ，可求得反射光r=2n cosa - l = 2n(n·l)-l。反射光\n\n```cpp\nstruct PhoneShader : public IShader {\n    mat<2,3,float> varying_uv;  // same as above\n    mat<4,4,float> uniform_M;   //  Projection*ModelView\n    mat<4,4,float> uniform_MIT; // (Projection*ModelView).invert_transpose()\n\n    virtual Vec4f vertex(int iface, int nthvert) {\n        varying_uv.set_col(nthvert, model->uv(iface, nthvert));\n        Vec4f gl_Vertex = embed<4>(model->vert(iface, nthvert)); // read the vertex from .obj file\n        return Viewport*Projection*ModelView*gl_Vertex; // transform it to screen coordinates\n    }\n\n    virtual bool fragment(Vec3f bar, TGAColor &color) {\n        Vec2f uv = varying_uv*bar;\n        Vec3f n = proj<3>(uniform_MIT*embed<4>(model->normal(uv))).normalize();\n        Vec3f l = proj<3>(uniform_M  *embed<4>(light_dir        )).normalize();\n        Vec3f r = (n*(n*l*2.f) - l).normalize();   // reflected light\n        float spec = pow(std::max(r.z, 0.0f), model->specular(uv));\n        float diff = std::max(0.f, n*l);\n        TGAColor c = model->diffuse(uv);\n        color = c;\n        for (int i=0; i<3; i++) color[i] = std::min<float>(5 + c[i]*(diff + .6*spec), 255);\n        return false;\n    }\n};\n```\n\n按照环境光5+自身颜色*(1漫反射+0.6高光)，得到的效果如下\n\n<img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512210513789-778169408.png\" alt=\"image-20240512220509696\" style=\"zoom:67%;\" />\n\n我们可以试试其他的配比系数，如`10 + c[i]*(2 * diff + 1.5*spec`\n\n![image-20240512221918507](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512211926468-1109783721.png)\n\n另外，我们还可以到master分支找其他的模型，尝试渲染效果\n\n![image-20240512221509093](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512211511558-935691911.png)\n\n\n\n![image-20240512222416047](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512212417887-506051993.png)","source":"_posts/TinyRendererNotes.md","raw":"---\ntitle: TinyRendererNotes\ndate: 2024-05-06 00:41:25\ntags: 图形学\n---\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n\n## TinyRender学习笔记\n\n通过手写软光栅渲染器加深对计算机图形学基本原理的理解，并练习C++面向对象程序设计。\n\n该项目主要参考[Home · ssloy/tinyrenderer Wiki (github.com)](https://github.com/ssloy/tinyrenderer/wiki)编写，使用CMake构建\n\n可以浏览我的历史commit，找到不同进度时提交的代码。\n\n本项目涉及的几乎所有的图形学知识都在GAMES101课程中出现过，推荐将GAMES101作为前置课程，或配合GAMES101的进度一起学习。\n\n## Lesson 0 Getting Started\n\n### Using TGA image format\n\n使用这个基本框架来生成TGA格式图像：\n[ssloy/tinyrenderer at 909fe20934ba5334144d2c748805690a1fa4c89f (github.com)](https://github.com/ssloy/tinyrenderer/tree/909fe20934ba5334144d2c748805690a1fa4c89f)\n\n只需 `#include \"tgaimage.h\"` ，并在编译时链接tgaimage.cpp即可。\n\n例：在屏幕上将像素(52,41)设置为红色\n\n```cpp\n#include \"tgaimage.h\"\n//Set color with RGB\nconst TGAColor white = TGAColor(255, 255, 255, 255);\nconst TGAColor red   = TGAColor(255, 0,   0,   255);\nint main(int argc, char** argv) {\n    \t//Set image size\n        TGAImage image(100, 100, TGAImage::RGB);\n    \t//Set pixel color\n        image.set(52, 41, red);\n        //To have the origin at the left bottom corner of the image\n        image.flip_vertically(); \n        image.write_tga_file(\"output.tga\");\n        return 0;\n}\n```\n\n个人推荐的环境：Clion + CMake。（因为VsCode CMake调试功能实在搞不懂=.=)\n\n涉及导入模型，需要将工作目录设置为工程文件夹\n\n![image-20240505230016266](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505220018544-333214793.png)\n\n![image-20240505230043985](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505220047826-450326712.png)\n\n但我的Clion存在tga图像无法加载的bug。在设置->编辑器->文件类型中去掉.tga，然后选择用本地程序打开即可。\n\n## Lesson 1 Bresenham’s Line Drawing Algorithm\n\n使用Bresenham算法绘制线段。\n\n原理：https://en.wikipedia.org/wiki/Bresenham's_line_algorithm\n\n实现参考：https://rosettacode.org/wiki/Bitmap/Bresenham%27s_line_algorithm#C++\n\n建议绘制斜率小于-1，-1到0,0到1,大于1，以及水平和垂直的直线来检验算法正确性。\n\n```cpp\n#include <cmath>\n\n#include \"tgaimage.h\"\n\nconst TGAColor white = TGAColor(255, 255, 255, 255);\nconst TGAColor red = TGAColor(255, 0, 0, 255);\nconst TGAColor blue = TGAColor(0, 0, 255, 255);\n\nvoid line(int x1, int y1, int x2, int y2, TGAImage& image, TGAColor color)\n{\n    //Ensure that slope in (0, 1)\n    const bool steep = (std::abs(y2 - y1) > std::abs(x2 - x1));\n    if (steep) {\n        std::swap(x1, y1);\n        std::swap(x2, y2);\n    }\n    if (x1 > x2) {\n        std::swap(x1, x2);\n        std::swap(y1, y2);\n    }\n\n    const float dx = x2 - x1;\n    const float dy = fabs(y2 - y1);\n\n    float error = dx / 2.0f;\n    const int ystep = (y1 < y2) ? 1 : -1;\n    int y = (int)y1;\n\n    const int maxX = (int)x2;\n\n    for (int x = (int)x1; x <= maxX; x++) {\n        if (steep) {\n            image.set(y, x, color);\n        } else {\n            image.set(x, y, color);\n        }\n\n        error -= dy;\n        if (error < 0) {\n            y += ystep;\n            error += dx;\n        }\n    }\n}\n\nint main(int argc, char** argv)\n{\n    TGAImage image(100, 100, TGAImage::RGB);\n    line(13, 20, 80, 40, image, red);\n    line(55, 33, 22, 66, image, blue);\n    line(33, 33, 66, 66, image, white);\n    line(44, 20, 44, 80, image, white);\n    line(20, 44, 80, 44, image, white);\n    image.flip_vertically();\n    image.write_tga_file(\"output.tga\");\n    return 0;\n}\n\n```\n\n效果\n\n![image-20240419183705501](https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240419173705372-1981687689.png)\n\n## Lesson 2: Triangle rasterization and back face culling\n\n三维物体模型通常以三角形为基础。为了方便表示点、向量、多边形，写geometry.h。\n\n```cpp\n#pragma once\n\ntemplate <class t> struct Vec2 {\n    union {\n        struct {t u, v;};\n        struct {t x, y;};\n        t raw[2];\n    };\n    Vec2() : u(0), v(0) {}\n    Vec2(t _u, t _v) : u(_u),v(_v) {}\n    inline Vec2<t> operator +(const Vec2<t> &V) const { return Vec2<t>(u+V.u, v+V.v); }\n    inline Vec2<t> operator -(const Vec2<t> &V) const { return Vec2<t>(u-V.u, v-V.v); }\n    inline Vec2<t> operator *(float f)          const { return Vec2<t>(u*f, v*f); }\n    template <class > friend std::ostream& operator<<(std::ostream& s, Vec2<t>& v);\n};\n\ntemplate <class t> struct Vec3 {\n    union {\n        struct {t x, y, z;};\n        struct { t ivert, iuv, inorm; };\n        t raw[3];\n    };\n    Vec3() : x(0), y(0), z(0) {}\n    Vec3(t _x, t _y, t _z) : x(_x),y(_y),z(_z) {}\n    inline Vec3<t> operator ^(const Vec3<t> &v) const { return Vec3<t>(y*v.z-z*v.y, z*v.x-x*v.z, x*v.y-y*v.x); }\n    inline Vec3<t> operator +(const Vec3<t> &v) const { return Vec3<t>(x+v.x, y+v.y, z+v.z); }\n    inline Vec3<t> operator -(const Vec3<t> &v) const { return Vec3<t>(x-v.x, y-v.y, z-v.z); }\n    inline Vec3<t> operator *(float f)          const { return Vec3<t>(x*f, y*f, z*f); }\n    inline t       operator *(const Vec3<t> &v) const { return x*v.x + y*v.y + z*v.z; }\n    float norm () const { return std::sqrt(x*x+y*y+z*z); }\n    Vec3<t> & normalize(t l=1) { *this = (*this)*(l/norm()); return *this; }\n    template <class > friend std::ostream& operator<<(std::ostream& s, Vec3<t>& v);\n};\n\ntypedef Vec2<float> Vec2f;\ntypedef Vec2<int>   Vec2i;\ntypedef Vec3<float> Vec3f;\ntypedef Vec3<int>   Vec3i;\n\ntemplate <class t> std::ostream& operator<<(std::ostream& s, Vec2<t>& v) {\n    s << \"(\" << v.x << \", \" << v.y << \")\\n\";\n    return s;\n}\n\ntemplate <class t> std::ostream& operator<<(std::ostream& s, Vec3<t>& v) {\n    s << \"(\" << v.x << \", \" << v.y << \", \" << v.z << \")\\n\";\n    return s;\n}\n```\n\n\n\n如何画出实心的三角形？一般来说，有扫描线和边界函数两种算法。\n\n对于多线程的CPU,采用边界函数法更为高效：先找到三角形的矩形包围盒，再逐点判断是否在三角形中\n\n```cpp\ntriangle(vec2 points[3]) { \n    vec2 bbox[2] = find_bounding_box(points); \n    for (each pixel in the bounding box) { \n        if (inside(points, pixel)) { \n            put_pixel(pixel); \n        } \n    } \n}\n```\n\n因此，问题变成了给定三角形的三个点，如何判断点是否在三角形内部\n\n一种最好的办法是，计算给定点关于给定三角形的重心坐标（或者叫面积坐标）。\n\n维基百科：https://zh.wikipedia.org/wiki/%E9%87%8D%E5%BF%83%E5%9D%90%E6%A0%87\n\n简单来说，它表示一个点所对的三条边形成的三角形面积比。如果点在三角形外部，则有一个维度是负的。\n\n![image-20240419185822971](https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240419175823218-1822502417.png)\n\n由于tinyrenderer的作者写得有些丑陋，我在geometry.h里直接加入了polygon和triangle类，来实现重心坐标计算和点在三角形内的检测\n\n```cpp\ntemplate <class T>\nclass Polygon2D {\npublic:\n    int n;\n    std::vector<Vec2<T>> pt;\n    Polygon2D(int _n, std::vector<Vec2<T>> _pt): n(_n), pt(_pt) {}\n};\n\ntemplate <class T>\nclass Triangle2D: public Polygon2D<T> {\npublic:\n    using Polygon2D<T>::pt;\n    Triangle2D(std::vector<Vec2<T>> _pt): Polygon2D<T>(3, _pt) {}\n    Vec3f baryCentric(Vec2i P) {\n        Vec3f u = Vec3f(pt[2][0]-pt[0][0], pt[1][0]-pt[0][0], pt[0][0]-P[0])^Vec3f(pt[2][1]-pt[0][1], pt[1][1]-pt[0][1], pt[0][1]-P[1]);\n        /* `pts` and `P` has integer value as coordinates\n           so `abs(u[2])` < 1 means `u[2]` is 0, that means\n           triangle is degenerate, in this case return something with negative coordinates */\n        if (std::abs(u.z)<1) return Vec3f(-1,1,1);\n        return Vec3f(1.f-(u.x+u.y)/u.z, u.y/u.z, u.x/u.z);\n    }\n\n    bool inInside(Vec2i P) {\n        auto bc = baryCentric(P);\n        if (bc.x<0 || bc.y<0 || bc.z<0) return false;\n        return true;\n    }\n};\n```\n\n在main.cpp里绘制实心三角形\n\n```cpp\n//Iterate all points in the rectangular bounding box of triangle, draw if the point is inside\nvoid drawSolidTriangle(Triangle2D<int> tri, TGAImage &image, TGAColor color) {\n    Vec2i bboxmin(image.get_width()-1,  image.get_height()-1);\n    Vec2i bboxmax(0, 0);\n    Vec2i clamp(image.get_width()-1, image.get_height()-1);\n    for (int i=0; i<3; i++) {\n        bboxmin.x = std::max(0, std::min(bboxmin.x, tri.pt[i].x));\n        bboxmin.y = std::max(0, std::min(bboxmin.y, tri.pt[i].y));\n\n        bboxmax.x = std::min(clamp.x, std::max(bboxmax.x, tri.pt[i].x));\n        bboxmax.y = std::min(clamp.y, std::max(bboxmax.y, tri.pt[i].y));\n    }\n    Vec2i P;\n    for (P.x=bboxmin.x; P.x<=bboxmax.x; P.x++) {\n        for (P.y=bboxmin.y; P.y<=bboxmax.y; P.y++) {\n            Vec3f bc_screen  = tri.baryCentric(P);\n            if (bc_screen.x<0 || bc_screen.y<0 || bc_screen.z<0) continue;\n            image.set(P.x, P.y, color);\n        }\n    }\n};\n```\n\n得到如图效果：\n\n<img src=\"https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240419185714797-2050127591.png\" alt=\"image-20240419195714296\" style=\"zoom:50%;\" />\n\n三角形绘制完成后，可以尝试导入作者提供的由三角形构成的人脸模型。\n\n.obj模型文件的格式如下\n\n```\n# List of geometric vertices, with (x, y, z, [w]) coordinates, w is optional and defaults to 1.0.\nv 0.123 0.234 0.345 1.0\nv ...\n...\n# List of texture coordinates, in (u, [v, w]) coordinates, these will vary between 0 and 1. v, w are optional and default to 0.\nvt 0.500 1 [0]\nvt ...\n...\n# List of vertex normals in (x,y,z) form; normals might not be unit vectors.\nvn 0.707 0.000 0.707\nvn ...\n...\n# Parameter space vertices in (u, [v, w]) form; free form geometry statement (see below)\nvp 0.310000 3.210000 2.100000\nvp ...\n...\n# Polygonal face element (see below)\nf 1 2 3\nf 3/1 4/2 5/3\nf 6/4/1 3/5/3 7/6/5\nf 7//1 8//2 9//3\nf ...\n...\n# Line element (see below)\nl 5 8 1 2 4 9\n```\n\n目前，我们暂时不关心模型的深度（z坐标），只是将模型正投影到XY平面上，则模型上的点对应的屏幕坐标可以这样简单的计算\n\n```cpp\nscreen_coords[j] = Vec2i((v.x+1.)*width/2., (v.y+1.)*height/2.);\n```\n\n假设光从正前方射向正后方，即光线方向(0,0,-1)。\n\n在这里，我们使用一种简化的亮度计算方法：我们忽略面与光源之间的距离差异，认为正对着光源的面（法线与光线方向相同）最亮，这样就可以计算每个三角形面的单位法向量与光线方向的叉积来代表亮度。\n\n```cpp\nint main(int argc, char** argv) {\n    if (2==argc) {\n        model = new Model(argv[1]);\n    } else {\n        model = new Model(\"obj/african_head.obj\");\n    }\n\n    TGAImage image(width, height, TGAImage::RGB);\n    Vec3f light_dir(0,0,-1);\n    int cnt = 0;\n    for (int i=0; i<model->nfaces(); i++) {\n        std::vector<int> face = model->face(i);\n        Vec2i screen_coords[3];\n        Vec3f world_coords[3];\n        for (int j=0; j<3; j++) {\n            Vec3f v = model->vert(face[j]);\n            screen_coords[j] = Vec2i((v.x+1.)*width/2., (v.y+1.)*height/2.);\n            world_coords[j]  = v;\n        }\n        Vec3f n = (world_coords[2]-world_coords[0])^(world_coords[1]-world_coords[0]);\n        n.normalize();\n        float intensity = n*light_dir;\n        if (intensity>0) {\n            printf(\"ok %d\\n\", ++cnt);\n            drawSolidTriangle(Triangle2D<int>({screen_coords[0], screen_coords[1], screen_coords[2]}), image, TGAColor(intensity*255, intensity*255, intensity*255, 255));\n        }\n    }\n\n    image.flip_vertically();\n    image.write_tga_file(\"output.tga\");\n    delete model;\n    return 0;\n}\n```\n\n在这种简化下，得到的渲染结果如下：\n![image-20240419205641217](https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240419195642124-634629665.png)\n\n可以发现，位于口腔中的三角形遮住了嘴唇。下一节课中，我们将考虑深度测试，正确处理多边形的遮挡关系。\n\n\n\n## Lesson 3: Z Buffer\n\n深度检测算法的基本原理是，引入一个大小为像素数量的Z-Buffer数组，初始化所有像素点深度为负无穷。\n\n在遍历像素点时，比较当前三角形上点的深度是否小于Z-Buffer的数值，如果小于，则更新该像素并更新Z-Buffer。\n\n为此，我们需要为屏幕坐标增加一维深度（对于上面的人脸设置为模型的z即可）。在drawSolidTriangle()中增加对深度缓冲区的判断。\n\n```cpp\n//Iterate all points in the rectangular bounding box of triangle, draw if the point is inside\n// 2024 04 26 2d->3d\nvoid drawSolidTriangle(Triangle2D<float> tri, TGAImage &image, TGAColor color, float *zbuffer) {\n    Vec2f bboxmin(image.get_width()-1,  image.get_height()-1);\n    Vec2f bboxmax(0, 0);\n    Vec2f clamp(image.get_width()-1, image.get_height()-1);\n    for (int i=0; i<3; i++) {\n        bboxmin.x = std::max((float)0, std::min(bboxmin.x, tri.pt[i].x));\n        bboxmin.y = std::max((float)0, std::min(bboxmin.y, tri.pt[i].y));\n\n        bboxmax.x = std::min(clamp.x, std::max(bboxmax.x, tri.pt[i].x));\n        bboxmax.y = std::min(clamp.y, std::max(bboxmax.y, tri.pt[i].y));\n    }\n    Vec3i P;\n    for (P.x=bboxmin.x; P.x<=bboxmax.x; P.x++) {\n        for (P.y=bboxmin.y; P.y<=bboxmax.y; P.y++) {\n            Vec3f bc_screen  = tri.baryCentric(P.toVec2());//toTriangle2D().baryCentric(P);\n            if (bc_screen.x<0 || bc_screen.y<0 || bc_screen.z<0) continue;\n            \n            //bugfix\n            P.z = tri.depth[0] * bc.x + tri.depth[1] * bc.y + tri.depth[2] * bc.z;\n\n            int idx = P.x+P.y*width;\n            if (zbuffer[idx]<P.z) {\n                zbuffer[idx] = P.z;\n                image.set(P.x, P.y, color);\n            }\n        }\n    }\n};\n\n\n\n\nVec3f worldToScreen(Vec3f v) {\n    return Vec3f(int((v.x+1.)*width/2.+.5), int((v.y+1.)*height/2.+.5), v.z);\n}\n\nint main(int argc, char** argv) {\n    if (2==argc) {\n        model = new Model(argv[1]);\n    } else {\n        model = new Model(\"obj/african_head.obj\");\n    }\n\n    float *zbuffer = new float[width * height];\n    for (int i=width*height; i--; zbuffer[i] = -std::numeric_limits<float>::max());\n\n\n    TGAImage image(width, height, TGAImage::RGB);\n    Vec3f light_dir(0,0,-1);\n    int cnt = 0;\n    for (int i=0; i<model->nfaces(); i++) {\n        std::vector<int> face = model->face(i);\n        Vec3f screen_coords[3];\n        Vec3f world_coords[3];\n        for (int j=0; j<3; j++) {\n            Vec3f v = model->vert(face[j]);\n            //screen_coords[j] = Vec2i((v.x+1.)*width/2., (v.y+1.)*height/2.);\n            world_coords[j]  = v;\n            screen_coords[j] = worldToScreen(v);\n        }\n\n        Vec3f n = (world_coords[2]-world_coords[0])^(world_coords[1]-world_coords[0]);\n        n.normalize();\n        float intensity = n*light_dir;\n\n        if (intensity>0) {\n            printf(\"ok %d\\n\", ++cnt);\n            drawSolidTriangle(Triangle2D<float>({screen_coords[0], screen_coords[1], screen_coords[2]}), image, TGAColor(intensity*255, intensity*255, intensity*255, 255), zbuffer);\n        }\n    }\n\n    image.flip_vertically();\n    image.write_tga_file(\"output.tga\");\n    delete model;\n    return 0;\n}\n```\n\n同时，在Triangle2D类中加入depth数组即可\n\n```cpp\ntemplate <class T>\nclass Triangle2D: public Polygon2D<T> {\npublic:\n    using Polygon2D<T>::pt;\n    std::vector<T> depth;\n    \n    Triangle2D(std::vector<Vec2<T>> _pt, std::vector<Vec2<T>> _depth = {0, 0, 0}): \n        Polygon2D<T>(3, _pt), \n        depth(_depth) {}\n        \n    Triangle2D(std::vector<Vec3<float>> _pt):\n        Polygon2D<T>(3, {_pt[0].toVec2(), _pt[1].toVec2(), _pt[2].toVec2()}),\n        depth({_pt[0].z, _pt[1].z, _pt[2].z}) {}\n        \n    Vec3f baryCentric(Vec2f P) {\n        Vec3f u = Vec3f(pt[2][0]-pt[0][0], pt[1][0]-pt[0][0], pt[0][0]-P[0])^Vec3f(pt[2][1]-pt[0][1], pt[1][1]-pt[0][1], pt[0][1]-P[1]);\n        /* `pts` and `P` has integer value as coordinates\n           so `abs(u[2])` < 1 means `u[2]` is 0, that means\n           triangle is degenerate, in this case return something with negative coordinates */\n        if (std::abs(u.z)<1) return Vec3f(-1,1,1);\n        return Vec3f(1.f-(u.x+u.y)/u.z, u.y/u.z, u.x/u.z);\n    }\n\n    bool inInside(Vec2i P) {\n        auto bc = baryCentric(P);\n        if (bc.x<0 || bc.y<0 || bc.z<0) return false;\n        return true;\n    }\n};\n\n\n\n```\n\n效果如图所示：\n![image-20240426175739547](https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240426165741120-55012551.png)\n\n### Bouns: Texture Mapping\n\n在.obj文件中，有以“vt u v”开头的行，它们给出了一个纹理坐标数组。 \n\n> The number in the middle (between the slashes) in the facet lines \"f x/x/x x/x/x x/x/x\" are the texture coordinates of this vertex of this triangle. Interpolate it inside the triangle, multiply by the width-height of the texture image and you will get the color to put in your render.\n\ntinyrender作者提供了漫反射纹理： [african_head_diffuse.tga](..\\Downloads\\african_head_diffuse.tga) \n\n据此，我们可以给上述人脸模型添加纹理。此时，main函数中drawSolidTriangle函数里不需要再传入颜色，只需要传入intensity即可，另外需要传入当前三角形三个点的纹理坐标uv。\n\n```cpp\n//Iterate all points in the rectangular bounding box of triangle, draw if the point is inside\n// 2024 04 26 2d->3d, texture mapping\nvoid drawSolidTriangle(Triangle2D<float> tri, Vec2i* uv, TGAImage &image, float intensity, float *zbuffer) {\n    Vec2f bboxmin(image.get_width()-1,  image.get_height()-1);\n    Vec2f bboxmax(0, 0);\n    Vec2f clamp(image.get_width()-1, image.get_height()-1);\n    for (int i=0; i<3; i++) {\n        bboxmin.x = std::max((float)0, std::min(bboxmin.x, tri.pt[i].x));\n        bboxmin.y = std::max((float)0, std::min(bboxmin.y, tri.pt[i].y));\n\n        bboxmax.x = std::min(clamp.x, std::max(bboxmax.x, tri.pt[i].x));\n        bboxmax.y = std::min(clamp.y, std::max(bboxmax.y, tri.pt[i].y));\n    }\n    Vec3i P;\n    for (P.x=bboxmin.x; P.x<=bboxmax.x; P.x++) {\n        for (P.y=bboxmin.y; P.y<=bboxmax.y; P.y++) {\n            Vec3f bc  = tri.baryCentric(P.toVec2());//toTriangle2D().baryCentric(P);\n            if (bc.x<0 || bc.y<0 || bc.z<0) continue;\n            \n            P.z = tri.depth[0] * bc.x + tri.depth[1] * bc.y + tri.depth[2] * bc.z;\n\n            int idx = P.x+P.y*width;\n            if (zbuffer[idx]<P.z) {\n                zbuffer[idx] = P.z;\n\n                Vec2i P_uv = uv[0] * bc.x + uv[1] * bc.y + uv[2] * bc.z;\n                TGAColor color = model->diffuse(P_uv);\n                image.set(P.x, P.y, color);\n            }\n        }\n    }\n};\n\n\n\n\nVec3f worldToScreen(Vec3f v) {\n    return Vec3f(int((v.x+1.)*width/2.+.5), int((v.y+1.)*height/2.+.5), v.z);\n}\n\nint main(int argc, char** argv) {\n    if (2==argc) {\n        model = new Model(argv[1]);\n    } else {\n        model = new Model(\"obj/african_head.obj\");\n    }\n\n    float *zbuffer = new float[width * height];\n    for (int i=width*height; i--; zbuffer[i] = -std::numeric_limits<float>::max());\n\n\n    TGAImage image(width, height, TGAImage::RGB);\n    Vec3f light_dir(0,0,-1);\n    int cnt = 0;\n    for (int i=0; i<model->nfaces(); i++) {\n        std::vector<int> face = model->face(i);\n        Vec3f screen_coords[3];\n        Vec3f world_coords[3];\n        for (int j=0; j<3; j++) {\n            Vec3f v = model->vert(face[j]);\n            //screen_coords[j] = Vec2i((v.x+1.)*width/2., (v.y+1.)*height/2.);\n            world_coords[j]  = v;\n            screen_coords[j] = worldToScreen(v);\n        }\n\n        Vec3f n = (world_coords[2]-world_coords[0])^(world_coords[1]-world_coords[0]);\n        n.normalize();\n        float intensity = n*light_dir;\n\n        if (intensity>0) {\n            printf(\"ok %d\\n\", ++cnt);\n            Vec2i uv[3];\n            for (int j = 0; j < 3; j++) uv[j] = model->uv(i, j);\n            drawSolidTriangle(Triangle2D<float>({screen_coords[0], screen_coords[1], screen_coords[2]}), uv, image, intensity, zbuffer);\n        }\n    }\n\n    image.flip_vertically();\n    image.write_tga_file(\"output.tga\");\n    delete model;\n    return 0;\n}\n```\n\nmodel.h和model.cpp需要修改以支持纹理。作者在lesson4的结尾放出了代码。\n\n效果：\n\n\n\n![image-20240426190246539](https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240426180250012-1899969424.png)\n\n这是一个平行投影的结果，损失了一部分真实感，例如，虽然耳朵旁边的头发在xoy平面上不与脸部重叠，但实际上应该被前边的皮肤遮挡，因为人眼/相机本身是“点光源”，而不是“平行光源”，物体发出的光线最终汇聚于一点，也就是所谓的“透视”。下面将引入透视投影：\n\n\n\n## Lesson 4: Perspective projection\n\n\n\n\n\n\n\n\n\n齐次坐标\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/f10.png)\n\n\n\n\n\n简单变换（图来自GAMES101）\n\n![image-20240505174927834](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505164930200-682100308.png)\n\n逆变换\n\n![image-20240505175454080](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505165458526-1584226714.png)\n\n复合变换\n\n![image-20240505175019922](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505165021790-531013206.png)\n\n\n\n\n\n\n\n实现矩阵类：\n\n```cpp\nconst int DEFAULT_D = 4;\nclass Matrix {\n    std::vector<std::vector<float>> m;\n    int nrow, ncol;\npublic:\n    Matrix(int r=DEFAULT_D, int c=DEFAULT_D) :\n        m(std::vector<std::vector<float>> (r, std::vector<float>(c, 0.f))),\n        nrow(r), ncol(c) {}\n\n    int get_nrow() { return nrow; }\n    int get_ncol() { return ncol; }\n\n    static Matrix identity(int dimensions) {\n        Matrix E(dimensions, dimensions);\n        for (int i = 0; i < dimensions; i++)\n            E[i][i] = 1;\n        return E;\n    }\n\n    std::vector<float>& operator[](const int i) {\n        assert(i >= 0 && i < nrow);\n        return m[i];\n    }\n\n    const std::vector<float>& operator[](const int i) const {\n        assert(i >= 0 && i < nrow);\n        return m[i];\n    }\n\n    Matrix operator*(const Matrix& a) {\n        assert(this->ncol == a.nrow);\n        Matrix res(this->nrow, a.ncol);\n        for (int i = 0; i < this->nrow; i++) {\n            for (int j = 0; j < a.ncol; j++) {\n                res.m[i][j] = 0;\n                for (int k = 0; k < this->ncol; k++)\n                    res.m[i][j] += this->m[i][k]*a.m[k][j];\n            }\n        }\n        return res;\n    }\n\n    Matrix transpose() {\n        Matrix res(ncol, nrow);\n        for (int i = 0; i < ncol; i++)\n            for (int j = 0; j < nrow; j++)\n                res.m[i][j] = m[j][i];\n        return res;\n    }\n    Matrix inverse() {\n        assert(nrow==ncol);\n        // augmenting the square matrix with the identity matrix of the same dimensions a => [ai]\n        Matrix result(nrow, ncol*2);\n        for(int i=0; i<nrow; i++)\n            for(int j=0; j<ncol; j++)\n                result[i][j] = m[i][j];\n        for(int i=0; i<nrow; i++)\n            result[i][i+ncol] = 1;\n        // first pass\n        for (int i=0; i<nrow-1; i++) {\n            // normalize the first row\n            for(int j=result.ncol-1; j>=0; j--)\n                result[i][j] /= result[i][i];\n            for (int k=i+1; k<nrow; k++) {\n                float coeff = result[k][i];\n                for (int j=0; j<result.ncol; j++) {\n                    result[k][j] -= result[i][j]*coeff;\n                }\n            }\n        }\n        // normalize the last row\n        for(int j=result.ncol-1; j>=nrow-1; j--)\n            result[nrow-1][j] /= result[nrow-1][nrow-1];\n        // second pass\n        for (int i=nrow-1; i>0; i--) {\n            for (int k=i-1; k>=0; k--) {\n                float coeff = result[k][i];\n                for (int j=0; j<result.ncol; j++) {\n                    result[k][j] -= result[i][j]*coeff;\n                }\n            }\n        }\n        // cut the identity matrix back\n        Matrix truncate(nrow, ncol);\n        for(int i=0; i<nrow; i++)\n            for(int j=0; j<ncol; j++)\n                truncate[i][j] = result[i][j+ncol];\n        return truncate;\n    }\n\n    friend std::ostream& operator<<(std::ostream& s, Matrix& m);\n};\n\ninline std::ostream& operator<<(std::ostream& s, Matrix& m) {\n    for (int i = 0; i < m.nrow; i++)  {\n        for (int j = 0; j < m.ncol; j++) {\n            s << m[i][j];\n            if (j<m.ncol-1) s << \"\\t\";\n        }\n        s << \"\\n\";\n    }\n    return s;\n}\n```\n\n\n\n一个简单投影矩阵的推导：\n\n假设相机位置为（0,0,c）成像平面为z=0，如图\n\n<img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/525d3930435c3be900e4c7956edb5a1c.png\" alt=\"img\" style=\"zoom: 67%;\" />\n\n\n\n根据三角形相似，x'/c = x/(c-z)，即有\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/f15.png)\n\n同理\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/f16.png)\n\n为了实现z轴方向上靠近相机的线段被拉伸，远离相机的线段被压缩，投影矩阵具有这样的形式\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/f13.png)\n\n根据齐次坐标的结果，得到对应的投影点坐标\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/f14.png)\n\n根据上面的结果，可知r=-1/c。\n\n我们可以得到一个简单情况下的投影矩阵，变换过程如图\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/f17.png)\n\n\n\n\n\n在程序中，这个过程用如下方式实现：\n\n```cpp\nscreen_coords[j] = hc2v(viewportMatrix * projectionMatrix * v2hc(v));\n```\n\n(普通坐标 → 齐次坐标)\n\n世界坐标 → (经投影变换)投影坐标 → （经视口变换)屏幕坐标 \n\n(齐次坐标 → 普通坐标)\n\n这里的坐标包含位置(x,y)和深度z,深度交给z-buffer来处理\n\n视口变化的目的是将投影区域映射到[-1,1]^3的立方体中，便于绘制\n\n相关变化的实现：\n\n```cpp\n//Transition between coordinates (vector type) and homogeneous coordinates (matrix type)\nMatrix v2hc(const Vec3f &v) {\n    Matrix hc(4, 1);\n    hc[0][0] = v.x;\n    hc[1][0] = v.y;\n    hc[2][0] = v.z;\n    hc[3][0] = 1;\n    return hc;\n}\nVec3f hc2v(const Matrix &hc) {\n    return Vec3f(hc[0][0], hc[1][0], hc[2][0]) * (1.f / hc[3][0]);\n}\n\nVec3f light_dir(0,0,-1);\nVec3f camera(0, 0, 3);\n//project to z = 0\nMatrix projection(const Vec3f &camera) {\n    Matrix m = Matrix::identity(4);\n    m[3][2] = -1.f/camera.z;\n    return m;\n}\n\n//viewport(width / 8, height / 8, width * 0.75, height * 0.75);\n//窗口边缘留出1/8空隙\nMatrix viewport(int x, int y, int w, int h) {\n    Matrix m = Matrix::identity(4);\n    //Translation\n    m[0][3] = x + w / 2.f;\n    m[1][3] = y + h / 2.f;\n    m[2][3] = depth / 2.f;\n    //scale to [0, 1]\n    m[0][0] = w / 2.f;\n    m[1][1] = h / 2.f;\n    m[2][2] = depth / 2.f;\n    return m;\n}\n\nint main() {\n\t...\n\n    Matrix projectionMatrix = projection(camera);\n    Matrix viewportMatrix = viewport(width / 8, height / 8, width * 0.75, height * 0.75);\n\n    ...\n        \n    for (int i=0; i<model->nfaces(); i++) {\n        std::vector<int> face = model->face(i);\n        Vec3f screen_coords[3];\n        Vec3f world_coords[3];\n        for (int j=0; j<3; j++) {\n            Vec3f v = model->vert(face[j]);\n            //world -> screen:\n            //3d coordinate -> homogeneous coordinates\n            //-> projection trans(camera at (0,0,c), project to plane z = 0)\n            //-> viewport trans(to make central at (w/2,h/2,d/2))\n\n            world_coords[j]  = v;\n            screen_coords[j] = hc2v(viewportMatrix * projectionMatrix * v2hc(v));\n        }\n\n        //Still simplified light intensity\n        Vec3f n = (world_coords[2]-world_coords[0])^(world_coords[1]-world_coords[0]);\n        n.normalize();\n        float intensity = n*light_dir;\n\n        if (intensity>0) {\n            printf(\"ok %d\\n\", ++cnt);\n            Vec2i uv[3];\n            for (int j = 0; j < 3; j++) uv[j] = model->uv(i, j);\n            drawSolidTriangle(Triangle2D<float>({screen_coords[0], screen_coords[1], screen_coords[2]}), uv, image, intensity, zbuffer);\n        }\n    }\n    ...\n}\n```\n\n\n\n\n\n效果\n\n![image-20240504170937200](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240504160940105-1636523864.png)\n\n\n\n\n\n注：TinyRenderer的透视投影与GAMES101处理方式不同，GAMES101是把M\\[3\\]\\[2\\]固定为1，求解M的第三行，而此处是固定第三行为（0 0 1 0），求解M\\[3\\]\\[2\\]。\n\n此处并没有“近平面”的概念，认为n=0,f=c。\n\n下面是GAMES101给出的结果（第三行为0 0 A B）：\n\n<img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505182227248-1392365094.png\" alt=\"image-20240505192224927\" style=\"zoom:50%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505182300021-22198105.png\" alt=\"image-20240505192257807\" style=\"zoom:50%;\" />\n\n\n\n## Lesson 5: Moving the camera\n\n之前，我们考虑了相机在(0,0,c)，朝着-z方向看的情况。\n\n对于任意的相机位置，需要三个向量来确定：相机坐标e，相机指向的点c，向上方向向量u,如图所示：\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/b94dd4a591514fd66a91a6e4cc065644.png)\n\n我们假定相机总是朝着-z方向看，而u朝向正y方向，据此就得到了一个新的坐标系x'y'z'，\n\n下面考虑如何将物体坐标[x,y,z]转化为新坐标系下的[x',y',z']。\n\n\n\n\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f66a0139058ab1d1025dbfd8cd401389.png)\n\n首先回顾坐标[x,y,z]的定义，它是三个正交的单位向量i,j,k前面的系数\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f00.png)\n\n现在，我们有了新的单位向量i',j',k',那么一定存在矩阵M，使得\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f01.png)\n\n我们将OP写成OO'+O'P,与新的单位坐标建立联系：\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f02.png)\n\n将[i',j',k']用上面的式子表示，提出[i,j,k]:\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f03.png)\n\n左边用[x,y,z]的定义式替换，就得到了[x',y',z']与[x,y,z]的关系\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f04.png)\n\n\n\n\n\n\n\n关于look at的推导，此处写的有些混乱\n建议参阅https://www.zhihu.com/question/447781866 \n\n下面是个人理解：\n\n简单来说，设M是(0, 0, 0),[i,j,k]到eyepos, [i',j',k']的变换矩阵\n则M=TR,先旋转后平移\n\n其中旋转矩阵R根据单位向量**左乘**该矩阵得到新单位向量，很容易得到(此处r,u,v是i',j',k'在原坐标系下的坐标)\n\n![image-20240505220527743](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505210530096-395261047.png)\n\n而T则为原点平移到eye pos的平移矩阵 （C是eyepos)\n\n![image-20240505221319762](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505211321938-1985120681.png)\n\n此为对坐标轴的变换矩阵，即，我们用M计算了**新的单位向量在原坐标系下的坐标**，而要得到原来单位向量在新坐标系下的坐标，显然应该左乘M的逆矩阵。这样，我们就求得了ModelView矩阵。\n\n\n\n据此，编写lookup实现modelview的计算\n\n```cpp\nVec3f light_dir = Vec3f(0, 0, -1).normalize();\nVec3f eye(1, 1, 3);\nVec3f center(0, 0, 0);\nVec3f up(0, 1, 0);\n//Vec3f camera(0, 0, 3);\n\n//screen_coordinate = viewport * projection * modelview * world_coordinate\nMatrix lookat(Vec3f eye, Vec3f center, Vec3f up) {\n    Vec3f z = (eye - center).normalize();\n    Vec3f x = (up ^ z).normalize();\n    Vec3f y = (z ^ x).normalize();\n    Matrix M_inv = Matrix::identity(4);\n    Matrix T = Matrix::identity(4);\n    //thanks https://www.zhihu.com/question/447781866\n    for (int i = 0; i < 3; i++) {\n        M_inv[0][i] = x[i];\n        M_inv[1][i] = y[i];\n        M_inv[2][i] = z[i];\n        T[i][3] = -eye[i];\n    }\n    return M_inv * T;\n}\n\n\nMatrix projection(Vec3f eye, Vec3f center) {\n    Matrix m = Matrix::identity(4);\n    m[3][2] = -1.f / (eye - center).norm();\n    //m[3][2] = -1.f / camera.z;\n    return m;\n}\n\n\nint main() {\n    ...\n        \n    Matrix modelviewMatrix = lookat(eye, center, up);\n    Matrix projectionMatrix = projection(eye, center);\n    Matrix viewportMatrix = viewport(width / 8, height / 8, width * 0.75, height * 0.75);\n\n    ...\n    screen_coords[j] = hc2v(viewportMatrix * projectionMatrix * modelviewMatrix * v2hc(v));\n    ...\n    \n}\n```\n\n效果 目前有点bug\n\n![image-20240505225818988](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505215822020-1676545529.png)\n\n\n\n\n\n\n### Bouns：Transformation of normal vectors\n\n为了处理光照，我们将模型进行坐标变换后，如果模型提供了每个面的法向量，还需要将法向量也进行变换。\n\n此处有一个结论：模型上的坐标通过矩阵M进行仿射变换，那么模型的法向量的变换矩阵是M的逆矩阵的转置。\n\n证明：考虑平面方程 Ax+By+Cz=0，它的法向量是（A,B,C) ,写成矩阵形式为：\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f05.png)\n\n在两者之间插入M的逆和M：\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f06.png)\n\n 由于坐标均为列向量，把左边写成转置形式：\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f07.png)\n\n因此，如果对坐标(x,y,z)做变换M，要满足原来的直线方程，对法向量的变换矩阵为M的逆矩阵的转置（或者转置再求逆，转置和求逆是**可交换的**，证明略）\n\n## Lesson 6: Shaders \n\n本节主要分为两大部分：重构代码，实现不同的shaders。\n\n再尝试用自己之前的屎山适配Shader部分后，我放弃了，直接使用作者写的geometry。内容大部分都很直观，值得注意的是\n\n```cpp\ntemplate<size_t LEN,size_t DIM,typename T> vec<LEN,T> embed(const vec<DIM,T> &v, T fill=1) {\n    vec<LEN,T> ret;\n    for (size_t i=LEN; i--; ret[i]=(i<DIM?v[i]:fill));\n    return ret;\n}\n\ntemplate<size_t LEN,size_t DIM, typename T> vec<LEN,T> proj(const vec<DIM,T> &v) {\n    vec<LEN,T> ret;\n    for (size_t i=LEN; i--; ret[i]=v[i]);\n    return ret;\n}\n```\n\n这两个模板的作用，分别是将低维向量拓展到高维（不足补1）、高维向量投影到低维（截取前LEN个坐标），在涉及其次坐标和普通坐标的转换时多次用到。\n\n\n\n\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/06-shaders/OpenGL-2.0-Programmable-Shader-Pipeline.png)\n\n\n\nShader包含顶点着色和片元着色两个部件，将其抽离出来，可以使得我们通过修改Shader即可实现各种不同的渲染效果，而无需改动其他代码。\n\n在`gl.h`中，定义Shader的基本结构。不同Shader的通过继承基类重写两个虚函数来实现\n\n```cpp\nstruct IShader {\n    virtual ~IShader() {}\n    virtual Vec4f  vertex(int iface, int nthvert) = 0;\n    virtual bool fragment(Vec3f bar, TGAColor &color) = 0;\n};\n```\n\n其中，iface是面的编号，而nthvert是顶点编号（对于三角形为0,1,2）。\n\n例如，一个简单的GouraudShader，vertex通过顶点法向量与光照的点乘计算三角形每个顶点的光照，而fragment通过重心坐标插值计算三角形区域中所有像素的颜色。\n\n```cpp\nstruct GouraudShader : public IShader {\n    Vec3f varying_intensity;\n    //顶点着色\n    virtual Vec4f vertex(int iface, int nthvert) {\n        Vec4f glVertex = embed<4>(model->vert(iface, nthvert));\n        glVertex = Viewport * Projection * ModelView * glVertex;\n        //\n        varying_intensity[nthvert] = std::max(0.f, model->normal(iface, nthvert) * light_dir);\n        return glVertex;\n    }\n    //片段着色 用于drawTriangle \n    //这里的bar即baryCentric\n    virtual bool fragment(Vec3f bar, TGAColor &color) {\n        float intensity = varying_intensity * bar;\n        color = TGAColor(255, 255, 255) * intensity;\n        return false;\t//返回值表示是否丢弃\n    }\n};\n\n//in main for every vertex\nGouraudShader shader;\nfor (int i=0; i<model->nfaces(); i++) {\n    std::vector<int> face = model->face(i);\n    Vec3f world_coords[3];\n    Vec4f screen_coords[3];\n    for (int j = 0; j < 3; j++) {\n        Vec3f v = model->vert(face[j]);\n        world_coords[j] = v;\n        screen_coords[j] = shader.vertex(i, j);\n    }\n    drawTriangle(screen_coords, shader, image, zbuffer);\n}\n// in drawTriangle, for every pixel\n...\nTGAColor color;\nbool discard = shader.fragment(bc, color);\nif (!discard) {\n    zbuffer.set(P.x, P.y, TGAColor(frag_depth));\n    image.set(P.x, P.y, color);\n}    \n...\n```\n\n所得的效果如图\n\n![image-20240512211917138](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512201920094-1588430460.png)\n\n我们可以轻松地修改着色器，实现不同的渲染效果，如将颜色设置为6个梯度的橙色：\n\n```cpp\n    virtual bool fragment(Vec3f bar, TGAColor &color) {\n        float intensity = varying_intensity*bar;\n        if (intensity>.85) intensity = 1;\n        else if (intensity>.60) intensity = .80;\n        else if (intensity>.45) intensity = .60;\n        else if (intensity>.30) intensity = .45;\n        else if (intensity>.15) intensity = .30;\n        else intensity = 0;\n        color = TGAColor(255, 155, 0)*intensity;\n        return false;\n    }\n```\n\n效果：\n\n![image-20240512212544885](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512202546531-812190877.png)\n\n**纹理着色器**\n\n接下来，我们可以实现漫反射纹理。只需要修改Shader添加纹理映射项即可。\n\n```cpp\nstruct TextureShader : public IShader {\n    Vec3f          varying_intensity; // written by vertex shader, read by fragment shader\n    mat<2,3,float> varying_uv;        // same as above\n\n    virtual Vec4f vertex(int iface, int nthvert) {\n        varying_uv.set_col(nthvert, model->uv(iface, nthvert));\n        varying_intensity[nthvert] = std::max(0.f, model->normal(iface, nthvert)*light_dir); // get diffuse lighting intensity\n        Vec4f gl_Vertex = embed<4>(model->vert(iface, nthvert)); // read the vertex from .obj file\n        return Viewport*Projection*ModelView*gl_Vertex; // transform it to screen coordinates\n    }\n\n    virtual bool fragment(Vec3f bar, TGAColor &color) {\n        float intensity = varying_intensity*bar;   // interpolate intensity for the current pixel\n        Vec2f uv = varying_uv*bar;                 // interpolate uv for the current pixel\n        color = model->diffuse(uv)*intensity;      // well duh\n        return false;                              // no, we do not discard this pixel\n    }\n};\n```\n\n效果\n\n![image-20240512212807641](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512202811146-1791754725.png)\n\n**法线着色器**\n\n事实上，纹理图像中不止可以储存颜色，还可以储存法线方向、温度等等信息。通过纹理给出每个点的法线方向，就能实现表明的凹凸起伏效果。此时，纹理图像的RGB值不再储存颜色，而是用于储存法线，如下图。\n\n<img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/06-shaders/african_head_nm.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n上节课的结尾，我们提到了“模型上的坐标通过矩阵M进行仿射变换，那么模型的法向量的变换矩阵是M的逆矩阵的转置”这一结论，根据这个结论，就可以直接在顶点着色器中分别计算顶点和法向量经过投影后的结构\n\n```cpp\nstruct NormalShader : public IShader {\n    mat<2,3,float> varying_uv;  // same as above\n    mat<4,4,float> uniform_M;   //  Projection*ModelView\n    mat<4,4,float> uniform_MIT; // (Projection*ModelView).invert_transpose()\n\n    virtual Vec4f vertex(int iface, int nthvert) {\n        varying_uv.set_col(nthvert, model->uv(iface, nthvert));\n        Vec4f gl_Vertex = embed<4>(model->vert(iface, nthvert)); // read the vertex from .obj file\n        return Viewport*Projection*ModelView*gl_Vertex; // transform it to screen coordinates\n   }\n\n    virtual bool fragment(Vec3f bar, TGAColor &color) {\n        Vec2f uv = varying_uv*bar;                 // interpolate uv for the current pixel\n        Vec3f n = proj<3>(uniform_MIT*embed<4>(model->normal(uv))).normalize();\n        Vec3f l = proj<3>(uniform_M  *embed<4>(light_dir        )).normalize();\n        float intensity = std::max(0.f, n*l);\n        color = model->diffuse(uv)*intensity;      // well duh\n        return false;                              // no, we do not discard this pixel\n    }\n};\n```\n\n效果：\n\n![image-20240512214259167](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512204303617-1448246807.png)\n\n\n\n**Phone模型着色器**\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/06-shaders/e3720a5dfedc49edb0bf70f8bc64204a.png)\n\n根据Phone光照模型，物体的真实光照可以近似为环境光+漫反射+高光。据此，我们可以进一步得出更加真实的着色器。\n\n高光的计算如图所示：\n\n![img](https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/06-shaders/d58cd3bbab46463e87b782a12a147fbb.png)\n\n已知物体表明法向量为n，入射光为l，两者夹角为a，假设所有向量都被归一化，设反射光为r，则有l+r=2n cosa ，可求得反射光r=2n cosa - l = 2n(n·l)-l。反射光\n\n```cpp\nstruct PhoneShader : public IShader {\n    mat<2,3,float> varying_uv;  // same as above\n    mat<4,4,float> uniform_M;   //  Projection*ModelView\n    mat<4,4,float> uniform_MIT; // (Projection*ModelView).invert_transpose()\n\n    virtual Vec4f vertex(int iface, int nthvert) {\n        varying_uv.set_col(nthvert, model->uv(iface, nthvert));\n        Vec4f gl_Vertex = embed<4>(model->vert(iface, nthvert)); // read the vertex from .obj file\n        return Viewport*Projection*ModelView*gl_Vertex; // transform it to screen coordinates\n    }\n\n    virtual bool fragment(Vec3f bar, TGAColor &color) {\n        Vec2f uv = varying_uv*bar;\n        Vec3f n = proj<3>(uniform_MIT*embed<4>(model->normal(uv))).normalize();\n        Vec3f l = proj<3>(uniform_M  *embed<4>(light_dir        )).normalize();\n        Vec3f r = (n*(n*l*2.f) - l).normalize();   // reflected light\n        float spec = pow(std::max(r.z, 0.0f), model->specular(uv));\n        float diff = std::max(0.f, n*l);\n        TGAColor c = model->diffuse(uv);\n        color = c;\n        for (int i=0; i<3; i++) color[i] = std::min<float>(5 + c[i]*(diff + .6*spec), 255);\n        return false;\n    }\n};\n```\n\n按照环境光5+自身颜色*(1漫反射+0.6高光)，得到的效果如下\n\n<img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512210513789-778169408.png\" alt=\"image-20240512220509696\" style=\"zoom:67%;\" />\n\n我们可以试试其他的配比系数，如`10 + c[i]*(2 * diff + 1.5*spec`\n\n![image-20240512221918507](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512211926468-1109783721.png)\n\n另外，我们还可以到master分支找其他的模型，尝试渲染效果\n\n![image-20240512221509093](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512211511558-935691911.png)\n\n\n\n![image-20240512222416047](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512212417887-506051993.png)","slug":"TinyRendererNotes","published":1,"updated":"2024-05-12T14:18:17.794Z","comments":1,"layout":"post","photos":[],"_id":"cmd2qsp620005dgyiaweme1gr","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n<h2 id=\"TinyRender学习笔记\"><a href=\"#TinyRender学习笔记\" class=\"headerlink\" title=\"TinyRender学习笔记\"></a>TinyRender学习笔记</h2><p>通过手写软光栅渲染器加深对计算机图形学基本原理的理解，并练习C++面向对象程序设计。</p>\n<p>该项目主要参考<a href=\"https://github.com/ssloy/tinyrenderer/wiki\">Home · ssloy&#x2F;tinyrenderer Wiki (github.com)</a>编写，使用CMake构建</p>\n<p>可以浏览我的历史commit，找到不同进度时提交的代码。</p>\n<p>本项目涉及的几乎所有的图形学知识都在GAMES101课程中出现过，推荐将GAMES101作为前置课程，或配合GAMES101的进度一起学习。</p>\n<h2 id=\"Lesson-0-Getting-Started\"><a href=\"#Lesson-0-Getting-Started\" class=\"headerlink\" title=\"Lesson 0 Getting Started\"></a>Lesson 0 Getting Started</h2><h3 id=\"Using-TGA-image-format\"><a href=\"#Using-TGA-image-format\" class=\"headerlink\" title=\"Using TGA image format\"></a>Using TGA image format</h3><p>使用这个基本框架来生成TGA格式图像：<br><a href=\"https://github.com/ssloy/tinyrenderer/tree/909fe20934ba5334144d2c748805690a1fa4c89f\">ssloy&#x2F;tinyrenderer at 909fe20934ba5334144d2c748805690a1fa4c89f (github.com)</a></p>\n<p>只需 <code>#include &quot;tgaimage.h&quot;</code> ，并在编译时链接tgaimage.cpp即可。</p>\n<p>例：在屏幕上将像素(52,41)设置为红色</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;tgaimage.h&quot;</span></span></span><br><span class=\"line\"><span class=\"comment\">//Set color with RGB</span></span><br><span class=\"line\"><span class=\"type\">const</span> TGAColor white = <span class=\"built_in\">TGAColor</span>(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>);</span><br><span class=\"line\"><span class=\"type\">const</span> TGAColor red   = <span class=\"built_in\">TGAColor</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>,   <span class=\"number\">0</span>,   <span class=\"number\">255</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//Set image size</span></span><br><span class=\"line\">        <span class=\"function\">TGAImage <span class=\"title\">image</span><span class=\"params\">(<span class=\"number\">100</span>, <span class=\"number\">100</span>, TGAImage::RGB)</span></span>;</span><br><span class=\"line\">    \t<span class=\"comment\">//Set pixel color</span></span><br><span class=\"line\">        image.<span class=\"built_in\">set</span>(<span class=\"number\">52</span>, <span class=\"number\">41</span>, red);</span><br><span class=\"line\">        <span class=\"comment\">//To have the origin at the left bottom corner of the image</span></span><br><span class=\"line\">        image.<span class=\"built_in\">flip_vertically</span>(); </span><br><span class=\"line\">        image.<span class=\"built_in\">write_tga_file</span>(<span class=\"string\">&quot;output.tga&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>个人推荐的环境：Clion + CMake。（因为VsCode CMake调试功能实在搞不懂&#x3D;.&#x3D;)</p>\n<p>涉及导入模型，需要将工作目录设置为工程文件夹</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505220018544-333214793.png\" alt=\"image-20240505230016266\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505220047826-450326712.png\" alt=\"image-20240505230043985\"></p>\n<p>但我的Clion存在tga图像无法加载的bug。在设置-&gt;编辑器-&gt;文件类型中去掉.tga，然后选择用本地程序打开即可。</p>\n<h2 id=\"Lesson-1-Bresenham’s-Line-Drawing-Algorithm\"><a href=\"#Lesson-1-Bresenham’s-Line-Drawing-Algorithm\" class=\"headerlink\" title=\"Lesson 1 Bresenham’s Line Drawing Algorithm\"></a>Lesson 1 Bresenham’s Line Drawing Algorithm</h2><p>使用Bresenham算法绘制线段。</p>\n<p>原理：<a href=\"https://en.wikipedia.org/wiki/Bresenham's_line_algorithm\">https://en.wikipedia.org/wiki/Bresenham&#39;s_line_algorithm</a></p>\n<p>实现参考：<a href=\"https://rosettacode.org/wiki/Bitmap/Bresenham%27s_line_algorithm#C++\">https://rosettacode.org/wiki/Bitmap/Bresenham%27s_line_algorithm#C++</a></p>\n<p>建议绘制斜率小于-1，-1到0,0到1,大于1，以及水平和垂直的直线来检验算法正确性。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;tgaimage.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> TGAColor white = <span class=\"built_in\">TGAColor</span>(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>);</span><br><span class=\"line\"><span class=\"type\">const</span> TGAColor red = <span class=\"built_in\">TGAColor</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>);</span><br><span class=\"line\"><span class=\"type\">const</span> TGAColor blue = <span class=\"built_in\">TGAColor</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">line</span><span class=\"params\">(<span class=\"type\">int</span> x1, <span class=\"type\">int</span> y1, <span class=\"type\">int</span> x2, <span class=\"type\">int</span> y2, TGAImage&amp; image, TGAColor color)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Ensure that slope in (0, 1)</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">bool</span> steep = (std::<span class=\"built_in\">abs</span>(y2 - y1) &gt; std::<span class=\"built_in\">abs</span>(x2 - x1));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (steep) &#123;</span><br><span class=\"line\">        std::<span class=\"built_in\">swap</span>(x1, y1);</span><br><span class=\"line\">        std::<span class=\"built_in\">swap</span>(x2, y2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x1 &gt; x2) &#123;</span><br><span class=\"line\">        std::<span class=\"built_in\">swap</span>(x1, x2);</span><br><span class=\"line\">        std::<span class=\"built_in\">swap</span>(y1, y2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">float</span> dx = x2 - x1;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">float</span> dy = <span class=\"built_in\">fabs</span>(y2 - y1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">float</span> error = dx / <span class=\"number\">2.0f</span>;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> ystep = (y1 &lt; y2) ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> y = (<span class=\"type\">int</span>)y1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> maxX = (<span class=\"type\">int</span>)x2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = (<span class=\"type\">int</span>)x1; x &lt;= maxX; x++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (steep) &#123;</span><br><span class=\"line\">            image.<span class=\"built_in\">set</span>(y, x, color);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            image.<span class=\"built_in\">set</span>(x, y, color);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error -= dy;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (error &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            y += ystep;</span><br><span class=\"line\">            error += dx;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">TGAImage <span class=\"title\">image</span><span class=\"params\">(<span class=\"number\">100</span>, <span class=\"number\">100</span>, TGAImage::RGB)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">line</span>(<span class=\"number\">13</span>, <span class=\"number\">20</span>, <span class=\"number\">80</span>, <span class=\"number\">40</span>, image, red);</span><br><span class=\"line\">    <span class=\"built_in\">line</span>(<span class=\"number\">55</span>, <span class=\"number\">33</span>, <span class=\"number\">22</span>, <span class=\"number\">66</span>, image, blue);</span><br><span class=\"line\">    <span class=\"built_in\">line</span>(<span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">66</span>, <span class=\"number\">66</span>, image, white);</span><br><span class=\"line\">    <span class=\"built_in\">line</span>(<span class=\"number\">44</span>, <span class=\"number\">20</span>, <span class=\"number\">44</span>, <span class=\"number\">80</span>, image, white);</span><br><span class=\"line\">    <span class=\"built_in\">line</span>(<span class=\"number\">20</span>, <span class=\"number\">44</span>, <span class=\"number\">80</span>, <span class=\"number\">44</span>, image, white);</span><br><span class=\"line\">    image.<span class=\"built_in\">flip_vertically</span>();</span><br><span class=\"line\">    image.<span class=\"built_in\">write_tga_file</span>(<span class=\"string\">&quot;output.tga&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>效果</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240419173705372-1981687689.png\" alt=\"image-20240419183705501\"></p>\n<h2 id=\"Lesson-2-Triangle-rasterization-and-back-face-culling\"><a href=\"#Lesson-2-Triangle-rasterization-and-back-face-culling\" class=\"headerlink\" title=\"Lesson 2: Triangle rasterization and back face culling\"></a>Lesson 2: Triangle rasterization and back face culling</h2><p>三维物体模型通常以三角形为基础。为了方便表示点、向量、多边形，写geometry.h。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">t</span>&gt; <span class=\"keyword\">struct</span> <span class=\"title class_\">Vec2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> &#123;t u, v;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> &#123;t x, y;&#125;;</span><br><span class=\"line\">        t raw[<span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">Vec2</span>() : <span class=\"built_in\">u</span>(<span class=\"number\">0</span>), <span class=\"built_in\">v</span>(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">Vec2</span>(t _u, t _v) : <span class=\"built_in\">u</span>(_u),<span class=\"built_in\">v</span>(_v) &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> Vec2&lt;t&gt; <span class=\"keyword\">operator</span> +(<span class=\"type\">const</span> Vec2&lt;t&gt; &amp;V) <span class=\"type\">const</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Vec2</span>&lt;t&gt;(u+V.u, v+V.v); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> Vec2&lt;t&gt; <span class=\"keyword\">operator</span> -(<span class=\"type\">const</span> Vec2&lt;t&gt; &amp;V) <span class=\"type\">const</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Vec2</span>&lt;t&gt;(u-V.u, v-V.v); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> Vec2&lt;t&gt; <span class=\"keyword\">operator</span> *(<span class=\"type\">float</span> f)          <span class=\"type\">const</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Vec2</span>&lt;t&gt;(u*f, v*f); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> &gt; <span class=\"keyword\">friend</span> std::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(std::ostream&amp; s, Vec2&lt;t&gt;&amp; v);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">t</span>&gt; <span class=\"keyword\">struct</span> <span class=\"title class_\">Vec3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> &#123;t x, y, z;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> &#123; t ivert, iuv, inorm; &#125;;</span><br><span class=\"line\">        t raw[<span class=\"number\">3</span>];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">Vec3</span>() : <span class=\"built_in\">x</span>(<span class=\"number\">0</span>), <span class=\"built_in\">y</span>(<span class=\"number\">0</span>), <span class=\"built_in\">z</span>(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">Vec3</span>(t _x, t _y, t _z) : <span class=\"built_in\">x</span>(_x),<span class=\"built_in\">y</span>(_y),<span class=\"built_in\">z</span>(_z) &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> Vec3&lt;t&gt; <span class=\"keyword\">operator</span> ^(<span class=\"type\">const</span> Vec3&lt;t&gt; &amp;v) <span class=\"type\">const</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Vec3</span>&lt;t&gt;(y*v.z-z*v.y, z*v.x-x*v.z, x*v.y-y*v.x); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> Vec3&lt;t&gt; <span class=\"keyword\">operator</span> +(<span class=\"type\">const</span> Vec3&lt;t&gt; &amp;v) <span class=\"type\">const</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Vec3</span>&lt;t&gt;(x+v.x, y+v.y, z+v.z); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> Vec3&lt;t&gt; <span class=\"keyword\">operator</span> -(<span class=\"type\">const</span> Vec3&lt;t&gt; &amp;v) <span class=\"type\">const</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Vec3</span>&lt;t&gt;(x-v.x, y-v.y, z-v.z); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> Vec3&lt;t&gt; <span class=\"keyword\">operator</span> *(<span class=\"type\">float</span> f)          <span class=\"type\">const</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Vec3</span>&lt;t&gt;(x*f, y*f, z*f); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> t       <span class=\"keyword\">operator</span> *(<span class=\"type\">const</span> Vec3&lt;t&gt; &amp;v) <span class=\"type\">const</span> &#123; <span class=\"keyword\">return</span> x*v.x + y*v.y + z*v.z; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">float</span> <span class=\"title\">norm</span> <span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> std::<span class=\"built_in\">sqrt</span>(x*x+y*y+z*z); &#125;</span><br><span class=\"line\">    <span class=\"function\">Vec3&lt;t&gt; &amp; <span class=\"title\">normalize</span><span class=\"params\">(t l=<span class=\"number\">1</span>)</span> </span>&#123; *<span class=\"keyword\">this</span> = (*<span class=\"keyword\">this</span>)*(l/<span class=\"built_in\">norm</span>()); <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> &gt; <span class=\"keyword\">friend</span> std::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(std::ostream&amp; s, Vec3&lt;t&gt;&amp; v);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Vec2&lt;<span class=\"type\">float</span>&gt; Vec2f;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Vec2&lt;<span class=\"type\">int</span>&gt;   Vec2i;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Vec3&lt;<span class=\"type\">float</span>&gt; Vec3f;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Vec3&lt;<span class=\"type\">int</span>&gt;   Vec3i;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">t</span>&gt; std::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(std::ostream&amp; s, Vec2&lt;t&gt;&amp; v) &#123;</span><br><span class=\"line\">    s &lt;&lt; <span class=\"string\">&quot;(&quot;</span> &lt;&lt; v.x &lt;&lt; <span class=\"string\">&quot;, &quot;</span> &lt;&lt; v.y &lt;&lt; <span class=\"string\">&quot;)\\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">t</span>&gt; std::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(std::ostream&amp; s, Vec3&lt;t&gt;&amp; v) &#123;</span><br><span class=\"line\">    s &lt;&lt; <span class=\"string\">&quot;(&quot;</span> &lt;&lt; v.x &lt;&lt; <span class=\"string\">&quot;, &quot;</span> &lt;&lt; v.y &lt;&lt; <span class=\"string\">&quot;, &quot;</span> &lt;&lt; v.z &lt;&lt; <span class=\"string\">&quot;)\\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如何画出实心的三角形？一般来说，有扫描线和边界函数两种算法。</p>\n<p>对于多线程的CPU,采用边界函数法更为高效：先找到三角形的矩形包围盒，再逐点判断是否在三角形中</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">triangle</span>(vec2 points[<span class=\"number\">3</span>]) &#123; </span><br><span class=\"line\">    vec2 bbox[<span class=\"number\">2</span>] = <span class=\"built_in\">find_bounding_box</span>(points); </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (each pixel in the bounding box) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">inside</span>(points, pixel)) &#123; </span><br><span class=\"line\">            <span class=\"built_in\">put_pixel</span>(pixel); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因此，问题变成了给定三角形的三个点，如何判断点是否在三角形内部</p>\n<p>一种最好的办法是，计算给定点关于给定三角形的重心坐标（或者叫面积坐标）。</p>\n<p>维基百科：<a href=\"https://zh.wikipedia.org/wiki/%E9%87%8D%E5%BF%83%E5%9D%90%E6%A0%87\">https://zh.wikipedia.org/wiki/%E9%87%8D%E5%BF%83%E5%9D%90%E6%A0%87</a></p>\n<p>简单来说，它表示一个点所对的三条边形成的三角形面积比。如果点在三角形外部，则有一个维度是负的。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240419175823218-1822502417.png\" alt=\"image-20240419185822971\"></p>\n<p>由于tinyrenderer的作者写得有些丑陋，我在geometry.h里直接加入了polygon和triangle类，来实现重心坐标计算和点在三角形内的检测</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Polygon2D</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    std::vector&lt;Vec2&lt;T&gt;&gt; pt;</span><br><span class=\"line\">    <span class=\"built_in\">Polygon2D</span>(<span class=\"type\">int</span> _n, std::vector&lt;Vec2&lt;T&gt;&gt; _pt): <span class=\"built_in\">n</span>(_n), <span class=\"built_in\">pt</span>(_pt) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Triangle2D</span>: <span class=\"keyword\">public</span> Polygon2D&lt;T&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">using</span> Polygon2D&lt;T&gt;::pt;</span><br><span class=\"line\">    <span class=\"built_in\">Triangle2D</span>(std::vector&lt;Vec2&lt;T&gt;&gt; _pt): <span class=\"built_in\">Polygon2D</span>&lt;T&gt;(<span class=\"number\">3</span>, _pt) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\">Vec3f <span class=\"title\">baryCentric</span><span class=\"params\">(Vec2i P)</span> </span>&#123;</span><br><span class=\"line\">        Vec3f u = <span class=\"built_in\">Vec3f</span>(pt[<span class=\"number\">2</span>][<span class=\"number\">0</span>]-pt[<span class=\"number\">0</span>][<span class=\"number\">0</span>], pt[<span class=\"number\">1</span>][<span class=\"number\">0</span>]-pt[<span class=\"number\">0</span>][<span class=\"number\">0</span>], pt[<span class=\"number\">0</span>][<span class=\"number\">0</span>]-P[<span class=\"number\">0</span>])^<span class=\"built_in\">Vec3f</span>(pt[<span class=\"number\">2</span>][<span class=\"number\">1</span>]-pt[<span class=\"number\">0</span>][<span class=\"number\">1</span>], pt[<span class=\"number\">1</span>][<span class=\"number\">1</span>]-pt[<span class=\"number\">0</span>][<span class=\"number\">1</span>], pt[<span class=\"number\">0</span>][<span class=\"number\">1</span>]-P[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"comment\">/* `pts` and `P` has integer value as coordinates</span></span><br><span class=\"line\"><span class=\"comment\">           so `abs(u[2])` &lt; 1 means `u[2]` is 0, that means</span></span><br><span class=\"line\"><span class=\"comment\">           triangle is degenerate, in this case return something with negative coordinates */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (std::<span class=\"built_in\">abs</span>(u.z)&lt;<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">Vec3f</span>(<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Vec3f</span>(<span class=\"number\">1.f</span>-(u.x+u.y)/u.z, u.y/u.z, u.x/u.z);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">inInside</span><span class=\"params\">(Vec2i P)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> bc = <span class=\"built_in\">baryCentric</span>(P);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bc.x&lt;<span class=\"number\">0</span> || bc.y&lt;<span class=\"number\">0</span> || bc.z&lt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在main.cpp里绘制实心三角形</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Iterate all points in the rectangular bounding box of triangle, draw if the point is inside</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">drawSolidTriangle</span><span class=\"params\">(Triangle2D&lt;<span class=\"type\">int</span>&gt; tri, TGAImage &amp;image, TGAColor color)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Vec2i <span class=\"title\">bboxmin</span><span class=\"params\">(image.get_width()<span class=\"number\">-1</span>,  image.get_height()<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Vec2i <span class=\"title\">bboxmax</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Vec2i <span class=\"title\">clamp</span><span class=\"params\">(image.get_width()<span class=\"number\">-1</span>, image.get_height()<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">        bboxmin.x = std::<span class=\"built_in\">max</span>(<span class=\"number\">0</span>, std::<span class=\"built_in\">min</span>(bboxmin.x, tri.pt[i].x));</span><br><span class=\"line\">        bboxmin.y = std::<span class=\"built_in\">max</span>(<span class=\"number\">0</span>, std::<span class=\"built_in\">min</span>(bboxmin.y, tri.pt[i].y));</span><br><span class=\"line\"></span><br><span class=\"line\">        bboxmax.x = std::<span class=\"built_in\">min</span>(clamp.x, std::<span class=\"built_in\">max</span>(bboxmax.x, tri.pt[i].x));</span><br><span class=\"line\">        bboxmax.y = std::<span class=\"built_in\">min</span>(clamp.y, std::<span class=\"built_in\">max</span>(bboxmax.y, tri.pt[i].y));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Vec2i P;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (P.x=bboxmin.x; P.x&lt;=bboxmax.x; P.x++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (P.y=bboxmin.y; P.y&lt;=bboxmax.y; P.y++) &#123;</span><br><span class=\"line\">            Vec3f bc_screen  = tri.<span class=\"built_in\">baryCentric</span>(P);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bc_screen.x&lt;<span class=\"number\">0</span> || bc_screen.y&lt;<span class=\"number\">0</span> || bc_screen.z&lt;<span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            image.<span class=\"built_in\">set</span>(P.x, P.y, color);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>得到如图效果：</p>\n<img src=\"https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240419185714797-2050127591.png\" alt=\"image-20240419195714296\" style=\"zoom:50%;\">\n\n<p>三角形绘制完成后，可以尝试导入作者提供的由三角形构成的人脸模型。</p>\n<p>.obj模型文件的格式如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># List of geometric vertices, with (x, y, z, [w]) coordinates, w is optional and defaults to 1.0.</span><br><span class=\"line\">v 0.123 0.234 0.345 1.0</span><br><span class=\"line\">v ...</span><br><span class=\"line\">...</span><br><span class=\"line\"># List of texture coordinates, in (u, [v, w]) coordinates, these will vary between 0 and 1. v, w are optional and default to 0.</span><br><span class=\"line\">vt 0.500 1 [0]</span><br><span class=\"line\">vt ...</span><br><span class=\"line\">...</span><br><span class=\"line\"># List of vertex normals in (x,y,z) form; normals might not be unit vectors.</span><br><span class=\"line\">vn 0.707 0.000 0.707</span><br><span class=\"line\">vn ...</span><br><span class=\"line\">...</span><br><span class=\"line\"># Parameter space vertices in (u, [v, w]) form; free form geometry statement (see below)</span><br><span class=\"line\">vp 0.310000 3.210000 2.100000</span><br><span class=\"line\">vp ...</span><br><span class=\"line\">...</span><br><span class=\"line\"># Polygonal face element (see below)</span><br><span class=\"line\">f 1 2 3</span><br><span class=\"line\">f 3/1 4/2 5/3</span><br><span class=\"line\">f 6/4/1 3/5/3 7/6/5</span><br><span class=\"line\">f 7//1 8//2 9//3</span><br><span class=\"line\">f ...</span><br><span class=\"line\">...</span><br><span class=\"line\"># Line element (see below)</span><br><span class=\"line\">l 5 8 1 2 4 9</span><br></pre></td></tr></table></figure>\n\n<p>目前，我们暂时不关心模型的深度（z坐标），只是将模型正投影到XY平面上，则模型上的点对应的屏幕坐标可以这样简单的计算</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">screen_coords[j] = <span class=\"built_in\">Vec2i</span>((v.x+<span class=\"number\">1.</span>)*width/<span class=\"number\">2.</span>, (v.y+<span class=\"number\">1.</span>)*height/<span class=\"number\">2.</span>);</span><br></pre></td></tr></table></figure>\n\n<p>假设光从正前方射向正后方，即光线方向(0,0,-1)。</p>\n<p>在这里，我们使用一种简化的亮度计算方法：我们忽略面与光源之间的距离差异，认为正对着光源的面（法线与光线方向相同）最亮，这样就可以计算每个三角形面的单位法向量与光线方向的叉积来代表亮度。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">2</span>==argc) &#123;</span><br><span class=\"line\">        model = <span class=\"keyword\">new</span> <span class=\"built_in\">Model</span>(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        model = <span class=\"keyword\">new</span> <span class=\"built_in\">Model</span>(<span class=\"string\">&quot;obj/african_head.obj&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">TGAImage <span class=\"title\">image</span><span class=\"params\">(width, height, TGAImage::RGB)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Vec3f <span class=\"title\">light_dir</span><span class=\"params\">(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;model-&gt;<span class=\"built_in\">nfaces</span>(); i++) &#123;</span><br><span class=\"line\">        std::vector&lt;<span class=\"type\">int</span>&gt; face = model-&gt;<span class=\"built_in\">face</span>(i);</span><br><span class=\"line\">        Vec2i screen_coords[<span class=\"number\">3</span>];</span><br><span class=\"line\">        Vec3f world_coords[<span class=\"number\">3</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">0</span>; j&lt;<span class=\"number\">3</span>; j++) &#123;</span><br><span class=\"line\">            Vec3f v = model-&gt;<span class=\"built_in\">vert</span>(face[j]);</span><br><span class=\"line\">            screen_coords[j] = <span class=\"built_in\">Vec2i</span>((v.x+<span class=\"number\">1.</span>)*width/<span class=\"number\">2.</span>, (v.y+<span class=\"number\">1.</span>)*height/<span class=\"number\">2.</span>);</span><br><span class=\"line\">            world_coords[j]  = v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Vec3f n = (world_coords[<span class=\"number\">2</span>]-world_coords[<span class=\"number\">0</span>])^(world_coords[<span class=\"number\">1</span>]-world_coords[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        n.<span class=\"built_in\">normalize</span>();</span><br><span class=\"line\">        <span class=\"type\">float</span> intensity = n*light_dir;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (intensity&gt;<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ok %d\\n&quot;</span>, ++cnt);</span><br><span class=\"line\">            <span class=\"built_in\">drawSolidTriangle</span>(<span class=\"built_in\">Triangle2D</span>&lt;<span class=\"type\">int</span>&gt;(&#123;screen_coords[<span class=\"number\">0</span>], screen_coords[<span class=\"number\">1</span>], screen_coords[<span class=\"number\">2</span>]&#125;), image, <span class=\"built_in\">TGAColor</span>(intensity*<span class=\"number\">255</span>, intensity*<span class=\"number\">255</span>, intensity*<span class=\"number\">255</span>, <span class=\"number\">255</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    image.<span class=\"built_in\">flip_vertically</span>();</span><br><span class=\"line\">    image.<span class=\"built_in\">write_tga_file</span>(<span class=\"string\">&quot;output.tga&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> model;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这种简化下，得到的渲染结果如下：<br><img src=\"https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240419195642124-634629665.png\" alt=\"image-20240419205641217\"></p>\n<p>可以发现，位于口腔中的三角形遮住了嘴唇。下一节课中，我们将考虑深度测试，正确处理多边形的遮挡关系。</p>\n<h2 id=\"Lesson-3-Z-Buffer\"><a href=\"#Lesson-3-Z-Buffer\" class=\"headerlink\" title=\"Lesson 3: Z Buffer\"></a>Lesson 3: Z Buffer</h2><p>深度检测算法的基本原理是，引入一个大小为像素数量的Z-Buffer数组，初始化所有像素点深度为负无穷。</p>\n<p>在遍历像素点时，比较当前三角形上点的深度是否小于Z-Buffer的数值，如果小于，则更新该像素并更新Z-Buffer。</p>\n<p>为此，我们需要为屏幕坐标增加一维深度（对于上面的人脸设置为模型的z即可）。在drawSolidTriangle()中增加对深度缓冲区的判断。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Iterate all points in the rectangular bounding box of triangle, draw if the point is inside</span></span><br><span class=\"line\"><span class=\"comment\">// 2024 04 26 2d-&gt;3d</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">drawSolidTriangle</span><span class=\"params\">(Triangle2D&lt;<span class=\"type\">float</span>&gt; tri, TGAImage &amp;image, TGAColor color, <span class=\"type\">float</span> *zbuffer)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Vec2f <span class=\"title\">bboxmin</span><span class=\"params\">(image.get_width()<span class=\"number\">-1</span>,  image.get_height()<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Vec2f <span class=\"title\">bboxmax</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Vec2f <span class=\"title\">clamp</span><span class=\"params\">(image.get_width()<span class=\"number\">-1</span>, image.get_height()<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">        bboxmin.x = std::<span class=\"built_in\">max</span>((<span class=\"type\">float</span>)<span class=\"number\">0</span>, std::<span class=\"built_in\">min</span>(bboxmin.x, tri.pt[i].x));</span><br><span class=\"line\">        bboxmin.y = std::<span class=\"built_in\">max</span>((<span class=\"type\">float</span>)<span class=\"number\">0</span>, std::<span class=\"built_in\">min</span>(bboxmin.y, tri.pt[i].y));</span><br><span class=\"line\"></span><br><span class=\"line\">        bboxmax.x = std::<span class=\"built_in\">min</span>(clamp.x, std::<span class=\"built_in\">max</span>(bboxmax.x, tri.pt[i].x));</span><br><span class=\"line\">        bboxmax.y = std::<span class=\"built_in\">min</span>(clamp.y, std::<span class=\"built_in\">max</span>(bboxmax.y, tri.pt[i].y));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Vec3i P;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (P.x=bboxmin.x; P.x&lt;=bboxmax.x; P.x++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (P.y=bboxmin.y; P.y&lt;=bboxmax.y; P.y++) &#123;</span><br><span class=\"line\">            Vec3f bc_screen  = tri.<span class=\"built_in\">baryCentric</span>(P.<span class=\"built_in\">toVec2</span>());<span class=\"comment\">//toTriangle2D().baryCentric(P);</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bc_screen.x&lt;<span class=\"number\">0</span> || bc_screen.y&lt;<span class=\"number\">0</span> || bc_screen.z&lt;<span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//bugfix</span></span><br><span class=\"line\">            P.z = tri.depth[<span class=\"number\">0</span>] * bc.x + tri.depth[<span class=\"number\">1</span>] * bc.y + tri.depth[<span class=\"number\">2</span>] * bc.z;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> idx = P.x+P.y*width;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (zbuffer[idx]&lt;P.z) &#123;</span><br><span class=\"line\">                zbuffer[idx] = P.z;</span><br><span class=\"line\">                image.<span class=\"built_in\">set</span>(P.x, P.y, color);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Vec3f <span class=\"title\">worldToScreen</span><span class=\"params\">(Vec3f v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Vec3f</span>(<span class=\"built_in\">int</span>((v.x+<span class=\"number\">1.</span>)*width/<span class=\"number\">2.</span>+<span class=\"number\">.5</span>), <span class=\"built_in\">int</span>((v.y+<span class=\"number\">1.</span>)*height/<span class=\"number\">2.</span>+<span class=\"number\">.5</span>), v.z);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">2</span>==argc) &#123;</span><br><span class=\"line\">        model = <span class=\"keyword\">new</span> <span class=\"built_in\">Model</span>(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        model = <span class=\"keyword\">new</span> <span class=\"built_in\">Model</span>(<span class=\"string\">&quot;obj/african_head.obj&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">float</span> *zbuffer = <span class=\"keyword\">new</span> <span class=\"type\">float</span>[width * height];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=width*height; i--; zbuffer[i] = -std::numeric_limits&lt;<span class=\"type\">float</span>&gt;::<span class=\"built_in\">max</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">TGAImage <span class=\"title\">image</span><span class=\"params\">(width, height, TGAImage::RGB)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Vec3f <span class=\"title\">light_dir</span><span class=\"params\">(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;model-&gt;<span class=\"built_in\">nfaces</span>(); i++) &#123;</span><br><span class=\"line\">        std::vector&lt;<span class=\"type\">int</span>&gt; face = model-&gt;<span class=\"built_in\">face</span>(i);</span><br><span class=\"line\">        Vec3f screen_coords[<span class=\"number\">3</span>];</span><br><span class=\"line\">        Vec3f world_coords[<span class=\"number\">3</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">0</span>; j&lt;<span class=\"number\">3</span>; j++) &#123;</span><br><span class=\"line\">            Vec3f v = model-&gt;<span class=\"built_in\">vert</span>(face[j]);</span><br><span class=\"line\">            <span class=\"comment\">//screen_coords[j] = Vec2i((v.x+1.)*width/2., (v.y+1.)*height/2.);</span></span><br><span class=\"line\">            world_coords[j]  = v;</span><br><span class=\"line\">            screen_coords[j] = <span class=\"built_in\">worldToScreen</span>(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Vec3f n = (world_coords[<span class=\"number\">2</span>]-world_coords[<span class=\"number\">0</span>])^(world_coords[<span class=\"number\">1</span>]-world_coords[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        n.<span class=\"built_in\">normalize</span>();</span><br><span class=\"line\">        <span class=\"type\">float</span> intensity = n*light_dir;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (intensity&gt;<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ok %d\\n&quot;</span>, ++cnt);</span><br><span class=\"line\">            <span class=\"built_in\">drawSolidTriangle</span>(<span class=\"built_in\">Triangle2D</span>&lt;<span class=\"type\">float</span>&gt;(&#123;screen_coords[<span class=\"number\">0</span>], screen_coords[<span class=\"number\">1</span>], screen_coords[<span class=\"number\">2</span>]&#125;), image, <span class=\"built_in\">TGAColor</span>(intensity*<span class=\"number\">255</span>, intensity*<span class=\"number\">255</span>, intensity*<span class=\"number\">255</span>, <span class=\"number\">255</span>), zbuffer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    image.<span class=\"built_in\">flip_vertically</span>();</span><br><span class=\"line\">    image.<span class=\"built_in\">write_tga_file</span>(<span class=\"string\">&quot;output.tga&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> model;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同时，在Triangle2D类中加入depth数组即可</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Triangle2D</span>: <span class=\"keyword\">public</span> Polygon2D&lt;T&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">using</span> Polygon2D&lt;T&gt;::pt;</span><br><span class=\"line\">    std::vector&lt;T&gt; depth;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">Triangle2D</span>(std::vector&lt;Vec2&lt;T&gt;&gt; _pt, std::vector&lt;Vec2&lt;T&gt;&gt; _depth = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;): </span><br><span class=\"line\">        <span class=\"built_in\">Polygon2D</span>&lt;T&gt;(<span class=\"number\">3</span>, _pt), </span><br><span class=\"line\">        <span class=\"built_in\">depth</span>(_depth) &#123;&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"built_in\">Triangle2D</span>(std::vector&lt;Vec3&lt;<span class=\"type\">float</span>&gt;&gt; _pt):</span><br><span class=\"line\">        <span class=\"built_in\">Polygon2D</span>&lt;T&gt;(<span class=\"number\">3</span>, &#123;_pt[<span class=\"number\">0</span>].<span class=\"built_in\">toVec2</span>(), _pt[<span class=\"number\">1</span>].<span class=\"built_in\">toVec2</span>(), _pt[<span class=\"number\">2</span>].<span class=\"built_in\">toVec2</span>()&#125;),</span><br><span class=\"line\">        <span class=\"built_in\">depth</span>(&#123;_pt[<span class=\"number\">0</span>].z, _pt[<span class=\"number\">1</span>].z, _pt[<span class=\"number\">2</span>].z&#125;) &#123;&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\">Vec3f <span class=\"title\">baryCentric</span><span class=\"params\">(Vec2f P)</span> </span>&#123;</span><br><span class=\"line\">        Vec3f u = <span class=\"built_in\">Vec3f</span>(pt[<span class=\"number\">2</span>][<span class=\"number\">0</span>]-pt[<span class=\"number\">0</span>][<span class=\"number\">0</span>], pt[<span class=\"number\">1</span>][<span class=\"number\">0</span>]-pt[<span class=\"number\">0</span>][<span class=\"number\">0</span>], pt[<span class=\"number\">0</span>][<span class=\"number\">0</span>]-P[<span class=\"number\">0</span>])^<span class=\"built_in\">Vec3f</span>(pt[<span class=\"number\">2</span>][<span class=\"number\">1</span>]-pt[<span class=\"number\">0</span>][<span class=\"number\">1</span>], pt[<span class=\"number\">1</span>][<span class=\"number\">1</span>]-pt[<span class=\"number\">0</span>][<span class=\"number\">1</span>], pt[<span class=\"number\">0</span>][<span class=\"number\">1</span>]-P[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"comment\">/* `pts` and `P` has integer value as coordinates</span></span><br><span class=\"line\"><span class=\"comment\">           so `abs(u[2])` &lt; 1 means `u[2]` is 0, that means</span></span><br><span class=\"line\"><span class=\"comment\">           triangle is degenerate, in this case return something with negative coordinates */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (std::<span class=\"built_in\">abs</span>(u.z)&lt;<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">Vec3f</span>(<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Vec3f</span>(<span class=\"number\">1.f</span>-(u.x+u.y)/u.z, u.y/u.z, u.x/u.z);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">inInside</span><span class=\"params\">(Vec2i P)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> bc = <span class=\"built_in\">baryCentric</span>(P);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bc.x&lt;<span class=\"number\">0</span> || bc.y&lt;<span class=\"number\">0</span> || bc.z&lt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>效果如图所示：<br><img src=\"https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240426165741120-55012551.png\" alt=\"image-20240426175739547\"></p>\n<h3 id=\"Bouns-Texture-Mapping\"><a href=\"#Bouns-Texture-Mapping\" class=\"headerlink\" title=\"Bouns: Texture Mapping\"></a>Bouns: Texture Mapping</h3><p>在.obj文件中，有以“vt u v”开头的行，它们给出了一个纹理坐标数组。 </p>\n<blockquote>\n<p>The number in the middle (between the slashes) in the facet lines “f x&#x2F;x&#x2F;x x&#x2F;x&#x2F;x x&#x2F;x&#x2F;x” are the texture coordinates of this vertex of this triangle. Interpolate it inside the triangle, multiply by the width-height of the texture image and you will get the color to put in your render.</p>\n</blockquote>\n<p>tinyrender作者提供了漫反射纹理： <a href=\"..%5CDownloads%5Cafrican_head_diffuse.tga\">african_head_diffuse.tga</a> </p>\n<p>据此，我们可以给上述人脸模型添加纹理。此时，main函数中drawSolidTriangle函数里不需要再传入颜色，只需要传入intensity即可，另外需要传入当前三角形三个点的纹理坐标uv。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Iterate all points in the rectangular bounding box of triangle, draw if the point is inside</span></span><br><span class=\"line\"><span class=\"comment\">// 2024 04 26 2d-&gt;3d, texture mapping</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">drawSolidTriangle</span><span class=\"params\">(Triangle2D&lt;<span class=\"type\">float</span>&gt; tri, Vec2i* uv, TGAImage &amp;image, <span class=\"type\">float</span> intensity, <span class=\"type\">float</span> *zbuffer)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Vec2f <span class=\"title\">bboxmin</span><span class=\"params\">(image.get_width()<span class=\"number\">-1</span>,  image.get_height()<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Vec2f <span class=\"title\">bboxmax</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Vec2f <span class=\"title\">clamp</span><span class=\"params\">(image.get_width()<span class=\"number\">-1</span>, image.get_height()<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">        bboxmin.x = std::<span class=\"built_in\">max</span>((<span class=\"type\">float</span>)<span class=\"number\">0</span>, std::<span class=\"built_in\">min</span>(bboxmin.x, tri.pt[i].x));</span><br><span class=\"line\">        bboxmin.y = std::<span class=\"built_in\">max</span>((<span class=\"type\">float</span>)<span class=\"number\">0</span>, std::<span class=\"built_in\">min</span>(bboxmin.y, tri.pt[i].y));</span><br><span class=\"line\"></span><br><span class=\"line\">        bboxmax.x = std::<span class=\"built_in\">min</span>(clamp.x, std::<span class=\"built_in\">max</span>(bboxmax.x, tri.pt[i].x));</span><br><span class=\"line\">        bboxmax.y = std::<span class=\"built_in\">min</span>(clamp.y, std::<span class=\"built_in\">max</span>(bboxmax.y, tri.pt[i].y));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Vec3i P;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (P.x=bboxmin.x; P.x&lt;=bboxmax.x; P.x++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (P.y=bboxmin.y; P.y&lt;=bboxmax.y; P.y++) &#123;</span><br><span class=\"line\">            Vec3f bc  = tri.<span class=\"built_in\">baryCentric</span>(P.<span class=\"built_in\">toVec2</span>());<span class=\"comment\">//toTriangle2D().baryCentric(P);</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bc.x&lt;<span class=\"number\">0</span> || bc.y&lt;<span class=\"number\">0</span> || bc.z&lt;<span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            P.z = tri.depth[<span class=\"number\">0</span>] * bc.x + tri.depth[<span class=\"number\">1</span>] * bc.y + tri.depth[<span class=\"number\">2</span>] * bc.z;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> idx = P.x+P.y*width;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (zbuffer[idx]&lt;P.z) &#123;</span><br><span class=\"line\">                zbuffer[idx] = P.z;</span><br><span class=\"line\"></span><br><span class=\"line\">                Vec2i P_uv = uv[<span class=\"number\">0</span>] * bc.x + uv[<span class=\"number\">1</span>] * bc.y + uv[<span class=\"number\">2</span>] * bc.z;</span><br><span class=\"line\">                TGAColor color = model-&gt;<span class=\"built_in\">diffuse</span>(P_uv);</span><br><span class=\"line\">                image.<span class=\"built_in\">set</span>(P.x, P.y, color);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Vec3f <span class=\"title\">worldToScreen</span><span class=\"params\">(Vec3f v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Vec3f</span>(<span class=\"built_in\">int</span>((v.x+<span class=\"number\">1.</span>)*width/<span class=\"number\">2.</span>+<span class=\"number\">.5</span>), <span class=\"built_in\">int</span>((v.y+<span class=\"number\">1.</span>)*height/<span class=\"number\">2.</span>+<span class=\"number\">.5</span>), v.z);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">2</span>==argc) &#123;</span><br><span class=\"line\">        model = <span class=\"keyword\">new</span> <span class=\"built_in\">Model</span>(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        model = <span class=\"keyword\">new</span> <span class=\"built_in\">Model</span>(<span class=\"string\">&quot;obj/african_head.obj&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">float</span> *zbuffer = <span class=\"keyword\">new</span> <span class=\"type\">float</span>[width * height];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=width*height; i--; zbuffer[i] = -std::numeric_limits&lt;<span class=\"type\">float</span>&gt;::<span class=\"built_in\">max</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">TGAImage <span class=\"title\">image</span><span class=\"params\">(width, height, TGAImage::RGB)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Vec3f <span class=\"title\">light_dir</span><span class=\"params\">(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;model-&gt;<span class=\"built_in\">nfaces</span>(); i++) &#123;</span><br><span class=\"line\">        std::vector&lt;<span class=\"type\">int</span>&gt; face = model-&gt;<span class=\"built_in\">face</span>(i);</span><br><span class=\"line\">        Vec3f screen_coords[<span class=\"number\">3</span>];</span><br><span class=\"line\">        Vec3f world_coords[<span class=\"number\">3</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">0</span>; j&lt;<span class=\"number\">3</span>; j++) &#123;</span><br><span class=\"line\">            Vec3f v = model-&gt;<span class=\"built_in\">vert</span>(face[j]);</span><br><span class=\"line\">            <span class=\"comment\">//screen_coords[j] = Vec2i((v.x+1.)*width/2., (v.y+1.)*height/2.);</span></span><br><span class=\"line\">            world_coords[j]  = v;</span><br><span class=\"line\">            screen_coords[j] = <span class=\"built_in\">worldToScreen</span>(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Vec3f n = (world_coords[<span class=\"number\">2</span>]-world_coords[<span class=\"number\">0</span>])^(world_coords[<span class=\"number\">1</span>]-world_coords[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        n.<span class=\"built_in\">normalize</span>();</span><br><span class=\"line\">        <span class=\"type\">float</span> intensity = n*light_dir;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (intensity&gt;<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ok %d\\n&quot;</span>, ++cnt);</span><br><span class=\"line\">            Vec2i uv[<span class=\"number\">3</span>];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++) uv[j] = model-&gt;<span class=\"built_in\">uv</span>(i, j);</span><br><span class=\"line\">            <span class=\"built_in\">drawSolidTriangle</span>(<span class=\"built_in\">Triangle2D</span>&lt;<span class=\"type\">float</span>&gt;(&#123;screen_coords[<span class=\"number\">0</span>], screen_coords[<span class=\"number\">1</span>], screen_coords[<span class=\"number\">2</span>]&#125;), uv, image, intensity, zbuffer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    image.<span class=\"built_in\">flip_vertically</span>();</span><br><span class=\"line\">    image.<span class=\"built_in\">write_tga_file</span>(<span class=\"string\">&quot;output.tga&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> model;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>model.h和model.cpp需要修改以支持纹理。作者在lesson4的结尾放出了代码。</p>\n<p>效果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240426180250012-1899969424.png\" alt=\"image-20240426190246539\"></p>\n<p>这是一个平行投影的结果，损失了一部分真实感，例如，虽然耳朵旁边的头发在xoy平面上不与脸部重叠，但实际上应该被前边的皮肤遮挡，因为人眼&#x2F;相机本身是“点光源”，而不是“平行光源”，物体发出的光线最终汇聚于一点，也就是所谓的“透视”。下面将引入透视投影：</p>\n<h2 id=\"Lesson-4-Perspective-projection\"><a href=\"#Lesson-4-Perspective-projection\" class=\"headerlink\" title=\"Lesson 4: Perspective projection\"></a>Lesson 4: Perspective projection</h2><p>齐次坐标</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/f10.png\" alt=\"img\"></p>\n<p>简单变换（图来自GAMES101）</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505164930200-682100308.png\" alt=\"image-20240505174927834\"></p>\n<p>逆变换</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505165458526-1584226714.png\" alt=\"image-20240505175454080\"></p>\n<p>复合变换</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505165021790-531013206.png\" alt=\"image-20240505175019922\"></p>\n<p>实现矩阵类：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> DEFAULT_D = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Matrix</span> &#123;</span><br><span class=\"line\">    std::vector&lt;std::vector&lt;<span class=\"type\">float</span>&gt;&gt; m;</span><br><span class=\"line\">    <span class=\"type\">int</span> nrow, ncol;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Matrix</span>(<span class=\"type\">int</span> r=DEFAULT_D, <span class=\"type\">int</span> c=DEFAULT_D) :</span><br><span class=\"line\">        <span class=\"built_in\">m</span>(std::vector&lt;std::vector&lt;<span class=\"type\">float</span>&gt;&gt; (r, std::<span class=\"built_in\">vector</span>&lt;<span class=\"type\">float</span>&gt;(c, <span class=\"number\">0.f</span>))),</span><br><span class=\"line\">        <span class=\"built_in\">nrow</span>(r), <span class=\"built_in\">ncol</span>(c) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get_nrow</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> nrow; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get_ncol</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> ncol; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> Matrix <span class=\"title\">identity</span><span class=\"params\">(<span class=\"type\">int</span> dimensions)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">Matrix <span class=\"title\">E</span><span class=\"params\">(dimensions, dimensions)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; dimensions; i++)</span><br><span class=\"line\">            E[i][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> E;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::vector&lt;<span class=\"type\">float</span>&gt;&amp; <span class=\"keyword\">operator</span>[](<span class=\"type\">const</span> <span class=\"type\">int</span> i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(i &gt;= <span class=\"number\">0</span> &amp;&amp; i &lt; nrow);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">const</span> std::vector&lt;<span class=\"type\">float</span>&gt;&amp; <span class=\"keyword\">operator</span>[](<span class=\"type\">const</span> <span class=\"type\">int</span> i) <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(i &gt;= <span class=\"number\">0</span> &amp;&amp; i &lt; nrow);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Matrix <span class=\"keyword\">operator</span>*(<span class=\"type\">const</span> Matrix&amp; a) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(<span class=\"keyword\">this</span>-&gt;ncol == a.nrow);</span><br><span class=\"line\">        <span class=\"function\">Matrix <span class=\"title\">res</span><span class=\"params\">(<span class=\"keyword\">this</span>-&gt;nrow, a.ncol)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>-&gt;nrow; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; a.ncol; j++) &#123;</span><br><span class=\"line\">                res.m[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"keyword\">this</span>-&gt;ncol; k++)</span><br><span class=\"line\">                    res.m[i][j] += <span class=\"keyword\">this</span>-&gt;m[i][k]*a.m[k][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Matrix <span class=\"title\">transpose</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">Matrix <span class=\"title\">res</span><span class=\"params\">(ncol, nrow)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; ncol; i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; nrow; j++)</span><br><span class=\"line\">                res.m[i][j] = m[j][i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">Matrix <span class=\"title\">inverse</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(nrow==ncol);</span><br><span class=\"line\">        <span class=\"comment\">// augmenting the square matrix with the identity matrix of the same dimensions a =&gt; [ai]</span></span><br><span class=\"line\">        <span class=\"function\">Matrix <span class=\"title\">result</span><span class=\"params\">(nrow, ncol*<span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;nrow; i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>; j&lt;ncol; j++)</span><br><span class=\"line\">                result[i][j] = m[i][j];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;nrow; i++)</span><br><span class=\"line\">            result[i][i+ncol] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// first pass</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;nrow<span class=\"number\">-1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// normalize the first row</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=result.ncol<span class=\"number\">-1</span>; j&gt;=<span class=\"number\">0</span>; j--)</span><br><span class=\"line\">                result[i][j] /= result[i][i];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k=i+<span class=\"number\">1</span>; k&lt;nrow; k++) &#123;</span><br><span class=\"line\">                <span class=\"type\">float</span> coeff = result[k][i];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">0</span>; j&lt;result.ncol; j++) &#123;</span><br><span class=\"line\">                    result[k][j] -= result[i][j]*coeff;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// normalize the last row</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=result.ncol<span class=\"number\">-1</span>; j&gt;=nrow<span class=\"number\">-1</span>; j--)</span><br><span class=\"line\">            result[nrow<span class=\"number\">-1</span>][j] /= result[nrow<span class=\"number\">-1</span>][nrow<span class=\"number\">-1</span>];</span><br><span class=\"line\">        <span class=\"comment\">// second pass</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=nrow<span class=\"number\">-1</span>; i&gt;<span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k=i<span class=\"number\">-1</span>; k&gt;=<span class=\"number\">0</span>; k--) &#123;</span><br><span class=\"line\">                <span class=\"type\">float</span> coeff = result[k][i];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">0</span>; j&lt;result.ncol; j++) &#123;</span><br><span class=\"line\">                    result[k][j] -= result[i][j]*coeff;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// cut the identity matrix back</span></span><br><span class=\"line\">        <span class=\"function\">Matrix <span class=\"title\">truncate</span><span class=\"params\">(nrow, ncol)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;nrow; i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>; j&lt;ncol; j++)</span><br><span class=\"line\">                truncate[i][j] = result[i][j+ncol];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> truncate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> std::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(std::ostream&amp; s, Matrix&amp; m);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> std::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(std::ostream&amp; s, Matrix&amp; m) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m.nrow; i++)  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; m.ncol; j++) &#123;</span><br><span class=\"line\">            s &lt;&lt; m[i][j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j&lt;m.ncol<span class=\"number\">-1</span>) s &lt;&lt; <span class=\"string\">&quot;\\t&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        s &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>一个简单投影矩阵的推导：</p>\n<p>假设相机位置为（0,0,c）成像平面为z&#x3D;0，如图</p>\n<img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/525d3930435c3be900e4c7956edb5a1c.png\" alt=\"img\" style=\"zoom: 67%;\">\n\n\n\n<p>根据三角形相似，x’&#x2F;c &#x3D; x&#x2F;(c-z)，即有</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/f15.png\" alt=\"img\"></p>\n<p>同理</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/f16.png\" alt=\"img\"></p>\n<p>为了实现z轴方向上靠近相机的线段被拉伸，远离相机的线段被压缩，投影矩阵具有这样的形式</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/f13.png\" alt=\"img\"></p>\n<p>根据齐次坐标的结果，得到对应的投影点坐标</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/f14.png\" alt=\"img\"></p>\n<p>根据上面的结果，可知r&#x3D;-1&#x2F;c。</p>\n<p>我们可以得到一个简单情况下的投影矩阵，变换过程如图</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/f17.png\" alt=\"img\"></p>\n<p>在程序中，这个过程用如下方式实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">screen_coords[j] = <span class=\"built_in\">hc2v</span>(viewportMatrix * projectionMatrix * <span class=\"built_in\">v2hc</span>(v));</span><br></pre></td></tr></table></figure>\n\n<p>(普通坐标 → 齐次坐标)</p>\n<p>世界坐标 → (经投影变换)投影坐标 → （经视口变换)屏幕坐标 </p>\n<p>(齐次坐标 → 普通坐标)</p>\n<p>这里的坐标包含位置(x,y)和深度z,深度交给z-buffer来处理</p>\n<p>视口变化的目的是将投影区域映射到[-1,1]^3的立方体中，便于绘制</p>\n<p>相关变化的实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Transition between coordinates (vector type) and homogeneous coordinates (matrix type)</span></span><br><span class=\"line\"><span class=\"function\">Matrix <span class=\"title\">v2hc</span><span class=\"params\">(<span class=\"type\">const</span> Vec3f &amp;v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Matrix <span class=\"title\">hc</span><span class=\"params\">(<span class=\"number\">4</span>, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    hc[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = v.x;</span><br><span class=\"line\">    hc[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = v.y;</span><br><span class=\"line\">    hc[<span class=\"number\">2</span>][<span class=\"number\">0</span>] = v.z;</span><br><span class=\"line\">    hc[<span class=\"number\">3</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">Vec3f <span class=\"title\">hc2v</span><span class=\"params\">(<span class=\"type\">const</span> Matrix &amp;hc)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Vec3f</span>(hc[<span class=\"number\">0</span>][<span class=\"number\">0</span>], hc[<span class=\"number\">1</span>][<span class=\"number\">0</span>], hc[<span class=\"number\">2</span>][<span class=\"number\">0</span>]) * (<span class=\"number\">1.f</span> / hc[<span class=\"number\">3</span>][<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Vec3f <span class=\"title\">light_dir</span><span class=\"params\">(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">Vec3f <span class=\"title\">camera</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//project to z = 0</span></span><br><span class=\"line\"><span class=\"function\">Matrix <span class=\"title\">projection</span><span class=\"params\">(<span class=\"type\">const</span> Vec3f &amp;camera)</span> </span>&#123;</span><br><span class=\"line\">    Matrix m = Matrix::<span class=\"built_in\">identity</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">    m[<span class=\"number\">3</span>][<span class=\"number\">2</span>] = <span class=\"number\">-1.f</span>/camera.z;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//viewport(width / 8, height / 8, width * 0.75, height * 0.75);</span></span><br><span class=\"line\"><span class=\"comment\">//窗口边缘留出1/8空隙</span></span><br><span class=\"line\"><span class=\"function\">Matrix <span class=\"title\">viewport</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y, <span class=\"type\">int</span> w, <span class=\"type\">int</span> h)</span> </span>&#123;</span><br><span class=\"line\">    Matrix m = Matrix::<span class=\"built_in\">identity</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"comment\">//Translation</span></span><br><span class=\"line\">    m[<span class=\"number\">0</span>][<span class=\"number\">3</span>] = x + w / <span class=\"number\">2.f</span>;</span><br><span class=\"line\">    m[<span class=\"number\">1</span>][<span class=\"number\">3</span>] = y + h / <span class=\"number\">2.f</span>;</span><br><span class=\"line\">    m[<span class=\"number\">2</span>][<span class=\"number\">3</span>] = depth / <span class=\"number\">2.f</span>;</span><br><span class=\"line\">    <span class=\"comment\">//scale to [0, 1]</span></span><br><span class=\"line\">    m[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = w / <span class=\"number\">2.f</span>;</span><br><span class=\"line\">    m[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = h / <span class=\"number\">2.f</span>;</span><br><span class=\"line\">    m[<span class=\"number\">2</span>][<span class=\"number\">2</span>] = depth / <span class=\"number\">2.f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">    Matrix projectionMatrix = <span class=\"built_in\">projection</span>(camera);</span><br><span class=\"line\">    Matrix viewportMatrix = <span class=\"built_in\">viewport</span>(width / <span class=\"number\">8</span>, height / <span class=\"number\">8</span>, width * <span class=\"number\">0.75</span>, height * <span class=\"number\">0.75</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;model-&gt;<span class=\"built_in\">nfaces</span>(); i++) &#123;</span><br><span class=\"line\">        std::vector&lt;<span class=\"type\">int</span>&gt; face = model-&gt;<span class=\"built_in\">face</span>(i);</span><br><span class=\"line\">        Vec3f screen_coords[<span class=\"number\">3</span>];</span><br><span class=\"line\">        Vec3f world_coords[<span class=\"number\">3</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">0</span>; j&lt;<span class=\"number\">3</span>; j++) &#123;</span><br><span class=\"line\">            Vec3f v = model-&gt;<span class=\"built_in\">vert</span>(face[j]);</span><br><span class=\"line\">            <span class=\"comment\">//world -&gt; screen:</span></span><br><span class=\"line\">            <span class=\"comment\">//3d coordinate -&gt; homogeneous coordinates</span></span><br><span class=\"line\">            <span class=\"comment\">//-&gt; projection trans(camera at (0,0,c), project to plane z = 0)</span></span><br><span class=\"line\">            <span class=\"comment\">//-&gt; viewport trans(to make central at (w/2,h/2,d/2))</span></span><br><span class=\"line\"></span><br><span class=\"line\">            world_coords[j]  = v;</span><br><span class=\"line\">            screen_coords[j] = <span class=\"built_in\">hc2v</span>(viewportMatrix * projectionMatrix * <span class=\"built_in\">v2hc</span>(v));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Still simplified light intensity</span></span><br><span class=\"line\">        Vec3f n = (world_coords[<span class=\"number\">2</span>]-world_coords[<span class=\"number\">0</span>])^(world_coords[<span class=\"number\">1</span>]-world_coords[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        n.<span class=\"built_in\">normalize</span>();</span><br><span class=\"line\">        <span class=\"type\">float</span> intensity = n*light_dir;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (intensity&gt;<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ok %d\\n&quot;</span>, ++cnt);</span><br><span class=\"line\">            Vec2i uv[<span class=\"number\">3</span>];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++) uv[j] = model-&gt;<span class=\"built_in\">uv</span>(i, j);</span><br><span class=\"line\">            <span class=\"built_in\">drawSolidTriangle</span>(<span class=\"built_in\">Triangle2D</span>&lt;<span class=\"type\">float</span>&gt;(&#123;screen_coords[<span class=\"number\">0</span>], screen_coords[<span class=\"number\">1</span>], screen_coords[<span class=\"number\">2</span>]&#125;), uv, image, intensity, zbuffer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>效果</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240504160940105-1636523864.png\" alt=\"image-20240504170937200\"></p>\n<p>注：TinyRenderer的透视投影与GAMES101处理方式不同，GAMES101是把M[3][2]固定为1，求解M的第三行，而此处是固定第三行为（0 0 1 0），求解M[3][2]。</p>\n<p>此处并没有“近平面”的概念，认为n&#x3D;0,f&#x3D;c。</p>\n<p>下面是GAMES101给出的结果（第三行为0 0 A B）：</p>\n<img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505182227248-1392365094.png\" alt=\"image-20240505192224927\" style=\"zoom:50%;\">\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505182300021-22198105.png\" alt=\"image-20240505192257807\" style=\"zoom:50%;\">\n\n\n\n<h2 id=\"Lesson-5-Moving-the-camera\"><a href=\"#Lesson-5-Moving-the-camera\" class=\"headerlink\" title=\"Lesson 5: Moving the camera\"></a>Lesson 5: Moving the camera</h2><p>之前，我们考虑了相机在(0,0,c)，朝着-z方向看的情况。</p>\n<p>对于任意的相机位置，需要三个向量来确定：相机坐标e，相机指向的点c，向上方向向量u,如图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/b94dd4a591514fd66a91a6e4cc065644.png\" alt=\"img\"></p>\n<p>我们假定相机总是朝着-z方向看，而u朝向正y方向，据此就得到了一个新的坐标系x’y’z’，</p>\n<p>下面考虑如何将物体坐标[x,y,z]转化为新坐标系下的[x’,y’,z’]。</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f66a0139058ab1d1025dbfd8cd401389.png\" alt=\"img\"></p>\n<p>首先回顾坐标[x,y,z]的定义，它是三个正交的单位向量i,j,k前面的系数</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f00.png\" alt=\"img\"></p>\n<p>现在，我们有了新的单位向量i’,j’,k’,那么一定存在矩阵M，使得</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f01.png\" alt=\"img\"></p>\n<p>我们将OP写成OO’+O’P,与新的单位坐标建立联系：</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f02.png\" alt=\"img\"></p>\n<p>将[i’,j’,k’]用上面的式子表示，提出[i,j,k]:</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f03.png\" alt=\"img\"></p>\n<p>左边用[x,y,z]的定义式替换，就得到了[x’,y’,z’]与[x,y,z]的关系</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f04.png\" alt=\"img\"></p>\n<p>关于look at的推导，此处写的有些混乱<br>建议参阅<a href=\"https://www.zhihu.com/question/447781866\">https://www.zhihu.com/question/447781866</a> </p>\n<p>下面是个人理解：</p>\n<p>简单来说，设M是(0, 0, 0),[i,j,k]到eyepos, [i’,j’,k’]的变换矩阵<br>则M&#x3D;TR,先旋转后平移</p>\n<p>其中旋转矩阵R根据单位向量<strong>左乘</strong>该矩阵得到新单位向量，很容易得到(此处r,u,v是i’,j’,k’在原坐标系下的坐标)</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505210530096-395261047.png\" alt=\"image-20240505220527743\"></p>\n<p>而T则为原点平移到eye pos的平移矩阵 （C是eyepos)</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505211321938-1985120681.png\" alt=\"image-20240505221319762\"></p>\n<p>此为对坐标轴的变换矩阵，即，我们用M计算了<strong>新的单位向量在原坐标系下的坐标</strong>，而要得到原来单位向量在新坐标系下的坐标，显然应该左乘M的逆矩阵。这样，我们就求得了ModelView矩阵。</p>\n<p>据此，编写lookup实现modelview的计算</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vec3f light_dir = <span class=\"built_in\">Vec3f</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>).<span class=\"built_in\">normalize</span>();</span><br><span class=\"line\"><span class=\"function\">Vec3f <span class=\"title\">eye</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">Vec3f <span class=\"title\">center</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">Vec3f <span class=\"title\">up</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//Vec3f camera(0, 0, 3);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//screen_coordinate = viewport * projection * modelview * world_coordinate</span></span><br><span class=\"line\"><span class=\"function\">Matrix <span class=\"title\">lookat</span><span class=\"params\">(Vec3f eye, Vec3f center, Vec3f up)</span> </span>&#123;</span><br><span class=\"line\">    Vec3f z = (eye - center).<span class=\"built_in\">normalize</span>();</span><br><span class=\"line\">    Vec3f x = (up ^ z).<span class=\"built_in\">normalize</span>();</span><br><span class=\"line\">    Vec3f y = (z ^ x).<span class=\"built_in\">normalize</span>();</span><br><span class=\"line\">    Matrix M_inv = Matrix::<span class=\"built_in\">identity</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">    Matrix T = Matrix::<span class=\"built_in\">identity</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"comment\">//thanks https://www.zhihu.com/question/447781866</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">        M_inv[<span class=\"number\">0</span>][i] = x[i];</span><br><span class=\"line\">        M_inv[<span class=\"number\">1</span>][i] = y[i];</span><br><span class=\"line\">        M_inv[<span class=\"number\">2</span>][i] = z[i];</span><br><span class=\"line\">        T[i][<span class=\"number\">3</span>] = -eye[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> M_inv * T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Matrix <span class=\"title\">projection</span><span class=\"params\">(Vec3f eye, Vec3f center)</span> </span>&#123;</span><br><span class=\"line\">    Matrix m = Matrix::<span class=\"built_in\">identity</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">    m[<span class=\"number\">3</span>][<span class=\"number\">2</span>] = <span class=\"number\">-1.f</span> / (eye - center).<span class=\"built_in\">norm</span>();</span><br><span class=\"line\">    <span class=\"comment\">//m[3][2] = -1.f / camera.z;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">        </span><br><span class=\"line\">    Matrix modelviewMatrix = <span class=\"built_in\">lookat</span>(eye, center, up);</span><br><span class=\"line\">    Matrix projectionMatrix = <span class=\"built_in\">projection</span>(eye, center);</span><br><span class=\"line\">    Matrix viewportMatrix = <span class=\"built_in\">viewport</span>(width / <span class=\"number\">8</span>, height / <span class=\"number\">8</span>, width * <span class=\"number\">0.75</span>, height * <span class=\"number\">0.75</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    screen_coords[j] = <span class=\"built_in\">hc2v</span>(viewportMatrix * projectionMatrix * modelviewMatrix * <span class=\"built_in\">v2hc</span>(v));</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果 目前有点bug</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505215822020-1676545529.png\" alt=\"image-20240505225818988\"></p>\n<h3 id=\"Bouns：Transformation-of-normal-vectors\"><a href=\"#Bouns：Transformation-of-normal-vectors\" class=\"headerlink\" title=\"Bouns：Transformation of normal vectors\"></a>Bouns：Transformation of normal vectors</h3><p>为了处理光照，我们将模型进行坐标变换后，如果模型提供了每个面的法向量，还需要将法向量也进行变换。</p>\n<p>此处有一个结论：模型上的坐标通过矩阵M进行仿射变换，那么模型的法向量的变换矩阵是M的逆矩阵的转置。</p>\n<p>证明：考虑平面方程 Ax+By+Cz&#x3D;0，它的法向量是（A,B,C) ,写成矩阵形式为：</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f05.png\" alt=\"img\"></p>\n<p>在两者之间插入M的逆和M：</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f06.png\" alt=\"img\"></p>\n<p> 由于坐标均为列向量，把左边写成转置形式：</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f07.png\" alt=\"img\"></p>\n<p>因此，如果对坐标(x,y,z)做变换M，要满足原来的直线方程，对法向量的变换矩阵为M的逆矩阵的转置（或者转置再求逆，转置和求逆是<strong>可交换的</strong>，证明略）</p>\n<h2 id=\"Lesson-6-Shaders\"><a href=\"#Lesson-6-Shaders\" class=\"headerlink\" title=\"Lesson 6: Shaders\"></a>Lesson 6: Shaders</h2><p>本节主要分为两大部分：重构代码，实现不同的shaders。</p>\n<p>再尝试用自己之前的屎山适配Shader部分后，我放弃了，直接使用作者写的geometry。内容大部分都很直观，值得注意的是</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"type\">size_t</span> LEN,<span class=\"type\">size_t</span> DIM,<span class=\"keyword\">typename</span> T&gt; vec&lt;LEN,T&gt; <span class=\"title\">embed</span><span class=\"params\">(<span class=\"type\">const</span> vec&lt;DIM,T&gt; &amp;v, T fill=<span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    vec&lt;LEN,T&gt; ret;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i=LEN; i--; ret[i]=(i&lt;DIM?v[i]:fill));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"type\">size_t</span> LEN,<span class=\"type\">size_t</span> DIM, <span class=\"keyword\">typename</span> T&gt; vec&lt;LEN,T&gt; <span class=\"title\">proj</span><span class=\"params\">(<span class=\"type\">const</span> vec&lt;DIM,T&gt; &amp;v)</span> </span>&#123;</span><br><span class=\"line\">    vec&lt;LEN,T&gt; ret;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i=LEN; i--; ret[i]=v[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这两个模板的作用，分别是将低维向量拓展到高维（不足补1）、高维向量投影到低维（截取前LEN个坐标），在涉及其次坐标和普通坐标的转换时多次用到。</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/06-shaders/OpenGL-2.0-Programmable-Shader-Pipeline.png\" alt=\"img\"></p>\n<p>Shader包含顶点着色和片元着色两个部件，将其抽离出来，可以使得我们通过修改Shader即可实现各种不同的渲染效果，而无需改动其他代码。</p>\n<p>在<code>gl.h</code>中，定义Shader的基本结构。不同Shader的通过继承基类重写两个虚函数来实现</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IShader</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">IShader</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> Vec4f  <span class=\"title\">vertex</span><span class=\"params\">(<span class=\"type\">int</span> iface, <span class=\"type\">int</span> nthvert)</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">bool</span> <span class=\"title\">fragment</span><span class=\"params\">(Vec3f bar, TGAColor &amp;color)</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>其中，iface是面的编号，而nthvert是顶点编号（对于三角形为0,1,2）。</p>\n<p>例如，一个简单的GouraudShader，vertex通过顶点法向量与光照的点乘计算三角形每个顶点的光照，而fragment通过重心坐标插值计算三角形区域中所有像素的颜色。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">GouraudShader</span> : <span class=\"keyword\">public</span> IShader &#123;</span><br><span class=\"line\">    Vec3f varying_intensity;</span><br><span class=\"line\">    <span class=\"comment\">//顶点着色</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> Vec4f <span class=\"title\">vertex</span><span class=\"params\">(<span class=\"type\">int</span> iface, <span class=\"type\">int</span> nthvert)</span> </span>&#123;</span><br><span class=\"line\">        Vec4f glVertex = <span class=\"built_in\">embed</span>&lt;<span class=\"number\">4</span>&gt;(model-&gt;<span class=\"built_in\">vert</span>(iface, nthvert));</span><br><span class=\"line\">        glVertex = Viewport * Projection * ModelView * glVertex;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        varying_intensity[nthvert] = std::<span class=\"built_in\">max</span>(<span class=\"number\">0.f</span>, model-&gt;<span class=\"built_in\">normal</span>(iface, nthvert) * light_dir);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> glVertex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//片段着色 用于drawTriangle </span></span><br><span class=\"line\">    <span class=\"comment\">//这里的bar即baryCentric</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">bool</span> <span class=\"title\">fragment</span><span class=\"params\">(Vec3f bar, TGAColor &amp;color)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">float</span> intensity = varying_intensity * bar;</span><br><span class=\"line\">        color = <span class=\"built_in\">TGAColor</span>(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>) * intensity;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t<span class=\"comment\">//返回值表示是否丢弃</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//in main for every vertex</span></span><br><span class=\"line\">GouraudShader shader;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;model-&gt;<span class=\"built_in\">nfaces</span>(); i++) &#123;</span><br><span class=\"line\">    std::vector&lt;<span class=\"type\">int</span>&gt; face = model-&gt;<span class=\"built_in\">face</span>(i);</span><br><span class=\"line\">    Vec3f world_coords[<span class=\"number\">3</span>];</span><br><span class=\"line\">    Vec4f screen_coords[<span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++) &#123;</span><br><span class=\"line\">        Vec3f v = model-&gt;<span class=\"built_in\">vert</span>(face[j]);</span><br><span class=\"line\">        world_coords[j] = v;</span><br><span class=\"line\">        screen_coords[j] = shader.<span class=\"built_in\">vertex</span>(i, j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">drawTriangle</span>(screen_coords, shader, image, zbuffer);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// in drawTriangle, for every pixel</span></span><br><span class=\"line\">...</span><br><span class=\"line\">TGAColor color;</span><br><span class=\"line\"><span class=\"type\">bool</span> discard = shader.<span class=\"built_in\">fragment</span>(bc, color);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!discard) &#123;</span><br><span class=\"line\">    zbuffer.<span class=\"built_in\">set</span>(P.x, P.y, <span class=\"built_in\">TGAColor</span>(frag_depth));</span><br><span class=\"line\">    image.<span class=\"built_in\">set</span>(P.x, P.y, color);</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>所得的效果如图</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512201920094-1588430460.png\" alt=\"image-20240512211917138\"></p>\n<p>我们可以轻松地修改着色器，实现不同的渲染效果，如将颜色设置为6个梯度的橙色：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">bool</span> <span class=\"title\">fragment</span><span class=\"params\">(Vec3f bar, TGAColor &amp;color)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">float</span> intensity = varying_intensity*bar;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (intensity&gt;<span class=\"number\">.85</span>) intensity = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (intensity&gt;<span class=\"number\">.60</span>) intensity = <span class=\"number\">.80</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (intensity&gt;<span class=\"number\">.45</span>) intensity = <span class=\"number\">.60</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (intensity&gt;<span class=\"number\">.30</span>) intensity = <span class=\"number\">.45</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (intensity&gt;<span class=\"number\">.15</span>) intensity = <span class=\"number\">.30</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> intensity = <span class=\"number\">0</span>;</span><br><span class=\"line\">    color = <span class=\"built_in\">TGAColor</span>(<span class=\"number\">255</span>, <span class=\"number\">155</span>, <span class=\"number\">0</span>)*intensity;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512202546531-812190877.png\" alt=\"image-20240512212544885\"></p>\n<p><strong>纹理着色器</strong></p>\n<p>接下来，我们可以实现漫反射纹理。只需要修改Shader添加纹理映射项即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">TextureShader</span> : <span class=\"keyword\">public</span> IShader &#123;</span><br><span class=\"line\">    Vec3f          varying_intensity; <span class=\"comment\">// written by vertex shader, read by fragment shader</span></span><br><span class=\"line\">    mat&lt;<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"type\">float</span>&gt; varying_uv;        <span class=\"comment\">// same as above</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> Vec4f <span class=\"title\">vertex</span><span class=\"params\">(<span class=\"type\">int</span> iface, <span class=\"type\">int</span> nthvert)</span> </span>&#123;</span><br><span class=\"line\">        varying_uv.<span class=\"built_in\">set_col</span>(nthvert, model-&gt;<span class=\"built_in\">uv</span>(iface, nthvert));</span><br><span class=\"line\">        varying_intensity[nthvert] = std::<span class=\"built_in\">max</span>(<span class=\"number\">0.f</span>, model-&gt;<span class=\"built_in\">normal</span>(iface, nthvert)*light_dir); <span class=\"comment\">// get diffuse lighting intensity</span></span><br><span class=\"line\">        Vec4f gl_Vertex = <span class=\"built_in\">embed</span>&lt;<span class=\"number\">4</span>&gt;(model-&gt;<span class=\"built_in\">vert</span>(iface, nthvert)); <span class=\"comment\">// read the vertex from .obj file</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Viewport*Projection*ModelView*gl_Vertex; <span class=\"comment\">// transform it to screen coordinates</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">bool</span> <span class=\"title\">fragment</span><span class=\"params\">(Vec3f bar, TGAColor &amp;color)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">float</span> intensity = varying_intensity*bar;   <span class=\"comment\">// interpolate intensity for the current pixel</span></span><br><span class=\"line\">        Vec2f uv = varying_uv*bar;                 <span class=\"comment\">// interpolate uv for the current pixel</span></span><br><span class=\"line\">        color = model-&gt;<span class=\"built_in\">diffuse</span>(uv)*intensity;      <span class=\"comment\">// well duh</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;                              <span class=\"comment\">// no, we do not discard this pixel</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>效果</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512202811146-1791754725.png\" alt=\"image-20240512212807641\"></p>\n<p><strong>法线着色器</strong></p>\n<p>事实上，纹理图像中不止可以储存颜色，还可以储存法线方向、温度等等信息。通过纹理给出每个点的法线方向，就能实现表明的凹凸起伏效果。此时，纹理图像的RGB值不再储存颜色，而是用于储存法线，如下图。</p>\n<img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/06-shaders/african_head_nm.png\" alt=\"img\" style=\"zoom:50%;\">\n\n<p>上节课的结尾，我们提到了“模型上的坐标通过矩阵M进行仿射变换，那么模型的法向量的变换矩阵是M的逆矩阵的转置”这一结论，根据这个结论，就可以直接在顶点着色器中分别计算顶点和法向量经过投影后的结构</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">NormalShader</span> : <span class=\"keyword\">public</span> IShader &#123;</span><br><span class=\"line\">    mat&lt;<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"type\">float</span>&gt; varying_uv;  <span class=\"comment\">// same as above</span></span><br><span class=\"line\">    mat&lt;<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"type\">float</span>&gt; uniform_M;   <span class=\"comment\">//  Projection*ModelView</span></span><br><span class=\"line\">    mat&lt;<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"type\">float</span>&gt; uniform_MIT; <span class=\"comment\">// (Projection*ModelView).invert_transpose()</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> Vec4f <span class=\"title\">vertex</span><span class=\"params\">(<span class=\"type\">int</span> iface, <span class=\"type\">int</span> nthvert)</span> </span>&#123;</span><br><span class=\"line\">        varying_uv.<span class=\"built_in\">set_col</span>(nthvert, model-&gt;<span class=\"built_in\">uv</span>(iface, nthvert));</span><br><span class=\"line\">        Vec4f gl_Vertex = <span class=\"built_in\">embed</span>&lt;<span class=\"number\">4</span>&gt;(model-&gt;<span class=\"built_in\">vert</span>(iface, nthvert)); <span class=\"comment\">// read the vertex from .obj file</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Viewport*Projection*ModelView*gl_Vertex; <span class=\"comment\">// transform it to screen coordinates</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">bool</span> <span class=\"title\">fragment</span><span class=\"params\">(Vec3f bar, TGAColor &amp;color)</span> </span>&#123;</span><br><span class=\"line\">        Vec2f uv = varying_uv*bar;                 <span class=\"comment\">// interpolate uv for the current pixel</span></span><br><span class=\"line\">        Vec3f n = <span class=\"built_in\">proj</span>&lt;<span class=\"number\">3</span>&gt;(uniform_MIT*<span class=\"built_in\">embed</span>&lt;<span class=\"number\">4</span>&gt;(model-&gt;<span class=\"built_in\">normal</span>(uv))).<span class=\"built_in\">normalize</span>();</span><br><span class=\"line\">        Vec3f l = <span class=\"built_in\">proj</span>&lt;<span class=\"number\">3</span>&gt;(uniform_M  *<span class=\"built_in\">embed</span>&lt;<span class=\"number\">4</span>&gt;(light_dir        )).<span class=\"built_in\">normalize</span>();</span><br><span class=\"line\">        <span class=\"type\">float</span> intensity = std::<span class=\"built_in\">max</span>(<span class=\"number\">0.f</span>, n*l);</span><br><span class=\"line\">        color = model-&gt;<span class=\"built_in\">diffuse</span>(uv)*intensity;      <span class=\"comment\">// well duh</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;                              <span class=\"comment\">// no, we do not discard this pixel</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512204303617-1448246807.png\" alt=\"image-20240512214259167\"></p>\n<p><strong>Phone模型着色器</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/06-shaders/e3720a5dfedc49edb0bf70f8bc64204a.png\" alt=\"img\"></p>\n<p>根据Phone光照模型，物体的真实光照可以近似为环境光+漫反射+高光。据此，我们可以进一步得出更加真实的着色器。</p>\n<p>高光的计算如图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/06-shaders/d58cd3bbab46463e87b782a12a147fbb.png\" alt=\"img\"></p>\n<p>已知物体表明法向量为n，入射光为l，两者夹角为a，假设所有向量都被归一化，设反射光为r，则有l+r&#x3D;2n cosa ，可求得反射光r&#x3D;2n cosa - l &#x3D; 2n(n·l)-l。反射光</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">PhoneShader</span> : <span class=\"keyword\">public</span> IShader &#123;</span><br><span class=\"line\">    mat&lt;<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"type\">float</span>&gt; varying_uv;  <span class=\"comment\">// same as above</span></span><br><span class=\"line\">    mat&lt;<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"type\">float</span>&gt; uniform_M;   <span class=\"comment\">//  Projection*ModelView</span></span><br><span class=\"line\">    mat&lt;<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"type\">float</span>&gt; uniform_MIT; <span class=\"comment\">// (Projection*ModelView).invert_transpose()</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> Vec4f <span class=\"title\">vertex</span><span class=\"params\">(<span class=\"type\">int</span> iface, <span class=\"type\">int</span> nthvert)</span> </span>&#123;</span><br><span class=\"line\">        varying_uv.<span class=\"built_in\">set_col</span>(nthvert, model-&gt;<span class=\"built_in\">uv</span>(iface, nthvert));</span><br><span class=\"line\">        Vec4f gl_Vertex = <span class=\"built_in\">embed</span>&lt;<span class=\"number\">4</span>&gt;(model-&gt;<span class=\"built_in\">vert</span>(iface, nthvert)); <span class=\"comment\">// read the vertex from .obj file</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Viewport*Projection*ModelView*gl_Vertex; <span class=\"comment\">// transform it to screen coordinates</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">bool</span> <span class=\"title\">fragment</span><span class=\"params\">(Vec3f bar, TGAColor &amp;color)</span> </span>&#123;</span><br><span class=\"line\">        Vec2f uv = varying_uv*bar;</span><br><span class=\"line\">        Vec3f n = <span class=\"built_in\">proj</span>&lt;<span class=\"number\">3</span>&gt;(uniform_MIT*<span class=\"built_in\">embed</span>&lt;<span class=\"number\">4</span>&gt;(model-&gt;<span class=\"built_in\">normal</span>(uv))).<span class=\"built_in\">normalize</span>();</span><br><span class=\"line\">        Vec3f l = <span class=\"built_in\">proj</span>&lt;<span class=\"number\">3</span>&gt;(uniform_M  *<span class=\"built_in\">embed</span>&lt;<span class=\"number\">4</span>&gt;(light_dir        )).<span class=\"built_in\">normalize</span>();</span><br><span class=\"line\">        Vec3f r = (n*(n*l*<span class=\"number\">2.f</span>) - l).<span class=\"built_in\">normalize</span>();   <span class=\"comment\">// reflected light</span></span><br><span class=\"line\">        <span class=\"type\">float</span> spec = <span class=\"built_in\">pow</span>(std::<span class=\"built_in\">max</span>(r.z, <span class=\"number\">0.0f</span>), model-&gt;<span class=\"built_in\">specular</span>(uv));</span><br><span class=\"line\">        <span class=\"type\">float</span> diff = std::<span class=\"built_in\">max</span>(<span class=\"number\">0.f</span>, n*l);</span><br><span class=\"line\">        TGAColor c = model-&gt;<span class=\"built_in\">diffuse</span>(uv);</span><br><span class=\"line\">        color = c;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">3</span>; i++) color[i] = std::<span class=\"built_in\">min</span>&lt;<span class=\"type\">float</span>&gt;(<span class=\"number\">5</span> + c[i]*(diff + <span class=\"number\">.6</span>*spec), <span class=\"number\">255</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>按照环境光5+自身颜色*(1漫反射+0.6高光)，得到的效果如下</p>\n<img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512210513789-778169408.png\" alt=\"image-20240512220509696\" style=\"zoom:67%;\">\n\n<p>我们可以试试其他的配比系数，如<code>10 + c[i]*(2 * diff + 1.5*spec</code></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512211926468-1109783721.png\" alt=\"image-20240512221918507\"></p>\n<p>另外，我们还可以到master分支找其他的模型，尝试渲染效果</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512211511558-935691911.png\" alt=\"image-20240512221509093\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512212417887-506051993.png\" alt=\"image-20240512222416047\"></p>\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n<h2 id=\"TinyRender学习笔记\"><a href=\"#TinyRender学习笔记\" class=\"headerlink\" title=\"TinyRender学习笔记\"></a>TinyRender学习笔记</h2><p>通过手写软光栅渲染器加深对计算机图形学基本原理的理解，并练习C++面向对象程序设计。</p>\n<p>该项目主要参考<a href=\"https://github.com/ssloy/tinyrenderer/wiki\">Home · ssloy&#x2F;tinyrenderer Wiki (github.com)</a>编写，使用CMake构建</p>\n<p>可以浏览我的历史commit，找到不同进度时提交的代码。</p>\n<p>本项目涉及的几乎所有的图形学知识都在GAMES101课程中出现过，推荐将GAMES101作为前置课程，或配合GAMES101的进度一起学习。</p>\n<h2 id=\"Lesson-0-Getting-Started\"><a href=\"#Lesson-0-Getting-Started\" class=\"headerlink\" title=\"Lesson 0 Getting Started\"></a>Lesson 0 Getting Started</h2><h3 id=\"Using-TGA-image-format\"><a href=\"#Using-TGA-image-format\" class=\"headerlink\" title=\"Using TGA image format\"></a>Using TGA image format</h3><p>使用这个基本框架来生成TGA格式图像：<br><a href=\"https://github.com/ssloy/tinyrenderer/tree/909fe20934ba5334144d2c748805690a1fa4c89f\">ssloy&#x2F;tinyrenderer at 909fe20934ba5334144d2c748805690a1fa4c89f (github.com)</a></p>\n<p>只需 <code>#include &quot;tgaimage.h&quot;</code> ，并在编译时链接tgaimage.cpp即可。</p>\n<p>例：在屏幕上将像素(52,41)设置为红色</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;tgaimage.h&quot;</span></span></span><br><span class=\"line\"><span class=\"comment\">//Set color with RGB</span></span><br><span class=\"line\"><span class=\"type\">const</span> TGAColor white = <span class=\"built_in\">TGAColor</span>(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>);</span><br><span class=\"line\"><span class=\"type\">const</span> TGAColor red   = <span class=\"built_in\">TGAColor</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>,   <span class=\"number\">0</span>,   <span class=\"number\">255</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//Set image size</span></span><br><span class=\"line\">        <span class=\"function\">TGAImage <span class=\"title\">image</span><span class=\"params\">(<span class=\"number\">100</span>, <span class=\"number\">100</span>, TGAImage::RGB)</span></span>;</span><br><span class=\"line\">    \t<span class=\"comment\">//Set pixel color</span></span><br><span class=\"line\">        image.<span class=\"built_in\">set</span>(<span class=\"number\">52</span>, <span class=\"number\">41</span>, red);</span><br><span class=\"line\">        <span class=\"comment\">//To have the origin at the left bottom corner of the image</span></span><br><span class=\"line\">        image.<span class=\"built_in\">flip_vertically</span>(); </span><br><span class=\"line\">        image.<span class=\"built_in\">write_tga_file</span>(<span class=\"string\">&quot;output.tga&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>个人推荐的环境：Clion + CMake。（因为VsCode CMake调试功能实在搞不懂&#x3D;.&#x3D;)</p>\n<p>涉及导入模型，需要将工作目录设置为工程文件夹</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505220018544-333214793.png\" alt=\"image-20240505230016266\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505220047826-450326712.png\" alt=\"image-20240505230043985\"></p>\n<p>但我的Clion存在tga图像无法加载的bug。在设置-&gt;编辑器-&gt;文件类型中去掉.tga，然后选择用本地程序打开即可。</p>\n<h2 id=\"Lesson-1-Bresenham’s-Line-Drawing-Algorithm\"><a href=\"#Lesson-1-Bresenham’s-Line-Drawing-Algorithm\" class=\"headerlink\" title=\"Lesson 1 Bresenham’s Line Drawing Algorithm\"></a>Lesson 1 Bresenham’s Line Drawing Algorithm</h2><p>使用Bresenham算法绘制线段。</p>\n<p>原理：<a href=\"https://en.wikipedia.org/wiki/Bresenham's_line_algorithm\">https://en.wikipedia.org/wiki/Bresenham&#39;s_line_algorithm</a></p>\n<p>实现参考：<a href=\"https://rosettacode.org/wiki/Bitmap/Bresenham%27s_line_algorithm#C++\">https://rosettacode.org/wiki/Bitmap/Bresenham%27s_line_algorithm#C++</a></p>\n<p>建议绘制斜率小于-1，-1到0,0到1,大于1，以及水平和垂直的直线来检验算法正确性。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;tgaimage.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> TGAColor white = <span class=\"built_in\">TGAColor</span>(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>);</span><br><span class=\"line\"><span class=\"type\">const</span> TGAColor red = <span class=\"built_in\">TGAColor</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>);</span><br><span class=\"line\"><span class=\"type\">const</span> TGAColor blue = <span class=\"built_in\">TGAColor</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">line</span><span class=\"params\">(<span class=\"type\">int</span> x1, <span class=\"type\">int</span> y1, <span class=\"type\">int</span> x2, <span class=\"type\">int</span> y2, TGAImage&amp; image, TGAColor color)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Ensure that slope in (0, 1)</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">bool</span> steep = (std::<span class=\"built_in\">abs</span>(y2 - y1) &gt; std::<span class=\"built_in\">abs</span>(x2 - x1));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (steep) &#123;</span><br><span class=\"line\">        std::<span class=\"built_in\">swap</span>(x1, y1);</span><br><span class=\"line\">        std::<span class=\"built_in\">swap</span>(x2, y2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x1 &gt; x2) &#123;</span><br><span class=\"line\">        std::<span class=\"built_in\">swap</span>(x1, x2);</span><br><span class=\"line\">        std::<span class=\"built_in\">swap</span>(y1, y2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">float</span> dx = x2 - x1;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">float</span> dy = <span class=\"built_in\">fabs</span>(y2 - y1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">float</span> error = dx / <span class=\"number\">2.0f</span>;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> ystep = (y1 &lt; y2) ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> y = (<span class=\"type\">int</span>)y1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> maxX = (<span class=\"type\">int</span>)x2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = (<span class=\"type\">int</span>)x1; x &lt;= maxX; x++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (steep) &#123;</span><br><span class=\"line\">            image.<span class=\"built_in\">set</span>(y, x, color);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            image.<span class=\"built_in\">set</span>(x, y, color);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error -= dy;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (error &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            y += ystep;</span><br><span class=\"line\">            error += dx;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">TGAImage <span class=\"title\">image</span><span class=\"params\">(<span class=\"number\">100</span>, <span class=\"number\">100</span>, TGAImage::RGB)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">line</span>(<span class=\"number\">13</span>, <span class=\"number\">20</span>, <span class=\"number\">80</span>, <span class=\"number\">40</span>, image, red);</span><br><span class=\"line\">    <span class=\"built_in\">line</span>(<span class=\"number\">55</span>, <span class=\"number\">33</span>, <span class=\"number\">22</span>, <span class=\"number\">66</span>, image, blue);</span><br><span class=\"line\">    <span class=\"built_in\">line</span>(<span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">66</span>, <span class=\"number\">66</span>, image, white);</span><br><span class=\"line\">    <span class=\"built_in\">line</span>(<span class=\"number\">44</span>, <span class=\"number\">20</span>, <span class=\"number\">44</span>, <span class=\"number\">80</span>, image, white);</span><br><span class=\"line\">    <span class=\"built_in\">line</span>(<span class=\"number\">20</span>, <span class=\"number\">44</span>, <span class=\"number\">80</span>, <span class=\"number\">44</span>, image, white);</span><br><span class=\"line\">    image.<span class=\"built_in\">flip_vertically</span>();</span><br><span class=\"line\">    image.<span class=\"built_in\">write_tga_file</span>(<span class=\"string\">&quot;output.tga&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>效果</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240419173705372-1981687689.png\" alt=\"image-20240419183705501\"></p>\n<h2 id=\"Lesson-2-Triangle-rasterization-and-back-face-culling\"><a href=\"#Lesson-2-Triangle-rasterization-and-back-face-culling\" class=\"headerlink\" title=\"Lesson 2: Triangle rasterization and back face culling\"></a>Lesson 2: Triangle rasterization and back face culling</h2><p>三维物体模型通常以三角形为基础。为了方便表示点、向量、多边形，写geometry.h。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">t</span>&gt; <span class=\"keyword\">struct</span> <span class=\"title class_\">Vec2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> &#123;t u, v;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> &#123;t x, y;&#125;;</span><br><span class=\"line\">        t raw[<span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">Vec2</span>() : <span class=\"built_in\">u</span>(<span class=\"number\">0</span>), <span class=\"built_in\">v</span>(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">Vec2</span>(t _u, t _v) : <span class=\"built_in\">u</span>(_u),<span class=\"built_in\">v</span>(_v) &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> Vec2&lt;t&gt; <span class=\"keyword\">operator</span> +(<span class=\"type\">const</span> Vec2&lt;t&gt; &amp;V) <span class=\"type\">const</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Vec2</span>&lt;t&gt;(u+V.u, v+V.v); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> Vec2&lt;t&gt; <span class=\"keyword\">operator</span> -(<span class=\"type\">const</span> Vec2&lt;t&gt; &amp;V) <span class=\"type\">const</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Vec2</span>&lt;t&gt;(u-V.u, v-V.v); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> Vec2&lt;t&gt; <span class=\"keyword\">operator</span> *(<span class=\"type\">float</span> f)          <span class=\"type\">const</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Vec2</span>&lt;t&gt;(u*f, v*f); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> &gt; <span class=\"keyword\">friend</span> std::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(std::ostream&amp; s, Vec2&lt;t&gt;&amp; v);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">t</span>&gt; <span class=\"keyword\">struct</span> <span class=\"title class_\">Vec3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> &#123;t x, y, z;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> &#123; t ivert, iuv, inorm; &#125;;</span><br><span class=\"line\">        t raw[<span class=\"number\">3</span>];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">Vec3</span>() : <span class=\"built_in\">x</span>(<span class=\"number\">0</span>), <span class=\"built_in\">y</span>(<span class=\"number\">0</span>), <span class=\"built_in\">z</span>(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">Vec3</span>(t _x, t _y, t _z) : <span class=\"built_in\">x</span>(_x),<span class=\"built_in\">y</span>(_y),<span class=\"built_in\">z</span>(_z) &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> Vec3&lt;t&gt; <span class=\"keyword\">operator</span> ^(<span class=\"type\">const</span> Vec3&lt;t&gt; &amp;v) <span class=\"type\">const</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Vec3</span>&lt;t&gt;(y*v.z-z*v.y, z*v.x-x*v.z, x*v.y-y*v.x); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> Vec3&lt;t&gt; <span class=\"keyword\">operator</span> +(<span class=\"type\">const</span> Vec3&lt;t&gt; &amp;v) <span class=\"type\">const</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Vec3</span>&lt;t&gt;(x+v.x, y+v.y, z+v.z); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> Vec3&lt;t&gt; <span class=\"keyword\">operator</span> -(<span class=\"type\">const</span> Vec3&lt;t&gt; &amp;v) <span class=\"type\">const</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Vec3</span>&lt;t&gt;(x-v.x, y-v.y, z-v.z); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> Vec3&lt;t&gt; <span class=\"keyword\">operator</span> *(<span class=\"type\">float</span> f)          <span class=\"type\">const</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Vec3</span>&lt;t&gt;(x*f, y*f, z*f); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> t       <span class=\"keyword\">operator</span> *(<span class=\"type\">const</span> Vec3&lt;t&gt; &amp;v) <span class=\"type\">const</span> &#123; <span class=\"keyword\">return</span> x*v.x + y*v.y + z*v.z; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">float</span> <span class=\"title\">norm</span> <span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> std::<span class=\"built_in\">sqrt</span>(x*x+y*y+z*z); &#125;</span><br><span class=\"line\">    <span class=\"function\">Vec3&lt;t&gt; &amp; <span class=\"title\">normalize</span><span class=\"params\">(t l=<span class=\"number\">1</span>)</span> </span>&#123; *<span class=\"keyword\">this</span> = (*<span class=\"keyword\">this</span>)*(l/<span class=\"built_in\">norm</span>()); <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> &gt; <span class=\"keyword\">friend</span> std::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(std::ostream&amp; s, Vec3&lt;t&gt;&amp; v);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Vec2&lt;<span class=\"type\">float</span>&gt; Vec2f;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Vec2&lt;<span class=\"type\">int</span>&gt;   Vec2i;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Vec3&lt;<span class=\"type\">float</span>&gt; Vec3f;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Vec3&lt;<span class=\"type\">int</span>&gt;   Vec3i;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">t</span>&gt; std::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(std::ostream&amp; s, Vec2&lt;t&gt;&amp; v) &#123;</span><br><span class=\"line\">    s &lt;&lt; <span class=\"string\">&quot;(&quot;</span> &lt;&lt; v.x &lt;&lt; <span class=\"string\">&quot;, &quot;</span> &lt;&lt; v.y &lt;&lt; <span class=\"string\">&quot;)\\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">t</span>&gt; std::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(std::ostream&amp; s, Vec3&lt;t&gt;&amp; v) &#123;</span><br><span class=\"line\">    s &lt;&lt; <span class=\"string\">&quot;(&quot;</span> &lt;&lt; v.x &lt;&lt; <span class=\"string\">&quot;, &quot;</span> &lt;&lt; v.y &lt;&lt; <span class=\"string\">&quot;, &quot;</span> &lt;&lt; v.z &lt;&lt; <span class=\"string\">&quot;)\\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如何画出实心的三角形？一般来说，有扫描线和边界函数两种算法。</p>\n<p>对于多线程的CPU,采用边界函数法更为高效：先找到三角形的矩形包围盒，再逐点判断是否在三角形中</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">triangle</span>(vec2 points[<span class=\"number\">3</span>]) &#123; </span><br><span class=\"line\">    vec2 bbox[<span class=\"number\">2</span>] = <span class=\"built_in\">find_bounding_box</span>(points); </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (each pixel in the bounding box) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">inside</span>(points, pixel)) &#123; </span><br><span class=\"line\">            <span class=\"built_in\">put_pixel</span>(pixel); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因此，问题变成了给定三角形的三个点，如何判断点是否在三角形内部</p>\n<p>一种最好的办法是，计算给定点关于给定三角形的重心坐标（或者叫面积坐标）。</p>\n<p>维基百科：<a href=\"https://zh.wikipedia.org/wiki/%E9%87%8D%E5%BF%83%E5%9D%90%E6%A0%87\">https://zh.wikipedia.org/wiki/%E9%87%8D%E5%BF%83%E5%9D%90%E6%A0%87</a></p>\n<p>简单来说，它表示一个点所对的三条边形成的三角形面积比。如果点在三角形外部，则有一个维度是负的。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240419175823218-1822502417.png\" alt=\"image-20240419185822971\"></p>\n<p>由于tinyrenderer的作者写得有些丑陋，我在geometry.h里直接加入了polygon和triangle类，来实现重心坐标计算和点在三角形内的检测</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Polygon2D</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    std::vector&lt;Vec2&lt;T&gt;&gt; pt;</span><br><span class=\"line\">    <span class=\"built_in\">Polygon2D</span>(<span class=\"type\">int</span> _n, std::vector&lt;Vec2&lt;T&gt;&gt; _pt): <span class=\"built_in\">n</span>(_n), <span class=\"built_in\">pt</span>(_pt) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Triangle2D</span>: <span class=\"keyword\">public</span> Polygon2D&lt;T&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">using</span> Polygon2D&lt;T&gt;::pt;</span><br><span class=\"line\">    <span class=\"built_in\">Triangle2D</span>(std::vector&lt;Vec2&lt;T&gt;&gt; _pt): <span class=\"built_in\">Polygon2D</span>&lt;T&gt;(<span class=\"number\">3</span>, _pt) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\">Vec3f <span class=\"title\">baryCentric</span><span class=\"params\">(Vec2i P)</span> </span>&#123;</span><br><span class=\"line\">        Vec3f u = <span class=\"built_in\">Vec3f</span>(pt[<span class=\"number\">2</span>][<span class=\"number\">0</span>]-pt[<span class=\"number\">0</span>][<span class=\"number\">0</span>], pt[<span class=\"number\">1</span>][<span class=\"number\">0</span>]-pt[<span class=\"number\">0</span>][<span class=\"number\">0</span>], pt[<span class=\"number\">0</span>][<span class=\"number\">0</span>]-P[<span class=\"number\">0</span>])^<span class=\"built_in\">Vec3f</span>(pt[<span class=\"number\">2</span>][<span class=\"number\">1</span>]-pt[<span class=\"number\">0</span>][<span class=\"number\">1</span>], pt[<span class=\"number\">1</span>][<span class=\"number\">1</span>]-pt[<span class=\"number\">0</span>][<span class=\"number\">1</span>], pt[<span class=\"number\">0</span>][<span class=\"number\">1</span>]-P[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"comment\">/* `pts` and `P` has integer value as coordinates</span></span><br><span class=\"line\"><span class=\"comment\">           so `abs(u[2])` &lt; 1 means `u[2]` is 0, that means</span></span><br><span class=\"line\"><span class=\"comment\">           triangle is degenerate, in this case return something with negative coordinates */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (std::<span class=\"built_in\">abs</span>(u.z)&lt;<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">Vec3f</span>(<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Vec3f</span>(<span class=\"number\">1.f</span>-(u.x+u.y)/u.z, u.y/u.z, u.x/u.z);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">inInside</span><span class=\"params\">(Vec2i P)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> bc = <span class=\"built_in\">baryCentric</span>(P);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bc.x&lt;<span class=\"number\">0</span> || bc.y&lt;<span class=\"number\">0</span> || bc.z&lt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在main.cpp里绘制实心三角形</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Iterate all points in the rectangular bounding box of triangle, draw if the point is inside</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">drawSolidTriangle</span><span class=\"params\">(Triangle2D&lt;<span class=\"type\">int</span>&gt; tri, TGAImage &amp;image, TGAColor color)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Vec2i <span class=\"title\">bboxmin</span><span class=\"params\">(image.get_width()<span class=\"number\">-1</span>,  image.get_height()<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Vec2i <span class=\"title\">bboxmax</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Vec2i <span class=\"title\">clamp</span><span class=\"params\">(image.get_width()<span class=\"number\">-1</span>, image.get_height()<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">        bboxmin.x = std::<span class=\"built_in\">max</span>(<span class=\"number\">0</span>, std::<span class=\"built_in\">min</span>(bboxmin.x, tri.pt[i].x));</span><br><span class=\"line\">        bboxmin.y = std::<span class=\"built_in\">max</span>(<span class=\"number\">0</span>, std::<span class=\"built_in\">min</span>(bboxmin.y, tri.pt[i].y));</span><br><span class=\"line\"></span><br><span class=\"line\">        bboxmax.x = std::<span class=\"built_in\">min</span>(clamp.x, std::<span class=\"built_in\">max</span>(bboxmax.x, tri.pt[i].x));</span><br><span class=\"line\">        bboxmax.y = std::<span class=\"built_in\">min</span>(clamp.y, std::<span class=\"built_in\">max</span>(bboxmax.y, tri.pt[i].y));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Vec2i P;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (P.x=bboxmin.x; P.x&lt;=bboxmax.x; P.x++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (P.y=bboxmin.y; P.y&lt;=bboxmax.y; P.y++) &#123;</span><br><span class=\"line\">            Vec3f bc_screen  = tri.<span class=\"built_in\">baryCentric</span>(P);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bc_screen.x&lt;<span class=\"number\">0</span> || bc_screen.y&lt;<span class=\"number\">0</span> || bc_screen.z&lt;<span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            image.<span class=\"built_in\">set</span>(P.x, P.y, color);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>得到如图效果：</p>\n<img src=\"https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240419185714797-2050127591.png\" alt=\"image-20240419195714296\" style=\"zoom:50%;\">\n\n<p>三角形绘制完成后，可以尝试导入作者提供的由三角形构成的人脸模型。</p>\n<p>.obj模型文件的格式如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># List of geometric vertices, with (x, y, z, [w]) coordinates, w is optional and defaults to 1.0.</span><br><span class=\"line\">v 0.123 0.234 0.345 1.0</span><br><span class=\"line\">v ...</span><br><span class=\"line\">...</span><br><span class=\"line\"># List of texture coordinates, in (u, [v, w]) coordinates, these will vary between 0 and 1. v, w are optional and default to 0.</span><br><span class=\"line\">vt 0.500 1 [0]</span><br><span class=\"line\">vt ...</span><br><span class=\"line\">...</span><br><span class=\"line\"># List of vertex normals in (x,y,z) form; normals might not be unit vectors.</span><br><span class=\"line\">vn 0.707 0.000 0.707</span><br><span class=\"line\">vn ...</span><br><span class=\"line\">...</span><br><span class=\"line\"># Parameter space vertices in (u, [v, w]) form; free form geometry statement (see below)</span><br><span class=\"line\">vp 0.310000 3.210000 2.100000</span><br><span class=\"line\">vp ...</span><br><span class=\"line\">...</span><br><span class=\"line\"># Polygonal face element (see below)</span><br><span class=\"line\">f 1 2 3</span><br><span class=\"line\">f 3/1 4/2 5/3</span><br><span class=\"line\">f 6/4/1 3/5/3 7/6/5</span><br><span class=\"line\">f 7//1 8//2 9//3</span><br><span class=\"line\">f ...</span><br><span class=\"line\">...</span><br><span class=\"line\"># Line element (see below)</span><br><span class=\"line\">l 5 8 1 2 4 9</span><br></pre></td></tr></table></figure>\n\n<p>目前，我们暂时不关心模型的深度（z坐标），只是将模型正投影到XY平面上，则模型上的点对应的屏幕坐标可以这样简单的计算</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">screen_coords[j] = <span class=\"built_in\">Vec2i</span>((v.x+<span class=\"number\">1.</span>)*width/<span class=\"number\">2.</span>, (v.y+<span class=\"number\">1.</span>)*height/<span class=\"number\">2.</span>);</span><br></pre></td></tr></table></figure>\n\n<p>假设光从正前方射向正后方，即光线方向(0,0,-1)。</p>\n<p>在这里，我们使用一种简化的亮度计算方法：我们忽略面与光源之间的距离差异，认为正对着光源的面（法线与光线方向相同）最亮，这样就可以计算每个三角形面的单位法向量与光线方向的叉积来代表亮度。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">2</span>==argc) &#123;</span><br><span class=\"line\">        model = <span class=\"keyword\">new</span> <span class=\"built_in\">Model</span>(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        model = <span class=\"keyword\">new</span> <span class=\"built_in\">Model</span>(<span class=\"string\">&quot;obj/african_head.obj&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">TGAImage <span class=\"title\">image</span><span class=\"params\">(width, height, TGAImage::RGB)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Vec3f <span class=\"title\">light_dir</span><span class=\"params\">(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;model-&gt;<span class=\"built_in\">nfaces</span>(); i++) &#123;</span><br><span class=\"line\">        std::vector&lt;<span class=\"type\">int</span>&gt; face = model-&gt;<span class=\"built_in\">face</span>(i);</span><br><span class=\"line\">        Vec2i screen_coords[<span class=\"number\">3</span>];</span><br><span class=\"line\">        Vec3f world_coords[<span class=\"number\">3</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">0</span>; j&lt;<span class=\"number\">3</span>; j++) &#123;</span><br><span class=\"line\">            Vec3f v = model-&gt;<span class=\"built_in\">vert</span>(face[j]);</span><br><span class=\"line\">            screen_coords[j] = <span class=\"built_in\">Vec2i</span>((v.x+<span class=\"number\">1.</span>)*width/<span class=\"number\">2.</span>, (v.y+<span class=\"number\">1.</span>)*height/<span class=\"number\">2.</span>);</span><br><span class=\"line\">            world_coords[j]  = v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Vec3f n = (world_coords[<span class=\"number\">2</span>]-world_coords[<span class=\"number\">0</span>])^(world_coords[<span class=\"number\">1</span>]-world_coords[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        n.<span class=\"built_in\">normalize</span>();</span><br><span class=\"line\">        <span class=\"type\">float</span> intensity = n*light_dir;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (intensity&gt;<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ok %d\\n&quot;</span>, ++cnt);</span><br><span class=\"line\">            <span class=\"built_in\">drawSolidTriangle</span>(<span class=\"built_in\">Triangle2D</span>&lt;<span class=\"type\">int</span>&gt;(&#123;screen_coords[<span class=\"number\">0</span>], screen_coords[<span class=\"number\">1</span>], screen_coords[<span class=\"number\">2</span>]&#125;), image, <span class=\"built_in\">TGAColor</span>(intensity*<span class=\"number\">255</span>, intensity*<span class=\"number\">255</span>, intensity*<span class=\"number\">255</span>, <span class=\"number\">255</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    image.<span class=\"built_in\">flip_vertically</span>();</span><br><span class=\"line\">    image.<span class=\"built_in\">write_tga_file</span>(<span class=\"string\">&quot;output.tga&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> model;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这种简化下，得到的渲染结果如下：<br><img src=\"https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240419195642124-634629665.png\" alt=\"image-20240419205641217\"></p>\n<p>可以发现，位于口腔中的三角形遮住了嘴唇。下一节课中，我们将考虑深度测试，正确处理多边形的遮挡关系。</p>\n<h2 id=\"Lesson-3-Z-Buffer\"><a href=\"#Lesson-3-Z-Buffer\" class=\"headerlink\" title=\"Lesson 3: Z Buffer\"></a>Lesson 3: Z Buffer</h2><p>深度检测算法的基本原理是，引入一个大小为像素数量的Z-Buffer数组，初始化所有像素点深度为负无穷。</p>\n<p>在遍历像素点时，比较当前三角形上点的深度是否小于Z-Buffer的数值，如果小于，则更新该像素并更新Z-Buffer。</p>\n<p>为此，我们需要为屏幕坐标增加一维深度（对于上面的人脸设置为模型的z即可）。在drawSolidTriangle()中增加对深度缓冲区的判断。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Iterate all points in the rectangular bounding box of triangle, draw if the point is inside</span></span><br><span class=\"line\"><span class=\"comment\">// 2024 04 26 2d-&gt;3d</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">drawSolidTriangle</span><span class=\"params\">(Triangle2D&lt;<span class=\"type\">float</span>&gt; tri, TGAImage &amp;image, TGAColor color, <span class=\"type\">float</span> *zbuffer)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Vec2f <span class=\"title\">bboxmin</span><span class=\"params\">(image.get_width()<span class=\"number\">-1</span>,  image.get_height()<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Vec2f <span class=\"title\">bboxmax</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Vec2f <span class=\"title\">clamp</span><span class=\"params\">(image.get_width()<span class=\"number\">-1</span>, image.get_height()<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">        bboxmin.x = std::<span class=\"built_in\">max</span>((<span class=\"type\">float</span>)<span class=\"number\">0</span>, std::<span class=\"built_in\">min</span>(bboxmin.x, tri.pt[i].x));</span><br><span class=\"line\">        bboxmin.y = std::<span class=\"built_in\">max</span>((<span class=\"type\">float</span>)<span class=\"number\">0</span>, std::<span class=\"built_in\">min</span>(bboxmin.y, tri.pt[i].y));</span><br><span class=\"line\"></span><br><span class=\"line\">        bboxmax.x = std::<span class=\"built_in\">min</span>(clamp.x, std::<span class=\"built_in\">max</span>(bboxmax.x, tri.pt[i].x));</span><br><span class=\"line\">        bboxmax.y = std::<span class=\"built_in\">min</span>(clamp.y, std::<span class=\"built_in\">max</span>(bboxmax.y, tri.pt[i].y));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Vec3i P;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (P.x=bboxmin.x; P.x&lt;=bboxmax.x; P.x++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (P.y=bboxmin.y; P.y&lt;=bboxmax.y; P.y++) &#123;</span><br><span class=\"line\">            Vec3f bc_screen  = tri.<span class=\"built_in\">baryCentric</span>(P.<span class=\"built_in\">toVec2</span>());<span class=\"comment\">//toTriangle2D().baryCentric(P);</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bc_screen.x&lt;<span class=\"number\">0</span> || bc_screen.y&lt;<span class=\"number\">0</span> || bc_screen.z&lt;<span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//bugfix</span></span><br><span class=\"line\">            P.z = tri.depth[<span class=\"number\">0</span>] * bc.x + tri.depth[<span class=\"number\">1</span>] * bc.y + tri.depth[<span class=\"number\">2</span>] * bc.z;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> idx = P.x+P.y*width;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (zbuffer[idx]&lt;P.z) &#123;</span><br><span class=\"line\">                zbuffer[idx] = P.z;</span><br><span class=\"line\">                image.<span class=\"built_in\">set</span>(P.x, P.y, color);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Vec3f <span class=\"title\">worldToScreen</span><span class=\"params\">(Vec3f v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Vec3f</span>(<span class=\"built_in\">int</span>((v.x+<span class=\"number\">1.</span>)*width/<span class=\"number\">2.</span>+<span class=\"number\">.5</span>), <span class=\"built_in\">int</span>((v.y+<span class=\"number\">1.</span>)*height/<span class=\"number\">2.</span>+<span class=\"number\">.5</span>), v.z);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">2</span>==argc) &#123;</span><br><span class=\"line\">        model = <span class=\"keyword\">new</span> <span class=\"built_in\">Model</span>(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        model = <span class=\"keyword\">new</span> <span class=\"built_in\">Model</span>(<span class=\"string\">&quot;obj/african_head.obj&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">float</span> *zbuffer = <span class=\"keyword\">new</span> <span class=\"type\">float</span>[width * height];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=width*height; i--; zbuffer[i] = -std::numeric_limits&lt;<span class=\"type\">float</span>&gt;::<span class=\"built_in\">max</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">TGAImage <span class=\"title\">image</span><span class=\"params\">(width, height, TGAImage::RGB)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Vec3f <span class=\"title\">light_dir</span><span class=\"params\">(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;model-&gt;<span class=\"built_in\">nfaces</span>(); i++) &#123;</span><br><span class=\"line\">        std::vector&lt;<span class=\"type\">int</span>&gt; face = model-&gt;<span class=\"built_in\">face</span>(i);</span><br><span class=\"line\">        Vec3f screen_coords[<span class=\"number\">3</span>];</span><br><span class=\"line\">        Vec3f world_coords[<span class=\"number\">3</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">0</span>; j&lt;<span class=\"number\">3</span>; j++) &#123;</span><br><span class=\"line\">            Vec3f v = model-&gt;<span class=\"built_in\">vert</span>(face[j]);</span><br><span class=\"line\">            <span class=\"comment\">//screen_coords[j] = Vec2i((v.x+1.)*width/2., (v.y+1.)*height/2.);</span></span><br><span class=\"line\">            world_coords[j]  = v;</span><br><span class=\"line\">            screen_coords[j] = <span class=\"built_in\">worldToScreen</span>(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Vec3f n = (world_coords[<span class=\"number\">2</span>]-world_coords[<span class=\"number\">0</span>])^(world_coords[<span class=\"number\">1</span>]-world_coords[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        n.<span class=\"built_in\">normalize</span>();</span><br><span class=\"line\">        <span class=\"type\">float</span> intensity = n*light_dir;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (intensity&gt;<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ok %d\\n&quot;</span>, ++cnt);</span><br><span class=\"line\">            <span class=\"built_in\">drawSolidTriangle</span>(<span class=\"built_in\">Triangle2D</span>&lt;<span class=\"type\">float</span>&gt;(&#123;screen_coords[<span class=\"number\">0</span>], screen_coords[<span class=\"number\">1</span>], screen_coords[<span class=\"number\">2</span>]&#125;), image, <span class=\"built_in\">TGAColor</span>(intensity*<span class=\"number\">255</span>, intensity*<span class=\"number\">255</span>, intensity*<span class=\"number\">255</span>, <span class=\"number\">255</span>), zbuffer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    image.<span class=\"built_in\">flip_vertically</span>();</span><br><span class=\"line\">    image.<span class=\"built_in\">write_tga_file</span>(<span class=\"string\">&quot;output.tga&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> model;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同时，在Triangle2D类中加入depth数组即可</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Triangle2D</span>: <span class=\"keyword\">public</span> Polygon2D&lt;T&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">using</span> Polygon2D&lt;T&gt;::pt;</span><br><span class=\"line\">    std::vector&lt;T&gt; depth;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">Triangle2D</span>(std::vector&lt;Vec2&lt;T&gt;&gt; _pt, std::vector&lt;Vec2&lt;T&gt;&gt; _depth = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;): </span><br><span class=\"line\">        <span class=\"built_in\">Polygon2D</span>&lt;T&gt;(<span class=\"number\">3</span>, _pt), </span><br><span class=\"line\">        <span class=\"built_in\">depth</span>(_depth) &#123;&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"built_in\">Triangle2D</span>(std::vector&lt;Vec3&lt;<span class=\"type\">float</span>&gt;&gt; _pt):</span><br><span class=\"line\">        <span class=\"built_in\">Polygon2D</span>&lt;T&gt;(<span class=\"number\">3</span>, &#123;_pt[<span class=\"number\">0</span>].<span class=\"built_in\">toVec2</span>(), _pt[<span class=\"number\">1</span>].<span class=\"built_in\">toVec2</span>(), _pt[<span class=\"number\">2</span>].<span class=\"built_in\">toVec2</span>()&#125;),</span><br><span class=\"line\">        <span class=\"built_in\">depth</span>(&#123;_pt[<span class=\"number\">0</span>].z, _pt[<span class=\"number\">1</span>].z, _pt[<span class=\"number\">2</span>].z&#125;) &#123;&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\">Vec3f <span class=\"title\">baryCentric</span><span class=\"params\">(Vec2f P)</span> </span>&#123;</span><br><span class=\"line\">        Vec3f u = <span class=\"built_in\">Vec3f</span>(pt[<span class=\"number\">2</span>][<span class=\"number\">0</span>]-pt[<span class=\"number\">0</span>][<span class=\"number\">0</span>], pt[<span class=\"number\">1</span>][<span class=\"number\">0</span>]-pt[<span class=\"number\">0</span>][<span class=\"number\">0</span>], pt[<span class=\"number\">0</span>][<span class=\"number\">0</span>]-P[<span class=\"number\">0</span>])^<span class=\"built_in\">Vec3f</span>(pt[<span class=\"number\">2</span>][<span class=\"number\">1</span>]-pt[<span class=\"number\">0</span>][<span class=\"number\">1</span>], pt[<span class=\"number\">1</span>][<span class=\"number\">1</span>]-pt[<span class=\"number\">0</span>][<span class=\"number\">1</span>], pt[<span class=\"number\">0</span>][<span class=\"number\">1</span>]-P[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"comment\">/* `pts` and `P` has integer value as coordinates</span></span><br><span class=\"line\"><span class=\"comment\">           so `abs(u[2])` &lt; 1 means `u[2]` is 0, that means</span></span><br><span class=\"line\"><span class=\"comment\">           triangle is degenerate, in this case return something with negative coordinates */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (std::<span class=\"built_in\">abs</span>(u.z)&lt;<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">Vec3f</span>(<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Vec3f</span>(<span class=\"number\">1.f</span>-(u.x+u.y)/u.z, u.y/u.z, u.x/u.z);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">inInside</span><span class=\"params\">(Vec2i P)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> bc = <span class=\"built_in\">baryCentric</span>(P);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bc.x&lt;<span class=\"number\">0</span> || bc.y&lt;<span class=\"number\">0</span> || bc.z&lt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>效果如图所示：<br><img src=\"https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240426165741120-55012551.png\" alt=\"image-20240426175739547\"></p>\n<h3 id=\"Bouns-Texture-Mapping\"><a href=\"#Bouns-Texture-Mapping\" class=\"headerlink\" title=\"Bouns: Texture Mapping\"></a>Bouns: Texture Mapping</h3><p>在.obj文件中，有以“vt u v”开头的行，它们给出了一个纹理坐标数组。 </p>\n<blockquote>\n<p>The number in the middle (between the slashes) in the facet lines “f x&#x2F;x&#x2F;x x&#x2F;x&#x2F;x x&#x2F;x&#x2F;x” are the texture coordinates of this vertex of this triangle. Interpolate it inside the triangle, multiply by the width-height of the texture image and you will get the color to put in your render.</p>\n</blockquote>\n<p>tinyrender作者提供了漫反射纹理： <a href=\"..%5CDownloads%5Cafrican_head_diffuse.tga\">african_head_diffuse.tga</a> </p>\n<p>据此，我们可以给上述人脸模型添加纹理。此时，main函数中drawSolidTriangle函数里不需要再传入颜色，只需要传入intensity即可，另外需要传入当前三角形三个点的纹理坐标uv。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Iterate all points in the rectangular bounding box of triangle, draw if the point is inside</span></span><br><span class=\"line\"><span class=\"comment\">// 2024 04 26 2d-&gt;3d, texture mapping</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">drawSolidTriangle</span><span class=\"params\">(Triangle2D&lt;<span class=\"type\">float</span>&gt; tri, Vec2i* uv, TGAImage &amp;image, <span class=\"type\">float</span> intensity, <span class=\"type\">float</span> *zbuffer)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Vec2f <span class=\"title\">bboxmin</span><span class=\"params\">(image.get_width()<span class=\"number\">-1</span>,  image.get_height()<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Vec2f <span class=\"title\">bboxmax</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Vec2f <span class=\"title\">clamp</span><span class=\"params\">(image.get_width()<span class=\"number\">-1</span>, image.get_height()<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">        bboxmin.x = std::<span class=\"built_in\">max</span>((<span class=\"type\">float</span>)<span class=\"number\">0</span>, std::<span class=\"built_in\">min</span>(bboxmin.x, tri.pt[i].x));</span><br><span class=\"line\">        bboxmin.y = std::<span class=\"built_in\">max</span>((<span class=\"type\">float</span>)<span class=\"number\">0</span>, std::<span class=\"built_in\">min</span>(bboxmin.y, tri.pt[i].y));</span><br><span class=\"line\"></span><br><span class=\"line\">        bboxmax.x = std::<span class=\"built_in\">min</span>(clamp.x, std::<span class=\"built_in\">max</span>(bboxmax.x, tri.pt[i].x));</span><br><span class=\"line\">        bboxmax.y = std::<span class=\"built_in\">min</span>(clamp.y, std::<span class=\"built_in\">max</span>(bboxmax.y, tri.pt[i].y));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Vec3i P;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (P.x=bboxmin.x; P.x&lt;=bboxmax.x; P.x++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (P.y=bboxmin.y; P.y&lt;=bboxmax.y; P.y++) &#123;</span><br><span class=\"line\">            Vec3f bc  = tri.<span class=\"built_in\">baryCentric</span>(P.<span class=\"built_in\">toVec2</span>());<span class=\"comment\">//toTriangle2D().baryCentric(P);</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bc.x&lt;<span class=\"number\">0</span> || bc.y&lt;<span class=\"number\">0</span> || bc.z&lt;<span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            P.z = tri.depth[<span class=\"number\">0</span>] * bc.x + tri.depth[<span class=\"number\">1</span>] * bc.y + tri.depth[<span class=\"number\">2</span>] * bc.z;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> idx = P.x+P.y*width;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (zbuffer[idx]&lt;P.z) &#123;</span><br><span class=\"line\">                zbuffer[idx] = P.z;</span><br><span class=\"line\"></span><br><span class=\"line\">                Vec2i P_uv = uv[<span class=\"number\">0</span>] * bc.x + uv[<span class=\"number\">1</span>] * bc.y + uv[<span class=\"number\">2</span>] * bc.z;</span><br><span class=\"line\">                TGAColor color = model-&gt;<span class=\"built_in\">diffuse</span>(P_uv);</span><br><span class=\"line\">                image.<span class=\"built_in\">set</span>(P.x, P.y, color);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Vec3f <span class=\"title\">worldToScreen</span><span class=\"params\">(Vec3f v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Vec3f</span>(<span class=\"built_in\">int</span>((v.x+<span class=\"number\">1.</span>)*width/<span class=\"number\">2.</span>+<span class=\"number\">.5</span>), <span class=\"built_in\">int</span>((v.y+<span class=\"number\">1.</span>)*height/<span class=\"number\">2.</span>+<span class=\"number\">.5</span>), v.z);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">2</span>==argc) &#123;</span><br><span class=\"line\">        model = <span class=\"keyword\">new</span> <span class=\"built_in\">Model</span>(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        model = <span class=\"keyword\">new</span> <span class=\"built_in\">Model</span>(<span class=\"string\">&quot;obj/african_head.obj&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">float</span> *zbuffer = <span class=\"keyword\">new</span> <span class=\"type\">float</span>[width * height];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=width*height; i--; zbuffer[i] = -std::numeric_limits&lt;<span class=\"type\">float</span>&gt;::<span class=\"built_in\">max</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">TGAImage <span class=\"title\">image</span><span class=\"params\">(width, height, TGAImage::RGB)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Vec3f <span class=\"title\">light_dir</span><span class=\"params\">(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;model-&gt;<span class=\"built_in\">nfaces</span>(); i++) &#123;</span><br><span class=\"line\">        std::vector&lt;<span class=\"type\">int</span>&gt; face = model-&gt;<span class=\"built_in\">face</span>(i);</span><br><span class=\"line\">        Vec3f screen_coords[<span class=\"number\">3</span>];</span><br><span class=\"line\">        Vec3f world_coords[<span class=\"number\">3</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">0</span>; j&lt;<span class=\"number\">3</span>; j++) &#123;</span><br><span class=\"line\">            Vec3f v = model-&gt;<span class=\"built_in\">vert</span>(face[j]);</span><br><span class=\"line\">            <span class=\"comment\">//screen_coords[j] = Vec2i((v.x+1.)*width/2., (v.y+1.)*height/2.);</span></span><br><span class=\"line\">            world_coords[j]  = v;</span><br><span class=\"line\">            screen_coords[j] = <span class=\"built_in\">worldToScreen</span>(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Vec3f n = (world_coords[<span class=\"number\">2</span>]-world_coords[<span class=\"number\">0</span>])^(world_coords[<span class=\"number\">1</span>]-world_coords[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        n.<span class=\"built_in\">normalize</span>();</span><br><span class=\"line\">        <span class=\"type\">float</span> intensity = n*light_dir;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (intensity&gt;<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ok %d\\n&quot;</span>, ++cnt);</span><br><span class=\"line\">            Vec2i uv[<span class=\"number\">3</span>];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++) uv[j] = model-&gt;<span class=\"built_in\">uv</span>(i, j);</span><br><span class=\"line\">            <span class=\"built_in\">drawSolidTriangle</span>(<span class=\"built_in\">Triangle2D</span>&lt;<span class=\"type\">float</span>&gt;(&#123;screen_coords[<span class=\"number\">0</span>], screen_coords[<span class=\"number\">1</span>], screen_coords[<span class=\"number\">2</span>]&#125;), uv, image, intensity, zbuffer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    image.<span class=\"built_in\">flip_vertically</span>();</span><br><span class=\"line\">    image.<span class=\"built_in\">write_tga_file</span>(<span class=\"string\">&quot;output.tga&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> model;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>model.h和model.cpp需要修改以支持纹理。作者在lesson4的结尾放出了代码。</p>\n<p>效果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202404/1928276-20240426180250012-1899969424.png\" alt=\"image-20240426190246539\"></p>\n<p>这是一个平行投影的结果，损失了一部分真实感，例如，虽然耳朵旁边的头发在xoy平面上不与脸部重叠，但实际上应该被前边的皮肤遮挡，因为人眼&#x2F;相机本身是“点光源”，而不是“平行光源”，物体发出的光线最终汇聚于一点，也就是所谓的“透视”。下面将引入透视投影：</p>\n<h2 id=\"Lesson-4-Perspective-projection\"><a href=\"#Lesson-4-Perspective-projection\" class=\"headerlink\" title=\"Lesson 4: Perspective projection\"></a>Lesson 4: Perspective projection</h2><p>齐次坐标</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/f10.png\" alt=\"img\"></p>\n<p>简单变换（图来自GAMES101）</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505164930200-682100308.png\" alt=\"image-20240505174927834\"></p>\n<p>逆变换</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505165458526-1584226714.png\" alt=\"image-20240505175454080\"></p>\n<p>复合变换</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505165021790-531013206.png\" alt=\"image-20240505175019922\"></p>\n<p>实现矩阵类：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> DEFAULT_D = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Matrix</span> &#123;</span><br><span class=\"line\">    std::vector&lt;std::vector&lt;<span class=\"type\">float</span>&gt;&gt; m;</span><br><span class=\"line\">    <span class=\"type\">int</span> nrow, ncol;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Matrix</span>(<span class=\"type\">int</span> r=DEFAULT_D, <span class=\"type\">int</span> c=DEFAULT_D) :</span><br><span class=\"line\">        <span class=\"built_in\">m</span>(std::vector&lt;std::vector&lt;<span class=\"type\">float</span>&gt;&gt; (r, std::<span class=\"built_in\">vector</span>&lt;<span class=\"type\">float</span>&gt;(c, <span class=\"number\">0.f</span>))),</span><br><span class=\"line\">        <span class=\"built_in\">nrow</span>(r), <span class=\"built_in\">ncol</span>(c) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get_nrow</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> nrow; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get_ncol</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> ncol; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> Matrix <span class=\"title\">identity</span><span class=\"params\">(<span class=\"type\">int</span> dimensions)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">Matrix <span class=\"title\">E</span><span class=\"params\">(dimensions, dimensions)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; dimensions; i++)</span><br><span class=\"line\">            E[i][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> E;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::vector&lt;<span class=\"type\">float</span>&gt;&amp; <span class=\"keyword\">operator</span>[](<span class=\"type\">const</span> <span class=\"type\">int</span> i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(i &gt;= <span class=\"number\">0</span> &amp;&amp; i &lt; nrow);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">const</span> std::vector&lt;<span class=\"type\">float</span>&gt;&amp; <span class=\"keyword\">operator</span>[](<span class=\"type\">const</span> <span class=\"type\">int</span> i) <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(i &gt;= <span class=\"number\">0</span> &amp;&amp; i &lt; nrow);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Matrix <span class=\"keyword\">operator</span>*(<span class=\"type\">const</span> Matrix&amp; a) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(<span class=\"keyword\">this</span>-&gt;ncol == a.nrow);</span><br><span class=\"line\">        <span class=\"function\">Matrix <span class=\"title\">res</span><span class=\"params\">(<span class=\"keyword\">this</span>-&gt;nrow, a.ncol)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>-&gt;nrow; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; a.ncol; j++) &#123;</span><br><span class=\"line\">                res.m[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"keyword\">this</span>-&gt;ncol; k++)</span><br><span class=\"line\">                    res.m[i][j] += <span class=\"keyword\">this</span>-&gt;m[i][k]*a.m[k][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Matrix <span class=\"title\">transpose</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">Matrix <span class=\"title\">res</span><span class=\"params\">(ncol, nrow)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; ncol; i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; nrow; j++)</span><br><span class=\"line\">                res.m[i][j] = m[j][i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">Matrix <span class=\"title\">inverse</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(nrow==ncol);</span><br><span class=\"line\">        <span class=\"comment\">// augmenting the square matrix with the identity matrix of the same dimensions a =&gt; [ai]</span></span><br><span class=\"line\">        <span class=\"function\">Matrix <span class=\"title\">result</span><span class=\"params\">(nrow, ncol*<span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;nrow; i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>; j&lt;ncol; j++)</span><br><span class=\"line\">                result[i][j] = m[i][j];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;nrow; i++)</span><br><span class=\"line\">            result[i][i+ncol] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// first pass</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;nrow<span class=\"number\">-1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// normalize the first row</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=result.ncol<span class=\"number\">-1</span>; j&gt;=<span class=\"number\">0</span>; j--)</span><br><span class=\"line\">                result[i][j] /= result[i][i];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k=i+<span class=\"number\">1</span>; k&lt;nrow; k++) &#123;</span><br><span class=\"line\">                <span class=\"type\">float</span> coeff = result[k][i];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">0</span>; j&lt;result.ncol; j++) &#123;</span><br><span class=\"line\">                    result[k][j] -= result[i][j]*coeff;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// normalize the last row</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=result.ncol<span class=\"number\">-1</span>; j&gt;=nrow<span class=\"number\">-1</span>; j--)</span><br><span class=\"line\">            result[nrow<span class=\"number\">-1</span>][j] /= result[nrow<span class=\"number\">-1</span>][nrow<span class=\"number\">-1</span>];</span><br><span class=\"line\">        <span class=\"comment\">// second pass</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=nrow<span class=\"number\">-1</span>; i&gt;<span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k=i<span class=\"number\">-1</span>; k&gt;=<span class=\"number\">0</span>; k--) &#123;</span><br><span class=\"line\">                <span class=\"type\">float</span> coeff = result[k][i];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">0</span>; j&lt;result.ncol; j++) &#123;</span><br><span class=\"line\">                    result[k][j] -= result[i][j]*coeff;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// cut the identity matrix back</span></span><br><span class=\"line\">        <span class=\"function\">Matrix <span class=\"title\">truncate</span><span class=\"params\">(nrow, ncol)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;nrow; i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>; j&lt;ncol; j++)</span><br><span class=\"line\">                truncate[i][j] = result[i][j+ncol];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> truncate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> std::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(std::ostream&amp; s, Matrix&amp; m);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> std::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(std::ostream&amp; s, Matrix&amp; m) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m.nrow; i++)  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; m.ncol; j++) &#123;</span><br><span class=\"line\">            s &lt;&lt; m[i][j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j&lt;m.ncol<span class=\"number\">-1</span>) s &lt;&lt; <span class=\"string\">&quot;\\t&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        s &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>一个简单投影矩阵的推导：</p>\n<p>假设相机位置为（0,0,c）成像平面为z&#x3D;0，如图</p>\n<img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/525d3930435c3be900e4c7956edb5a1c.png\" alt=\"img\" style=\"zoom: 67%;\">\n\n\n\n<p>根据三角形相似，x’&#x2F;c &#x3D; x&#x2F;(c-z)，即有</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/f15.png\" alt=\"img\"></p>\n<p>同理</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/f16.png\" alt=\"img\"></p>\n<p>为了实现z轴方向上靠近相机的线段被拉伸，远离相机的线段被压缩，投影矩阵具有这样的形式</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/f13.png\" alt=\"img\"></p>\n<p>根据齐次坐标的结果，得到对应的投影点坐标</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/f14.png\" alt=\"img\"></p>\n<p>根据上面的结果，可知r&#x3D;-1&#x2F;c。</p>\n<p>我们可以得到一个简单情况下的投影矩阵，变换过程如图</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/04-perspective-projection/f17.png\" alt=\"img\"></p>\n<p>在程序中，这个过程用如下方式实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">screen_coords[j] = <span class=\"built_in\">hc2v</span>(viewportMatrix * projectionMatrix * <span class=\"built_in\">v2hc</span>(v));</span><br></pre></td></tr></table></figure>\n\n<p>(普通坐标 → 齐次坐标)</p>\n<p>世界坐标 → (经投影变换)投影坐标 → （经视口变换)屏幕坐标 </p>\n<p>(齐次坐标 → 普通坐标)</p>\n<p>这里的坐标包含位置(x,y)和深度z,深度交给z-buffer来处理</p>\n<p>视口变化的目的是将投影区域映射到[-1,1]^3的立方体中，便于绘制</p>\n<p>相关变化的实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Transition between coordinates (vector type) and homogeneous coordinates (matrix type)</span></span><br><span class=\"line\"><span class=\"function\">Matrix <span class=\"title\">v2hc</span><span class=\"params\">(<span class=\"type\">const</span> Vec3f &amp;v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Matrix <span class=\"title\">hc</span><span class=\"params\">(<span class=\"number\">4</span>, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    hc[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = v.x;</span><br><span class=\"line\">    hc[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = v.y;</span><br><span class=\"line\">    hc[<span class=\"number\">2</span>][<span class=\"number\">0</span>] = v.z;</span><br><span class=\"line\">    hc[<span class=\"number\">3</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">Vec3f <span class=\"title\">hc2v</span><span class=\"params\">(<span class=\"type\">const</span> Matrix &amp;hc)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Vec3f</span>(hc[<span class=\"number\">0</span>][<span class=\"number\">0</span>], hc[<span class=\"number\">1</span>][<span class=\"number\">0</span>], hc[<span class=\"number\">2</span>][<span class=\"number\">0</span>]) * (<span class=\"number\">1.f</span> / hc[<span class=\"number\">3</span>][<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Vec3f <span class=\"title\">light_dir</span><span class=\"params\">(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">Vec3f <span class=\"title\">camera</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//project to z = 0</span></span><br><span class=\"line\"><span class=\"function\">Matrix <span class=\"title\">projection</span><span class=\"params\">(<span class=\"type\">const</span> Vec3f &amp;camera)</span> </span>&#123;</span><br><span class=\"line\">    Matrix m = Matrix::<span class=\"built_in\">identity</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">    m[<span class=\"number\">3</span>][<span class=\"number\">2</span>] = <span class=\"number\">-1.f</span>/camera.z;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//viewport(width / 8, height / 8, width * 0.75, height * 0.75);</span></span><br><span class=\"line\"><span class=\"comment\">//窗口边缘留出1/8空隙</span></span><br><span class=\"line\"><span class=\"function\">Matrix <span class=\"title\">viewport</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y, <span class=\"type\">int</span> w, <span class=\"type\">int</span> h)</span> </span>&#123;</span><br><span class=\"line\">    Matrix m = Matrix::<span class=\"built_in\">identity</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"comment\">//Translation</span></span><br><span class=\"line\">    m[<span class=\"number\">0</span>][<span class=\"number\">3</span>] = x + w / <span class=\"number\">2.f</span>;</span><br><span class=\"line\">    m[<span class=\"number\">1</span>][<span class=\"number\">3</span>] = y + h / <span class=\"number\">2.f</span>;</span><br><span class=\"line\">    m[<span class=\"number\">2</span>][<span class=\"number\">3</span>] = depth / <span class=\"number\">2.f</span>;</span><br><span class=\"line\">    <span class=\"comment\">//scale to [0, 1]</span></span><br><span class=\"line\">    m[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = w / <span class=\"number\">2.f</span>;</span><br><span class=\"line\">    m[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = h / <span class=\"number\">2.f</span>;</span><br><span class=\"line\">    m[<span class=\"number\">2</span>][<span class=\"number\">2</span>] = depth / <span class=\"number\">2.f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">    Matrix projectionMatrix = <span class=\"built_in\">projection</span>(camera);</span><br><span class=\"line\">    Matrix viewportMatrix = <span class=\"built_in\">viewport</span>(width / <span class=\"number\">8</span>, height / <span class=\"number\">8</span>, width * <span class=\"number\">0.75</span>, height * <span class=\"number\">0.75</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;model-&gt;<span class=\"built_in\">nfaces</span>(); i++) &#123;</span><br><span class=\"line\">        std::vector&lt;<span class=\"type\">int</span>&gt; face = model-&gt;<span class=\"built_in\">face</span>(i);</span><br><span class=\"line\">        Vec3f screen_coords[<span class=\"number\">3</span>];</span><br><span class=\"line\">        Vec3f world_coords[<span class=\"number\">3</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">0</span>; j&lt;<span class=\"number\">3</span>; j++) &#123;</span><br><span class=\"line\">            Vec3f v = model-&gt;<span class=\"built_in\">vert</span>(face[j]);</span><br><span class=\"line\">            <span class=\"comment\">//world -&gt; screen:</span></span><br><span class=\"line\">            <span class=\"comment\">//3d coordinate -&gt; homogeneous coordinates</span></span><br><span class=\"line\">            <span class=\"comment\">//-&gt; projection trans(camera at (0,0,c), project to plane z = 0)</span></span><br><span class=\"line\">            <span class=\"comment\">//-&gt; viewport trans(to make central at (w/2,h/2,d/2))</span></span><br><span class=\"line\"></span><br><span class=\"line\">            world_coords[j]  = v;</span><br><span class=\"line\">            screen_coords[j] = <span class=\"built_in\">hc2v</span>(viewportMatrix * projectionMatrix * <span class=\"built_in\">v2hc</span>(v));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Still simplified light intensity</span></span><br><span class=\"line\">        Vec3f n = (world_coords[<span class=\"number\">2</span>]-world_coords[<span class=\"number\">0</span>])^(world_coords[<span class=\"number\">1</span>]-world_coords[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        n.<span class=\"built_in\">normalize</span>();</span><br><span class=\"line\">        <span class=\"type\">float</span> intensity = n*light_dir;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (intensity&gt;<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ok %d\\n&quot;</span>, ++cnt);</span><br><span class=\"line\">            Vec2i uv[<span class=\"number\">3</span>];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++) uv[j] = model-&gt;<span class=\"built_in\">uv</span>(i, j);</span><br><span class=\"line\">            <span class=\"built_in\">drawSolidTriangle</span>(<span class=\"built_in\">Triangle2D</span>&lt;<span class=\"type\">float</span>&gt;(&#123;screen_coords[<span class=\"number\">0</span>], screen_coords[<span class=\"number\">1</span>], screen_coords[<span class=\"number\">2</span>]&#125;), uv, image, intensity, zbuffer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>效果</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240504160940105-1636523864.png\" alt=\"image-20240504170937200\"></p>\n<p>注：TinyRenderer的透视投影与GAMES101处理方式不同，GAMES101是把M[3][2]固定为1，求解M的第三行，而此处是固定第三行为（0 0 1 0），求解M[3][2]。</p>\n<p>此处并没有“近平面”的概念，认为n&#x3D;0,f&#x3D;c。</p>\n<p>下面是GAMES101给出的结果（第三行为0 0 A B）：</p>\n<img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505182227248-1392365094.png\" alt=\"image-20240505192224927\" style=\"zoom:50%;\">\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505182300021-22198105.png\" alt=\"image-20240505192257807\" style=\"zoom:50%;\">\n\n\n\n<h2 id=\"Lesson-5-Moving-the-camera\"><a href=\"#Lesson-5-Moving-the-camera\" class=\"headerlink\" title=\"Lesson 5: Moving the camera\"></a>Lesson 5: Moving the camera</h2><p>之前，我们考虑了相机在(0,0,c)，朝着-z方向看的情况。</p>\n<p>对于任意的相机位置，需要三个向量来确定：相机坐标e，相机指向的点c，向上方向向量u,如图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/b94dd4a591514fd66a91a6e4cc065644.png\" alt=\"img\"></p>\n<p>我们假定相机总是朝着-z方向看，而u朝向正y方向，据此就得到了一个新的坐标系x’y’z’，</p>\n<p>下面考虑如何将物体坐标[x,y,z]转化为新坐标系下的[x’,y’,z’]。</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f66a0139058ab1d1025dbfd8cd401389.png\" alt=\"img\"></p>\n<p>首先回顾坐标[x,y,z]的定义，它是三个正交的单位向量i,j,k前面的系数</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f00.png\" alt=\"img\"></p>\n<p>现在，我们有了新的单位向量i’,j’,k’,那么一定存在矩阵M，使得</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f01.png\" alt=\"img\"></p>\n<p>我们将OP写成OO’+O’P,与新的单位坐标建立联系：</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f02.png\" alt=\"img\"></p>\n<p>将[i’,j’,k’]用上面的式子表示，提出[i,j,k]:</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f03.png\" alt=\"img\"></p>\n<p>左边用[x,y,z]的定义式替换，就得到了[x’,y’,z’]与[x,y,z]的关系</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f04.png\" alt=\"img\"></p>\n<p>关于look at的推导，此处写的有些混乱<br>建议参阅<a href=\"https://www.zhihu.com/question/447781866\">https://www.zhihu.com/question/447781866</a> </p>\n<p>下面是个人理解：</p>\n<p>简单来说，设M是(0, 0, 0),[i,j,k]到eyepos, [i’,j’,k’]的变换矩阵<br>则M&#x3D;TR,先旋转后平移</p>\n<p>其中旋转矩阵R根据单位向量<strong>左乘</strong>该矩阵得到新单位向量，很容易得到(此处r,u,v是i’,j’,k’在原坐标系下的坐标)</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505210530096-395261047.png\" alt=\"image-20240505220527743\"></p>\n<p>而T则为原点平移到eye pos的平移矩阵 （C是eyepos)</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505211321938-1985120681.png\" alt=\"image-20240505221319762\"></p>\n<p>此为对坐标轴的变换矩阵，即，我们用M计算了<strong>新的单位向量在原坐标系下的坐标</strong>，而要得到原来单位向量在新坐标系下的坐标，显然应该左乘M的逆矩阵。这样，我们就求得了ModelView矩阵。</p>\n<p>据此，编写lookup实现modelview的计算</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vec3f light_dir = <span class=\"built_in\">Vec3f</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>).<span class=\"built_in\">normalize</span>();</span><br><span class=\"line\"><span class=\"function\">Vec3f <span class=\"title\">eye</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">Vec3f <span class=\"title\">center</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">Vec3f <span class=\"title\">up</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//Vec3f camera(0, 0, 3);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//screen_coordinate = viewport * projection * modelview * world_coordinate</span></span><br><span class=\"line\"><span class=\"function\">Matrix <span class=\"title\">lookat</span><span class=\"params\">(Vec3f eye, Vec3f center, Vec3f up)</span> </span>&#123;</span><br><span class=\"line\">    Vec3f z = (eye - center).<span class=\"built_in\">normalize</span>();</span><br><span class=\"line\">    Vec3f x = (up ^ z).<span class=\"built_in\">normalize</span>();</span><br><span class=\"line\">    Vec3f y = (z ^ x).<span class=\"built_in\">normalize</span>();</span><br><span class=\"line\">    Matrix M_inv = Matrix::<span class=\"built_in\">identity</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">    Matrix T = Matrix::<span class=\"built_in\">identity</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"comment\">//thanks https://www.zhihu.com/question/447781866</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">        M_inv[<span class=\"number\">0</span>][i] = x[i];</span><br><span class=\"line\">        M_inv[<span class=\"number\">1</span>][i] = y[i];</span><br><span class=\"line\">        M_inv[<span class=\"number\">2</span>][i] = z[i];</span><br><span class=\"line\">        T[i][<span class=\"number\">3</span>] = -eye[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> M_inv * T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Matrix <span class=\"title\">projection</span><span class=\"params\">(Vec3f eye, Vec3f center)</span> </span>&#123;</span><br><span class=\"line\">    Matrix m = Matrix::<span class=\"built_in\">identity</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">    m[<span class=\"number\">3</span>][<span class=\"number\">2</span>] = <span class=\"number\">-1.f</span> / (eye - center).<span class=\"built_in\">norm</span>();</span><br><span class=\"line\">    <span class=\"comment\">//m[3][2] = -1.f / camera.z;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">        </span><br><span class=\"line\">    Matrix modelviewMatrix = <span class=\"built_in\">lookat</span>(eye, center, up);</span><br><span class=\"line\">    Matrix projectionMatrix = <span class=\"built_in\">projection</span>(eye, center);</span><br><span class=\"line\">    Matrix viewportMatrix = <span class=\"built_in\">viewport</span>(width / <span class=\"number\">8</span>, height / <span class=\"number\">8</span>, width * <span class=\"number\">0.75</span>, height * <span class=\"number\">0.75</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    screen_coords[j] = <span class=\"built_in\">hc2v</span>(viewportMatrix * projectionMatrix * modelviewMatrix * <span class=\"built_in\">v2hc</span>(v));</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果 目前有点bug</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240505215822020-1676545529.png\" alt=\"image-20240505225818988\"></p>\n<h3 id=\"Bouns：Transformation-of-normal-vectors\"><a href=\"#Bouns：Transformation-of-normal-vectors\" class=\"headerlink\" title=\"Bouns：Transformation of normal vectors\"></a>Bouns：Transformation of normal vectors</h3><p>为了处理光照，我们将模型进行坐标变换后，如果模型提供了每个面的法向量，还需要将法向量也进行变换。</p>\n<p>此处有一个结论：模型上的坐标通过矩阵M进行仿射变换，那么模型的法向量的变换矩阵是M的逆矩阵的转置。</p>\n<p>证明：考虑平面方程 Ax+By+Cz&#x3D;0，它的法向量是（A,B,C) ,写成矩阵形式为：</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f05.png\" alt=\"img\"></p>\n<p>在两者之间插入M的逆和M：</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f06.png\" alt=\"img\"></p>\n<p> 由于坐标均为列向量，把左边写成转置形式：</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/05-camera/f07.png\" alt=\"img\"></p>\n<p>因此，如果对坐标(x,y,z)做变换M，要满足原来的直线方程，对法向量的变换矩阵为M的逆矩阵的转置（或者转置再求逆，转置和求逆是<strong>可交换的</strong>，证明略）</p>\n<h2 id=\"Lesson-6-Shaders\"><a href=\"#Lesson-6-Shaders\" class=\"headerlink\" title=\"Lesson 6: Shaders\"></a>Lesson 6: Shaders</h2><p>本节主要分为两大部分：重构代码，实现不同的shaders。</p>\n<p>再尝试用自己之前的屎山适配Shader部分后，我放弃了，直接使用作者写的geometry。内容大部分都很直观，值得注意的是</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"type\">size_t</span> LEN,<span class=\"type\">size_t</span> DIM,<span class=\"keyword\">typename</span> T&gt; vec&lt;LEN,T&gt; <span class=\"title\">embed</span><span class=\"params\">(<span class=\"type\">const</span> vec&lt;DIM,T&gt; &amp;v, T fill=<span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    vec&lt;LEN,T&gt; ret;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i=LEN; i--; ret[i]=(i&lt;DIM?v[i]:fill));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"type\">size_t</span> LEN,<span class=\"type\">size_t</span> DIM, <span class=\"keyword\">typename</span> T&gt; vec&lt;LEN,T&gt; <span class=\"title\">proj</span><span class=\"params\">(<span class=\"type\">const</span> vec&lt;DIM,T&gt; &amp;v)</span> </span>&#123;</span><br><span class=\"line\">    vec&lt;LEN,T&gt; ret;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i=LEN; i--; ret[i]=v[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这两个模板的作用，分别是将低维向量拓展到高维（不足补1）、高维向量投影到低维（截取前LEN个坐标），在涉及其次坐标和普通坐标的转换时多次用到。</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/06-shaders/OpenGL-2.0-Programmable-Shader-Pipeline.png\" alt=\"img\"></p>\n<p>Shader包含顶点着色和片元着色两个部件，将其抽离出来，可以使得我们通过修改Shader即可实现各种不同的渲染效果，而无需改动其他代码。</p>\n<p>在<code>gl.h</code>中，定义Shader的基本结构。不同Shader的通过继承基类重写两个虚函数来实现</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IShader</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">IShader</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> Vec4f  <span class=\"title\">vertex</span><span class=\"params\">(<span class=\"type\">int</span> iface, <span class=\"type\">int</span> nthvert)</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">bool</span> <span class=\"title\">fragment</span><span class=\"params\">(Vec3f bar, TGAColor &amp;color)</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>其中，iface是面的编号，而nthvert是顶点编号（对于三角形为0,1,2）。</p>\n<p>例如，一个简单的GouraudShader，vertex通过顶点法向量与光照的点乘计算三角形每个顶点的光照，而fragment通过重心坐标插值计算三角形区域中所有像素的颜色。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">GouraudShader</span> : <span class=\"keyword\">public</span> IShader &#123;</span><br><span class=\"line\">    Vec3f varying_intensity;</span><br><span class=\"line\">    <span class=\"comment\">//顶点着色</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> Vec4f <span class=\"title\">vertex</span><span class=\"params\">(<span class=\"type\">int</span> iface, <span class=\"type\">int</span> nthvert)</span> </span>&#123;</span><br><span class=\"line\">        Vec4f glVertex = <span class=\"built_in\">embed</span>&lt;<span class=\"number\">4</span>&gt;(model-&gt;<span class=\"built_in\">vert</span>(iface, nthvert));</span><br><span class=\"line\">        glVertex = Viewport * Projection * ModelView * glVertex;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        varying_intensity[nthvert] = std::<span class=\"built_in\">max</span>(<span class=\"number\">0.f</span>, model-&gt;<span class=\"built_in\">normal</span>(iface, nthvert) * light_dir);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> glVertex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//片段着色 用于drawTriangle </span></span><br><span class=\"line\">    <span class=\"comment\">//这里的bar即baryCentric</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">bool</span> <span class=\"title\">fragment</span><span class=\"params\">(Vec3f bar, TGAColor &amp;color)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">float</span> intensity = varying_intensity * bar;</span><br><span class=\"line\">        color = <span class=\"built_in\">TGAColor</span>(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>) * intensity;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t<span class=\"comment\">//返回值表示是否丢弃</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//in main for every vertex</span></span><br><span class=\"line\">GouraudShader shader;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;model-&gt;<span class=\"built_in\">nfaces</span>(); i++) &#123;</span><br><span class=\"line\">    std::vector&lt;<span class=\"type\">int</span>&gt; face = model-&gt;<span class=\"built_in\">face</span>(i);</span><br><span class=\"line\">    Vec3f world_coords[<span class=\"number\">3</span>];</span><br><span class=\"line\">    Vec4f screen_coords[<span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++) &#123;</span><br><span class=\"line\">        Vec3f v = model-&gt;<span class=\"built_in\">vert</span>(face[j]);</span><br><span class=\"line\">        world_coords[j] = v;</span><br><span class=\"line\">        screen_coords[j] = shader.<span class=\"built_in\">vertex</span>(i, j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">drawTriangle</span>(screen_coords, shader, image, zbuffer);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// in drawTriangle, for every pixel</span></span><br><span class=\"line\">...</span><br><span class=\"line\">TGAColor color;</span><br><span class=\"line\"><span class=\"type\">bool</span> discard = shader.<span class=\"built_in\">fragment</span>(bc, color);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!discard) &#123;</span><br><span class=\"line\">    zbuffer.<span class=\"built_in\">set</span>(P.x, P.y, <span class=\"built_in\">TGAColor</span>(frag_depth));</span><br><span class=\"line\">    image.<span class=\"built_in\">set</span>(P.x, P.y, color);</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>所得的效果如图</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512201920094-1588430460.png\" alt=\"image-20240512211917138\"></p>\n<p>我们可以轻松地修改着色器，实现不同的渲染效果，如将颜色设置为6个梯度的橙色：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">bool</span> <span class=\"title\">fragment</span><span class=\"params\">(Vec3f bar, TGAColor &amp;color)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">float</span> intensity = varying_intensity*bar;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (intensity&gt;<span class=\"number\">.85</span>) intensity = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (intensity&gt;<span class=\"number\">.60</span>) intensity = <span class=\"number\">.80</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (intensity&gt;<span class=\"number\">.45</span>) intensity = <span class=\"number\">.60</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (intensity&gt;<span class=\"number\">.30</span>) intensity = <span class=\"number\">.45</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (intensity&gt;<span class=\"number\">.15</span>) intensity = <span class=\"number\">.30</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> intensity = <span class=\"number\">0</span>;</span><br><span class=\"line\">    color = <span class=\"built_in\">TGAColor</span>(<span class=\"number\">255</span>, <span class=\"number\">155</span>, <span class=\"number\">0</span>)*intensity;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512202546531-812190877.png\" alt=\"image-20240512212544885\"></p>\n<p><strong>纹理着色器</strong></p>\n<p>接下来，我们可以实现漫反射纹理。只需要修改Shader添加纹理映射项即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">TextureShader</span> : <span class=\"keyword\">public</span> IShader &#123;</span><br><span class=\"line\">    Vec3f          varying_intensity; <span class=\"comment\">// written by vertex shader, read by fragment shader</span></span><br><span class=\"line\">    mat&lt;<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"type\">float</span>&gt; varying_uv;        <span class=\"comment\">// same as above</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> Vec4f <span class=\"title\">vertex</span><span class=\"params\">(<span class=\"type\">int</span> iface, <span class=\"type\">int</span> nthvert)</span> </span>&#123;</span><br><span class=\"line\">        varying_uv.<span class=\"built_in\">set_col</span>(nthvert, model-&gt;<span class=\"built_in\">uv</span>(iface, nthvert));</span><br><span class=\"line\">        varying_intensity[nthvert] = std::<span class=\"built_in\">max</span>(<span class=\"number\">0.f</span>, model-&gt;<span class=\"built_in\">normal</span>(iface, nthvert)*light_dir); <span class=\"comment\">// get diffuse lighting intensity</span></span><br><span class=\"line\">        Vec4f gl_Vertex = <span class=\"built_in\">embed</span>&lt;<span class=\"number\">4</span>&gt;(model-&gt;<span class=\"built_in\">vert</span>(iface, nthvert)); <span class=\"comment\">// read the vertex from .obj file</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Viewport*Projection*ModelView*gl_Vertex; <span class=\"comment\">// transform it to screen coordinates</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">bool</span> <span class=\"title\">fragment</span><span class=\"params\">(Vec3f bar, TGAColor &amp;color)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">float</span> intensity = varying_intensity*bar;   <span class=\"comment\">// interpolate intensity for the current pixel</span></span><br><span class=\"line\">        Vec2f uv = varying_uv*bar;                 <span class=\"comment\">// interpolate uv for the current pixel</span></span><br><span class=\"line\">        color = model-&gt;<span class=\"built_in\">diffuse</span>(uv)*intensity;      <span class=\"comment\">// well duh</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;                              <span class=\"comment\">// no, we do not discard this pixel</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>效果</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512202811146-1791754725.png\" alt=\"image-20240512212807641\"></p>\n<p><strong>法线着色器</strong></p>\n<p>事实上，纹理图像中不止可以储存颜色，还可以储存法线方向、温度等等信息。通过纹理给出每个点的法线方向，就能实现表明的凹凸起伏效果。此时，纹理图像的RGB值不再储存颜色，而是用于储存法线，如下图。</p>\n<img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/06-shaders/african_head_nm.png\" alt=\"img\" style=\"zoom:50%;\">\n\n<p>上节课的结尾，我们提到了“模型上的坐标通过矩阵M进行仿射变换，那么模型的法向量的变换矩阵是M的逆矩阵的转置”这一结论，根据这个结论，就可以直接在顶点着色器中分别计算顶点和法向量经过投影后的结构</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">NormalShader</span> : <span class=\"keyword\">public</span> IShader &#123;</span><br><span class=\"line\">    mat&lt;<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"type\">float</span>&gt; varying_uv;  <span class=\"comment\">// same as above</span></span><br><span class=\"line\">    mat&lt;<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"type\">float</span>&gt; uniform_M;   <span class=\"comment\">//  Projection*ModelView</span></span><br><span class=\"line\">    mat&lt;<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"type\">float</span>&gt; uniform_MIT; <span class=\"comment\">// (Projection*ModelView).invert_transpose()</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> Vec4f <span class=\"title\">vertex</span><span class=\"params\">(<span class=\"type\">int</span> iface, <span class=\"type\">int</span> nthvert)</span> </span>&#123;</span><br><span class=\"line\">        varying_uv.<span class=\"built_in\">set_col</span>(nthvert, model-&gt;<span class=\"built_in\">uv</span>(iface, nthvert));</span><br><span class=\"line\">        Vec4f gl_Vertex = <span class=\"built_in\">embed</span>&lt;<span class=\"number\">4</span>&gt;(model-&gt;<span class=\"built_in\">vert</span>(iface, nthvert)); <span class=\"comment\">// read the vertex from .obj file</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Viewport*Projection*ModelView*gl_Vertex; <span class=\"comment\">// transform it to screen coordinates</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">bool</span> <span class=\"title\">fragment</span><span class=\"params\">(Vec3f bar, TGAColor &amp;color)</span> </span>&#123;</span><br><span class=\"line\">        Vec2f uv = varying_uv*bar;                 <span class=\"comment\">// interpolate uv for the current pixel</span></span><br><span class=\"line\">        Vec3f n = <span class=\"built_in\">proj</span>&lt;<span class=\"number\">3</span>&gt;(uniform_MIT*<span class=\"built_in\">embed</span>&lt;<span class=\"number\">4</span>&gt;(model-&gt;<span class=\"built_in\">normal</span>(uv))).<span class=\"built_in\">normalize</span>();</span><br><span class=\"line\">        Vec3f l = <span class=\"built_in\">proj</span>&lt;<span class=\"number\">3</span>&gt;(uniform_M  *<span class=\"built_in\">embed</span>&lt;<span class=\"number\">4</span>&gt;(light_dir        )).<span class=\"built_in\">normalize</span>();</span><br><span class=\"line\">        <span class=\"type\">float</span> intensity = std::<span class=\"built_in\">max</span>(<span class=\"number\">0.f</span>, n*l);</span><br><span class=\"line\">        color = model-&gt;<span class=\"built_in\">diffuse</span>(uv)*intensity;      <span class=\"comment\">// well duh</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;                              <span class=\"comment\">// no, we do not discard this pixel</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512204303617-1448246807.png\" alt=\"image-20240512214259167\"></p>\n<p><strong>Phone模型着色器</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/06-shaders/e3720a5dfedc49edb0bf70f8bc64204a.png\" alt=\"img\"></p>\n<p>根据Phone光照模型，物体的真实光照可以近似为环境光+漫反射+高光。据此，我们可以进一步得出更加真实的着色器。</p>\n<p>高光的计算如图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/06-shaders/d58cd3bbab46463e87b782a12a147fbb.png\" alt=\"img\"></p>\n<p>已知物体表明法向量为n，入射光为l，两者夹角为a，假设所有向量都被归一化，设反射光为r，则有l+r&#x3D;2n cosa ，可求得反射光r&#x3D;2n cosa - l &#x3D; 2n(n·l)-l。反射光</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">PhoneShader</span> : <span class=\"keyword\">public</span> IShader &#123;</span><br><span class=\"line\">    mat&lt;<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"type\">float</span>&gt; varying_uv;  <span class=\"comment\">// same as above</span></span><br><span class=\"line\">    mat&lt;<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"type\">float</span>&gt; uniform_M;   <span class=\"comment\">//  Projection*ModelView</span></span><br><span class=\"line\">    mat&lt;<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"type\">float</span>&gt; uniform_MIT; <span class=\"comment\">// (Projection*ModelView).invert_transpose()</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> Vec4f <span class=\"title\">vertex</span><span class=\"params\">(<span class=\"type\">int</span> iface, <span class=\"type\">int</span> nthvert)</span> </span>&#123;</span><br><span class=\"line\">        varying_uv.<span class=\"built_in\">set_col</span>(nthvert, model-&gt;<span class=\"built_in\">uv</span>(iface, nthvert));</span><br><span class=\"line\">        Vec4f gl_Vertex = <span class=\"built_in\">embed</span>&lt;<span class=\"number\">4</span>&gt;(model-&gt;<span class=\"built_in\">vert</span>(iface, nthvert)); <span class=\"comment\">// read the vertex from .obj file</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Viewport*Projection*ModelView*gl_Vertex; <span class=\"comment\">// transform it to screen coordinates</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">bool</span> <span class=\"title\">fragment</span><span class=\"params\">(Vec3f bar, TGAColor &amp;color)</span> </span>&#123;</span><br><span class=\"line\">        Vec2f uv = varying_uv*bar;</span><br><span class=\"line\">        Vec3f n = <span class=\"built_in\">proj</span>&lt;<span class=\"number\">3</span>&gt;(uniform_MIT*<span class=\"built_in\">embed</span>&lt;<span class=\"number\">4</span>&gt;(model-&gt;<span class=\"built_in\">normal</span>(uv))).<span class=\"built_in\">normalize</span>();</span><br><span class=\"line\">        Vec3f l = <span class=\"built_in\">proj</span>&lt;<span class=\"number\">3</span>&gt;(uniform_M  *<span class=\"built_in\">embed</span>&lt;<span class=\"number\">4</span>&gt;(light_dir        )).<span class=\"built_in\">normalize</span>();</span><br><span class=\"line\">        Vec3f r = (n*(n*l*<span class=\"number\">2.f</span>) - l).<span class=\"built_in\">normalize</span>();   <span class=\"comment\">// reflected light</span></span><br><span class=\"line\">        <span class=\"type\">float</span> spec = <span class=\"built_in\">pow</span>(std::<span class=\"built_in\">max</span>(r.z, <span class=\"number\">0.0f</span>), model-&gt;<span class=\"built_in\">specular</span>(uv));</span><br><span class=\"line\">        <span class=\"type\">float</span> diff = std::<span class=\"built_in\">max</span>(<span class=\"number\">0.f</span>, n*l);</span><br><span class=\"line\">        TGAColor c = model-&gt;<span class=\"built_in\">diffuse</span>(uv);</span><br><span class=\"line\">        color = c;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">3</span>; i++) color[i] = std::<span class=\"built_in\">min</span>&lt;<span class=\"type\">float</span>&gt;(<span class=\"number\">5</span> + c[i]*(diff + <span class=\"number\">.6</span>*spec), <span class=\"number\">255</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>按照环境光5+自身颜色*(1漫反射+0.6高光)，得到的效果如下</p>\n<img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512210513789-778169408.png\" alt=\"image-20240512220509696\" style=\"zoom:67%;\">\n\n<p>我们可以试试其他的配比系数，如<code>10 + c[i]*(2 * diff + 1.5*spec</code></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512211926468-1109783721.png\" alt=\"image-20240512221918507\"></p>\n<p>另外，我们还可以到master分支找其他的模型，尝试渲染效果</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512211511558-935691911.png\" alt=\"image-20240512221509093\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240512212417887-506051993.png\" alt=\"image-20240512222416047\"></p>\n"},{"title":"hello world nya","date":"2024-04-14T07:08:17.000Z","_content":"qwq\n\nqwq\n\nqwq\n\nqwq\n","source":"_posts/hello-world-nya.md","raw":"---\ntitle: hello world nya\ndate: 2024-04-14 15:08:17\ntags:\n---\nqwq\n\nqwq\n\nqwq\n\nqwq\n","slug":"hello-world-nya","published":1,"updated":"2024-04-14T06:09:18.467Z","comments":1,"layout":"post","photos":[],"_id":"cmd2qsp620006dgyi3vva875a","content":"<p>qwq</p>\n<p>qwq</p>\n<p>qwq</p>\n<p>qwq</p>\n","excerpt":"","more":"<p>qwq</p>\n<p>qwq</p>\n<p>qwq</p>\n<p>qwq</p>\n"},{"title":"test","date":"2025-07-14T06:17:04.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\ntest uploading a pic in cnblogs\n\n![image-20250714144612388](https://img2024.cnblogs.com/blog/1928276/202507/1928276-20250714145620944-648175100.png)\n\n![image-20250714145658002](https://img2024.cnblogs.com/blog/1928276/202507/1928276-20250714145728019-230657612.png)\n","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2025-07-14 14:17:04\ntags:\n---\n\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\ntest uploading a pic in cnblogs\n\n![image-20250714144612388](https://img2024.cnblogs.com/blog/1928276/202507/1928276-20250714145620944-648175100.png)\n\n![image-20250714145658002](https://img2024.cnblogs.com/blog/1928276/202507/1928276-20250714145728019-230657612.png)\n","slug":"test","published":1,"updated":"2025-07-14T06:57:28.683Z","_id":"cmd2qsp64000bdgyi5b96809q","comments":1,"layout":"post","photos":[],"content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>test uploading a pic in cnblogs</p>\n<p><img src=\"https://img2024.cnblogs.com/blog/1928276/202507/1928276-20250714145620944-648175100.png\" alt=\"image-20250714144612388\"></p>\n<p><img src=\"https://img2024.cnblogs.com/blog/1928276/202507/1928276-20250714145728019-230657612.png\" alt=\"image-20250714145658002\"></p>\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>test uploading a pic in cnblogs</p>\n<p><img src=\"https://img2024.cnblogs.com/blog/1928276/202507/1928276-20250714145620944-648175100.png\" alt=\"image-20250714144612388\"></p>\n<p><img src=\"https://img2024.cnblogs.com/blog/1928276/202507/1928276-20250714145728019-230657612.png\" alt=\"image-20250714145658002\"></p>\n"},{"title":"GAMES101 作业8 质点弹簧系统 踩坑指南","date":"2024-05-28T10:05:38.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n\n\n#### 依赖库安装\n\n使用以下命令安装\n\n```sh\nsudo apt install libglu1-mesa-dev freeglut3-dev mesa-common-dev xorg-dev\n```\n\n**不要直接从pdf上复制命令**，pdf上的横线符号是错误的，会导致 `unable to locate`\n\n#### 段错误\n\n来自[在 Win10 下配置 GAMES101 开发环境（WSL2） - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/371080057)\n1.执行\n\n```bash\nexport LIBGL_ALWAYS_INDIRECT=0\n```\n\n2.下载MobaXterm，作为终端启动ropesim\n\n但是，我的MobaXterm中只有一个WSL，上文提到图形界面显示失败的问题并未解决。\n\n下面是通过StackOverflow等摸索而来：\n\n#### **GLFW Error: Linux: Failed to watch for joystick...**\n\n执行\n\n```sh\ntouch ~/.Xauthority \n```\n\n然后重启MobaXterm，\n\n然后执行\n\n```sh\nsudo cp ~/.Xauthority  /root/\n```\n\n然后使用sudo打开ropesim\n\n```sh\nsudo ./ropesim\n```\n\n虽然仍会显示GLFW Error,但能够成功显示窗口。\n\n![image-20240528170135716](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240528160139051-1555565421.png)\n\n#### 弹簧乱飞\n\n参考：\n\n[关于作业8的一些问题解答 – 计算机图形学与混合现实在线平台 (games-cn.org)](https://games-cn.org/forums/topic/guanyuzuoye8deyixiewentijieda/)\n\n对于显示欧拉法，是正常的，减小步长（如 `sudo ./ropesim -s 1024` ）可以减缓发散的时间（但还是会发散）\n\n对于Verlet方法，要在计算每个质点后把 `m->forces`清零，上面simulateEuler函数中已经给出，此处需要自己加上。\n\n#### 完整代码\n\n```cpp\n#include <iostream>\n#include <vector>\n\n#include \"CGL/vector2D.h\"\n\n#include \"mass.h\"\n#include \"rope.h\"\n#include \"spring.h\"\n\nnamespace CGL {\n\n    Rope::Rope(Vector2D start, Vector2D end, int num_nodes, float node_mass, float k, vector<int> pinned_nodes)\n    {\n        // TODO (Part 1): Create a rope starting at `start`, ending at `end`, and containing `num_nodes` nodes.\n\n\n        // Def of rope:\n        // vector<Mass *> masses;\n        // vector<Spring *> springs;\n\n        /*\n          Mass(Vector2D position, float mass, bool pinned)\n      : start_position(position), position(position), last_position(position),\n        mass(mass), pinned(pinned) {}\n        Spring(Mass *a, Mass *b, float k)\n      : m1(a), m2(b), k(k), rest_length((a->position - b->position).norm()) {}\n        */\n        for (int i = 0; i < num_nodes; i++) {\n            Vector2D pos = start + (end - start) * (1.0 * i / (num_nodes - 1));\n            masses.emplace_back(new Mass(pos, node_mass, false));\n        }\n\n        for (int i = 0; i < num_nodes - 1; i++) {\n            springs.emplace_back(new Spring(masses[i], masses[i + 1], k));\n        } \n\n        // Comment-in this part when you implement the constructor\n        for (auto &i : pinned_nodes) {\n            masses[i]->pinned = true;\n        }\n    }\n\n    void Rope::simulateEuler(float delta_t, Vector2D gravity)\n    {\n        for (auto &s : springs)\n        {\n            // TODO (Part 2): Use Hooke's law to calculate the force on a node\n            auto len = (s->m1->position - s->m2->position).norm();\n            s->m1->forces += - s->k * (s->m1->position - s->m2->position) / len * (len - s->rest_length);\n            s->m2->forces += - s->k * (s->m2->position - s->m1->position) / len * (len - s->rest_length);\n        }\n\n        for (auto &m : masses)\n        {\n            if (!m->pinned)\n            {\n                // TODO (Part 2): Add the force due to gravity, then compute the new velocity and position\n                auto a = m->forces / m->mass + gravity;\n                float kd = 0.005; a += - kd * m->velocity / m->mass;  // TODO (Part 2): Add global damping\n                auto v_t = m->velocity;\n                m->velocity += a * delta_t;\n                //m->position += v_t * delta_t;  //Explicit Method 不收敛\n                m->position += m->velocity * delta_t; // Semi-implicit method\n            }\n\n            // Reset all forces on each mass\n            m->forces = Vector2D(0, 0);\n        }\n    }\n\n    void Rope::simulateVerlet(float delta_t, Vector2D gravity)\n    {\n        for (auto &s : springs)\n        {\n            // TODO (Part 3): Simulate one timestep of the rope using explicit Verlet （solving constraints)\n            auto len = (s->m1->position - s->m2->position).norm();\n            s->m1->forces += -s->k * (s->m1->position - s->m2->position) / len * (len - s->rest_length);\n            s->m2->forces += -s->k * (s->m2->position - s->m1->position) / len * (len - s->rest_length);\n        }\n\n        for (auto &m : masses)\n        {\n            if (!m->pinned)\n            {\n                Vector2D temp_position = m->position;\n                // TODO (Part 3.1): Set the new position of the rope mass\n                // TODO (Part 4): Add global Verlet damping\n                auto a = m->forces / m->mass + gravity;\n                float damping_factor = 0.00000000005;\n                m->position = temp_position + (1 - damping_factor) * (temp_position - m->last_position) + a * delta_t * delta_t; \n                m->last_position = temp_position;\n            }\n            m->forces = Vector2D(0, 0);\n        }\n    }\n}\n\n```\n\n![image-20240528180227291](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240528170229905-433311491.png)\n","source":"_posts/GAMES101-作业8-质点弹簧系统-踩坑指南.md","raw":"---\ntitle: GAMES101 作业8 质点弹簧系统 踩坑指南\ndate: 2024-05-28 18:05:38\ntags: 图形学\n---\n\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n\n\n#### 依赖库安装\n\n使用以下命令安装\n\n```sh\nsudo apt install libglu1-mesa-dev freeglut3-dev mesa-common-dev xorg-dev\n```\n\n**不要直接从pdf上复制命令**，pdf上的横线符号是错误的，会导致 `unable to locate`\n\n#### 段错误\n\n来自[在 Win10 下配置 GAMES101 开发环境（WSL2） - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/371080057)\n1.执行\n\n```bash\nexport LIBGL_ALWAYS_INDIRECT=0\n```\n\n2.下载MobaXterm，作为终端启动ropesim\n\n但是，我的MobaXterm中只有一个WSL，上文提到图形界面显示失败的问题并未解决。\n\n下面是通过StackOverflow等摸索而来：\n\n#### **GLFW Error: Linux: Failed to watch for joystick...**\n\n执行\n\n```sh\ntouch ~/.Xauthority \n```\n\n然后重启MobaXterm，\n\n然后执行\n\n```sh\nsudo cp ~/.Xauthority  /root/\n```\n\n然后使用sudo打开ropesim\n\n```sh\nsudo ./ropesim\n```\n\n虽然仍会显示GLFW Error,但能够成功显示窗口。\n\n![image-20240528170135716](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240528160139051-1555565421.png)\n\n#### 弹簧乱飞\n\n参考：\n\n[关于作业8的一些问题解答 – 计算机图形学与混合现实在线平台 (games-cn.org)](https://games-cn.org/forums/topic/guanyuzuoye8deyixiewentijieda/)\n\n对于显示欧拉法，是正常的，减小步长（如 `sudo ./ropesim -s 1024` ）可以减缓发散的时间（但还是会发散）\n\n对于Verlet方法，要在计算每个质点后把 `m->forces`清零，上面simulateEuler函数中已经给出，此处需要自己加上。\n\n#### 完整代码\n\n```cpp\n#include <iostream>\n#include <vector>\n\n#include \"CGL/vector2D.h\"\n\n#include \"mass.h\"\n#include \"rope.h\"\n#include \"spring.h\"\n\nnamespace CGL {\n\n    Rope::Rope(Vector2D start, Vector2D end, int num_nodes, float node_mass, float k, vector<int> pinned_nodes)\n    {\n        // TODO (Part 1): Create a rope starting at `start`, ending at `end`, and containing `num_nodes` nodes.\n\n\n        // Def of rope:\n        // vector<Mass *> masses;\n        // vector<Spring *> springs;\n\n        /*\n          Mass(Vector2D position, float mass, bool pinned)\n      : start_position(position), position(position), last_position(position),\n        mass(mass), pinned(pinned) {}\n        Spring(Mass *a, Mass *b, float k)\n      : m1(a), m2(b), k(k), rest_length((a->position - b->position).norm()) {}\n        */\n        for (int i = 0; i < num_nodes; i++) {\n            Vector2D pos = start + (end - start) * (1.0 * i / (num_nodes - 1));\n            masses.emplace_back(new Mass(pos, node_mass, false));\n        }\n\n        for (int i = 0; i < num_nodes - 1; i++) {\n            springs.emplace_back(new Spring(masses[i], masses[i + 1], k));\n        } \n\n        // Comment-in this part when you implement the constructor\n        for (auto &i : pinned_nodes) {\n            masses[i]->pinned = true;\n        }\n    }\n\n    void Rope::simulateEuler(float delta_t, Vector2D gravity)\n    {\n        for (auto &s : springs)\n        {\n            // TODO (Part 2): Use Hooke's law to calculate the force on a node\n            auto len = (s->m1->position - s->m2->position).norm();\n            s->m1->forces += - s->k * (s->m1->position - s->m2->position) / len * (len - s->rest_length);\n            s->m2->forces += - s->k * (s->m2->position - s->m1->position) / len * (len - s->rest_length);\n        }\n\n        for (auto &m : masses)\n        {\n            if (!m->pinned)\n            {\n                // TODO (Part 2): Add the force due to gravity, then compute the new velocity and position\n                auto a = m->forces / m->mass + gravity;\n                float kd = 0.005; a += - kd * m->velocity / m->mass;  // TODO (Part 2): Add global damping\n                auto v_t = m->velocity;\n                m->velocity += a * delta_t;\n                //m->position += v_t * delta_t;  //Explicit Method 不收敛\n                m->position += m->velocity * delta_t; // Semi-implicit method\n            }\n\n            // Reset all forces on each mass\n            m->forces = Vector2D(0, 0);\n        }\n    }\n\n    void Rope::simulateVerlet(float delta_t, Vector2D gravity)\n    {\n        for (auto &s : springs)\n        {\n            // TODO (Part 3): Simulate one timestep of the rope using explicit Verlet （solving constraints)\n            auto len = (s->m1->position - s->m2->position).norm();\n            s->m1->forces += -s->k * (s->m1->position - s->m2->position) / len * (len - s->rest_length);\n            s->m2->forces += -s->k * (s->m2->position - s->m1->position) / len * (len - s->rest_length);\n        }\n\n        for (auto &m : masses)\n        {\n            if (!m->pinned)\n            {\n                Vector2D temp_position = m->position;\n                // TODO (Part 3.1): Set the new position of the rope mass\n                // TODO (Part 4): Add global Verlet damping\n                auto a = m->forces / m->mass + gravity;\n                float damping_factor = 0.00000000005;\n                m->position = temp_position + (1 - damping_factor) * (temp_position - m->last_position) + a * delta_t * delta_t; \n                m->last_position = temp_position;\n            }\n            m->forces = Vector2D(0, 0);\n        }\n    }\n}\n\n```\n\n![image-20240528180227291](https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240528170229905-433311491.png)\n","slug":"GAMES101-作业8-质点弹簧系统-踩坑指南","published":1,"updated":"2024-05-28T09:06:51.386Z","comments":1,"layout":"post","photos":[],"_id":"cmd2qsp65000cdgyi0qxec6xg","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n<h4 id=\"依赖库安装\"><a href=\"#依赖库安装\" class=\"headerlink\" title=\"依赖库安装\"></a>依赖库安装</h4><p>使用以下命令安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install libglu1-mesa-dev freeglut3-dev mesa-common-dev xorg-dev</span><br></pre></td></tr></table></figure>\n\n<p><strong>不要直接从pdf上复制命令</strong>，pdf上的横线符号是错误的，会导致 <code>unable to locate</code></p>\n<h4 id=\"段错误\"><a href=\"#段错误\" class=\"headerlink\" title=\"段错误\"></a>段错误</h4><p>来自<a href=\"https://zhuanlan.zhihu.com/p/371080057\">在 Win10 下配置 GAMES101 开发环境（WSL2） - 知乎 (zhihu.com)</a><br>1.执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> LIBGL_ALWAYS_INDIRECT=0</span><br></pre></td></tr></table></figure>\n\n<p>2.下载MobaXterm，作为终端启动ropesim</p>\n<p>但是，我的MobaXterm中只有一个WSL，上文提到图形界面显示失败的问题并未解决。</p>\n<p>下面是通过StackOverflow等摸索而来：</p>\n<h4 id=\"GLFW-Error-Linux-Failed-to-watch-for-joystick…\"><a href=\"#GLFW-Error-Linux-Failed-to-watch-for-joystick…\" class=\"headerlink\" title=\"GLFW Error: Linux: Failed to watch for joystick…\"></a><strong>GLFW Error: Linux: Failed to watch for joystick…</strong></h4><p>执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">touch</span> ~/.Xauthority </span><br></pre></td></tr></table></figure>\n\n<p>然后重启MobaXterm，</p>\n<p>然后执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">cp</span> ~/.Xauthority  /root/</span><br></pre></td></tr></table></figure>\n\n<p>然后使用sudo打开ropesim</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./ropesim</span><br></pre></td></tr></table></figure>\n\n<p>虽然仍会显示GLFW Error,但能够成功显示窗口。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240528160139051-1555565421.png\" alt=\"image-20240528170135716\"></p>\n<h4 id=\"弹簧乱飞\"><a href=\"#弹簧乱飞\" class=\"headerlink\" title=\"弹簧乱飞\"></a>弹簧乱飞</h4><p>参考：</p>\n<p><a href=\"https://games-cn.org/forums/topic/guanyuzuoye8deyixiewentijieda/\">关于作业8的一些问题解答 – 计算机图形学与混合现实在线平台 (games-cn.org)</a></p>\n<p>对于显示欧拉法，是正常的，减小步长（如 <code>sudo ./ropesim -s 1024</code> ）可以减缓发散的时间（但还是会发散）</p>\n<p>对于Verlet方法，要在计算每个质点后把 <code>m-&gt;forces</code>清零，上面simulateEuler函数中已经给出，此处需要自己加上。</p>\n<h4 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;CGL/vector2D.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;mass.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;rope.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;spring.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> CGL &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Rope::<span class=\"built_in\">Rope</span>(Vector2D start, Vector2D end, <span class=\"type\">int</span> num_nodes, <span class=\"type\">float</span> node_mass, <span class=\"type\">float</span> k, vector&lt;<span class=\"type\">int</span>&gt; pinned_nodes)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO (Part 1): Create a rope starting at `start`, ending at `end`, and containing `num_nodes` nodes.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Def of rope:</span></span><br><span class=\"line\">        <span class=\"comment\">// vector&lt;Mass *&gt; masses;</span></span><br><span class=\"line\">        <span class=\"comment\">// vector&lt;Spring *&gt; springs;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">          Mass(Vector2D position, float mass, bool pinned)</span></span><br><span class=\"line\"><span class=\"comment\">      : start_position(position), position(position), last_position(position),</span></span><br><span class=\"line\"><span class=\"comment\">        mass(mass), pinned(pinned) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">        Spring(Mass *a, Mass *b, float k)</span></span><br><span class=\"line\"><span class=\"comment\">      : m1(a), m2(b), k(k), rest_length((a-&gt;position - b-&gt;position).norm()) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; num_nodes; i++) &#123;</span><br><span class=\"line\">            Vector2D pos = start + (end - start) * (<span class=\"number\">1.0</span> * i / (num_nodes - <span class=\"number\">1</span>));</span><br><span class=\"line\">            masses.<span class=\"built_in\">emplace_back</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Mass</span>(pos, node_mass, <span class=\"literal\">false</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; num_nodes - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            springs.<span class=\"built_in\">emplace_back</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Spring</span>(masses[i], masses[i + <span class=\"number\">1</span>], k));</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Comment-in this part when you implement the constructor</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;i : pinned_nodes) &#123;</span><br><span class=\"line\">            masses[i]-&gt;pinned = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Rope::simulateEuler</span><span class=\"params\">(<span class=\"type\">float</span> <span class=\"type\">delta_t</span>, Vector2D gravity)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;s : springs)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO (Part 2): Use Hooke&#x27;s law to calculate the force on a node</span></span><br><span class=\"line\">            <span class=\"keyword\">auto</span> len = (s-&gt;m1-&gt;position - s-&gt;m2-&gt;position).<span class=\"built_in\">norm</span>();</span><br><span class=\"line\">            s-&gt;m1-&gt;forces += - s-&gt;k * (s-&gt;m1-&gt;position - s-&gt;m2-&gt;position) / len * (len - s-&gt;rest_length);</span><br><span class=\"line\">            s-&gt;m2-&gt;forces += - s-&gt;k * (s-&gt;m2-&gt;position - s-&gt;m1-&gt;position) / len * (len - s-&gt;rest_length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;m : masses)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!m-&gt;pinned)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// TODO (Part 2): Add the force due to gravity, then compute the new velocity and position</span></span><br><span class=\"line\">                <span class=\"keyword\">auto</span> a = m-&gt;forces / m-&gt;mass + gravity;</span><br><span class=\"line\">                <span class=\"type\">float</span> kd = <span class=\"number\">0.005</span>; a += - kd * m-&gt;velocity / m-&gt;mass;  <span class=\"comment\">// TODO (Part 2): Add global damping</span></span><br><span class=\"line\">                <span class=\"keyword\">auto</span> <span class=\"type\">v_t</span> = m-&gt;velocity;</span><br><span class=\"line\">                m-&gt;velocity += a * <span class=\"type\">delta_t</span>;</span><br><span class=\"line\">                <span class=\"comment\">//m-&gt;position += v_t * delta_t;  //Explicit Method 不收敛</span></span><br><span class=\"line\">                m-&gt;position += m-&gt;velocity * <span class=\"type\">delta_t</span>; <span class=\"comment\">// Semi-implicit method</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Reset all forces on each mass</span></span><br><span class=\"line\">            m-&gt;forces = <span class=\"built_in\">Vector2D</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Rope::simulateVerlet</span><span class=\"params\">(<span class=\"type\">float</span> <span class=\"type\">delta_t</span>, Vector2D gravity)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;s : springs)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO (Part 3): Simulate one timestep of the rope using explicit Verlet （solving constraints)</span></span><br><span class=\"line\">            <span class=\"keyword\">auto</span> len = (s-&gt;m1-&gt;position - s-&gt;m2-&gt;position).<span class=\"built_in\">norm</span>();</span><br><span class=\"line\">            s-&gt;m1-&gt;forces += -s-&gt;k * (s-&gt;m1-&gt;position - s-&gt;m2-&gt;position) / len * (len - s-&gt;rest_length);</span><br><span class=\"line\">            s-&gt;m2-&gt;forces += -s-&gt;k * (s-&gt;m2-&gt;position - s-&gt;m1-&gt;position) / len * (len - s-&gt;rest_length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;m : masses)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!m-&gt;pinned)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Vector2D temp_position = m-&gt;position;</span><br><span class=\"line\">                <span class=\"comment\">// TODO (Part 3.1): Set the new position of the rope mass</span></span><br><span class=\"line\">                <span class=\"comment\">// TODO (Part 4): Add global Verlet damping</span></span><br><span class=\"line\">                <span class=\"keyword\">auto</span> a = m-&gt;forces / m-&gt;mass + gravity;</span><br><span class=\"line\">                <span class=\"type\">float</span> damping_factor = <span class=\"number\">0.00000000005</span>;</span><br><span class=\"line\">                m-&gt;position = temp_position + (<span class=\"number\">1</span> - damping_factor) * (temp_position - m-&gt;last_position) + a * <span class=\"type\">delta_t</span> * <span class=\"type\">delta_t</span>; </span><br><span class=\"line\">                m-&gt;last_position = temp_position;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            m-&gt;forces = <span class=\"built_in\">Vector2D</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240528170229905-433311491.png\" alt=\"image-20240528180227291\"></p>\n","excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n<h4 id=\"依赖库安装\"><a href=\"#依赖库安装\" class=\"headerlink\" title=\"依赖库安装\"></a>依赖库安装</h4><p>使用以下命令安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install libglu1-mesa-dev freeglut3-dev mesa-common-dev xorg-dev</span><br></pre></td></tr></table></figure>\n\n<p><strong>不要直接从pdf上复制命令</strong>，pdf上的横线符号是错误的，会导致 <code>unable to locate</code></p>\n<h4 id=\"段错误\"><a href=\"#段错误\" class=\"headerlink\" title=\"段错误\"></a>段错误</h4><p>来自<a href=\"https://zhuanlan.zhihu.com/p/371080057\">在 Win10 下配置 GAMES101 开发环境（WSL2） - 知乎 (zhihu.com)</a><br>1.执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> LIBGL_ALWAYS_INDIRECT=0</span><br></pre></td></tr></table></figure>\n\n<p>2.下载MobaXterm，作为终端启动ropesim</p>\n<p>但是，我的MobaXterm中只有一个WSL，上文提到图形界面显示失败的问题并未解决。</p>\n<p>下面是通过StackOverflow等摸索而来：</p>\n<h4 id=\"GLFW-Error-Linux-Failed-to-watch-for-joystick…\"><a href=\"#GLFW-Error-Linux-Failed-to-watch-for-joystick…\" class=\"headerlink\" title=\"GLFW Error: Linux: Failed to watch for joystick…\"></a><strong>GLFW Error: Linux: Failed to watch for joystick…</strong></h4><p>执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">touch</span> ~/.Xauthority </span><br></pre></td></tr></table></figure>\n\n<p>然后重启MobaXterm，</p>\n<p>然后执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">cp</span> ~/.Xauthority  /root/</span><br></pre></td></tr></table></figure>\n\n<p>然后使用sudo打开ropesim</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./ropesim</span><br></pre></td></tr></table></figure>\n\n<p>虽然仍会显示GLFW Error,但能够成功显示窗口。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240528160139051-1555565421.png\" alt=\"image-20240528170135716\"></p>\n<h4 id=\"弹簧乱飞\"><a href=\"#弹簧乱飞\" class=\"headerlink\" title=\"弹簧乱飞\"></a>弹簧乱飞</h4><p>参考：</p>\n<p><a href=\"https://games-cn.org/forums/topic/guanyuzuoye8deyixiewentijieda/\">关于作业8的一些问题解答 – 计算机图形学与混合现实在线平台 (games-cn.org)</a></p>\n<p>对于显示欧拉法，是正常的，减小步长（如 <code>sudo ./ropesim -s 1024</code> ）可以减缓发散的时间（但还是会发散）</p>\n<p>对于Verlet方法，要在计算每个质点后把 <code>m-&gt;forces</code>清零，上面simulateEuler函数中已经给出，此处需要自己加上。</p>\n<h4 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;CGL/vector2D.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;mass.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;rope.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;spring.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> CGL &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Rope::<span class=\"built_in\">Rope</span>(Vector2D start, Vector2D end, <span class=\"type\">int</span> num_nodes, <span class=\"type\">float</span> node_mass, <span class=\"type\">float</span> k, vector&lt;<span class=\"type\">int</span>&gt; pinned_nodes)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO (Part 1): Create a rope starting at `start`, ending at `end`, and containing `num_nodes` nodes.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Def of rope:</span></span><br><span class=\"line\">        <span class=\"comment\">// vector&lt;Mass *&gt; masses;</span></span><br><span class=\"line\">        <span class=\"comment\">// vector&lt;Spring *&gt; springs;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">          Mass(Vector2D position, float mass, bool pinned)</span></span><br><span class=\"line\"><span class=\"comment\">      : start_position(position), position(position), last_position(position),</span></span><br><span class=\"line\"><span class=\"comment\">        mass(mass), pinned(pinned) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">        Spring(Mass *a, Mass *b, float k)</span></span><br><span class=\"line\"><span class=\"comment\">      : m1(a), m2(b), k(k), rest_length((a-&gt;position - b-&gt;position).norm()) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; num_nodes; i++) &#123;</span><br><span class=\"line\">            Vector2D pos = start + (end - start) * (<span class=\"number\">1.0</span> * i / (num_nodes - <span class=\"number\">1</span>));</span><br><span class=\"line\">            masses.<span class=\"built_in\">emplace_back</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Mass</span>(pos, node_mass, <span class=\"literal\">false</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; num_nodes - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            springs.<span class=\"built_in\">emplace_back</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Spring</span>(masses[i], masses[i + <span class=\"number\">1</span>], k));</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Comment-in this part when you implement the constructor</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;i : pinned_nodes) &#123;</span><br><span class=\"line\">            masses[i]-&gt;pinned = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Rope::simulateEuler</span><span class=\"params\">(<span class=\"type\">float</span> <span class=\"type\">delta_t</span>, Vector2D gravity)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;s : springs)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO (Part 2): Use Hooke&#x27;s law to calculate the force on a node</span></span><br><span class=\"line\">            <span class=\"keyword\">auto</span> len = (s-&gt;m1-&gt;position - s-&gt;m2-&gt;position).<span class=\"built_in\">norm</span>();</span><br><span class=\"line\">            s-&gt;m1-&gt;forces += - s-&gt;k * (s-&gt;m1-&gt;position - s-&gt;m2-&gt;position) / len * (len - s-&gt;rest_length);</span><br><span class=\"line\">            s-&gt;m2-&gt;forces += - s-&gt;k * (s-&gt;m2-&gt;position - s-&gt;m1-&gt;position) / len * (len - s-&gt;rest_length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;m : masses)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!m-&gt;pinned)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// TODO (Part 2): Add the force due to gravity, then compute the new velocity and position</span></span><br><span class=\"line\">                <span class=\"keyword\">auto</span> a = m-&gt;forces / m-&gt;mass + gravity;</span><br><span class=\"line\">                <span class=\"type\">float</span> kd = <span class=\"number\">0.005</span>; a += - kd * m-&gt;velocity / m-&gt;mass;  <span class=\"comment\">// TODO (Part 2): Add global damping</span></span><br><span class=\"line\">                <span class=\"keyword\">auto</span> <span class=\"type\">v_t</span> = m-&gt;velocity;</span><br><span class=\"line\">                m-&gt;velocity += a * <span class=\"type\">delta_t</span>;</span><br><span class=\"line\">                <span class=\"comment\">//m-&gt;position += v_t * delta_t;  //Explicit Method 不收敛</span></span><br><span class=\"line\">                m-&gt;position += m-&gt;velocity * <span class=\"type\">delta_t</span>; <span class=\"comment\">// Semi-implicit method</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Reset all forces on each mass</span></span><br><span class=\"line\">            m-&gt;forces = <span class=\"built_in\">Vector2D</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Rope::simulateVerlet</span><span class=\"params\">(<span class=\"type\">float</span> <span class=\"type\">delta_t</span>, Vector2D gravity)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;s : springs)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO (Part 3): Simulate one timestep of the rope using explicit Verlet （solving constraints)</span></span><br><span class=\"line\">            <span class=\"keyword\">auto</span> len = (s-&gt;m1-&gt;position - s-&gt;m2-&gt;position).<span class=\"built_in\">norm</span>();</span><br><span class=\"line\">            s-&gt;m1-&gt;forces += -s-&gt;k * (s-&gt;m1-&gt;position - s-&gt;m2-&gt;position) / len * (len - s-&gt;rest_length);</span><br><span class=\"line\">            s-&gt;m2-&gt;forces += -s-&gt;k * (s-&gt;m2-&gt;position - s-&gt;m1-&gt;position) / len * (len - s-&gt;rest_length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;m : masses)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!m-&gt;pinned)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Vector2D temp_position = m-&gt;position;</span><br><span class=\"line\">                <span class=\"comment\">// TODO (Part 3.1): Set the new position of the rope mass</span></span><br><span class=\"line\">                <span class=\"comment\">// TODO (Part 4): Add global Verlet damping</span></span><br><span class=\"line\">                <span class=\"keyword\">auto</span> a = m-&gt;forces / m-&gt;mass + gravity;</span><br><span class=\"line\">                <span class=\"type\">float</span> damping_factor = <span class=\"number\">0.00000000005</span>;</span><br><span class=\"line\">                m-&gt;position = temp_position + (<span class=\"number\">1</span> - damping_factor) * (temp_position - m-&gt;last_position) + a * <span class=\"type\">delta_t</span> * <span class=\"type\">delta_t</span>; </span><br><span class=\"line\">                m-&gt;last_position = temp_position;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            m-&gt;forces = <span class=\"built_in\">Vector2D</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img2023.cnblogs.com/blog/1928276/202405/1928276-20240528170229905-433311491.png\" alt=\"image-20240528180227291\"></p>\n"}],"PostAsset":[{"_id":"source/_posts/GAMES101-作业7-路径追踪-踩坑指南/image-20240416133728725.png","slug":"image-20240416133728725.png","post":"cmd2qsp5y0001dgyifhhjhyiv","modified":0,"renderable":0},{"_id":"source/_posts/GAMES101-作业7-路径追踪-踩坑指南/image-20240416133742442.png","slug":"image-20240416133742442.png","post":"cmd2qsp5y0001dgyifhhjhyiv","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cmd2qsp5y0001dgyifhhjhyiv","tag_id":"cmd2qsp610004dgyiaqby1mt3","_id":"cmd2qsp630009dgyigjfnfmbf"},{"post_id":"cmd2qsp620005dgyiaweme1gr","tag_id":"cmd2qsp610004dgyiaqby1mt3","_id":"cmd2qsp63000adgyif0bd2zeh"},{"post_id":"cmd2qsp65000cdgyi0qxec6xg","tag_id":"cmd2qsp610004dgyiaqby1mt3","_id":"cmd2qsp65000ddgyi8en922r6"}],"Tag":[{"name":"图形学","_id":"cmd2qsp610004dgyiaqby1mt3"}]}}